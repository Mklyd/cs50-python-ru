{"version":3,"file":"js/about.ccd56ac8.js","mappings":"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","sources":["webpack://cs50-site/./src/components/LicenseNav.vue","webpack://cs50-site/./src/components/LicenseNav.vue?f126","webpack://cs50-site/./src/components/Week0Nav.vue","webpack://cs50-site/./src/components/Week0Nav.vue?e57e","webpack://cs50-site/./src/components/Week1Nav.vue","webpack://cs50-site/./src/components/Week1Nav.vue?9d14","webpack://cs50-site/./src/components/Week2Nav.vue","webpack://cs50-site/./src/components/Week2Nav.vue?9d33","webpack://cs50-site/./src/components/Week3Nav.vue","webpack://cs50-site/./src/components/Week3Nav.vue?2c3b","webpack://cs50-site/./src/components/Week4Nav.vue","webpack://cs50-site/./src/components/Week4Nav.vue?b300","webpack://cs50-site/./src/components/Week5Nav.vue","webpack://cs50-site/./src/components/Week5Nav.vue?5cc0","webpack://cs50-site/./src/components/Week6Nav.vue","webpack://cs50-site/./src/components/Week6Nav.vue?504e","webpack://cs50-site/./src/components/Week7Nav.vue","webpack://cs50-site/./src/components/Week7Nav.vue?b1d7","webpack://cs50-site/./src/components/Week8Nav.vue","webpack://cs50-site/./src/components/Week8Nav.vue?474c","webpack://cs50-site/./src/components/Week9Nav.vue","webpack://cs50-site/./src/components/Week9Nav.vue?56eb","webpack://cs50-site/./src/views/week0/Notes0View.vue","webpack://cs50-site/./src/views/week0/Notes0View.vue?aca9","webpack://cs50-site/./src/views/week0/Psets0View.vue","webpack://cs50-site/./src/views/week0/Psets0View.vue?d8b7","webpack://cs50-site/./src/views/week1/DeepThought.vue","webpack://cs50-site/./src/views/week1/DeepThought.vue?cc95","webpack://cs50-site/./src/views/week1/FileExtensions.vue","webpack://cs50-site/./src/views/week1/FileExtensions.vue?85a5","webpack://cs50-site/./src/views/week1/HomeBank.vue","webpack://cs50-site/./src/views/week1/HomeBank.vue?0d6f","webpack://cs50-site/./src/views/week1/MathInterpreter.vue","webpack://cs50-site/./src/views/week1/MathInterpreter.vue?db05","webpack://cs50-site/./src/views/week1/MealTime.vue","webpack://cs50-site/./src/views/week1/MealTime.vue?435c","webpack://cs50-site/./src/views/week1/Notes1View.vue","webpack://cs50-site/./src/views/week1/Notes1View.vue?3e9d","webpack://cs50-site/./src/views/week1/Psets1View.vue","webpack://cs50-site/./src/views/week1/Psets1View.vue?419f","webpack://cs50-site/./src/views/week2/CamelCase.vue","webpack://cs50-site/./src/views/week2/CamelCase.vue?6b03","webpack://cs50-site/./src/views/week2/CokeMachine.vue","webpack://cs50-site/./src/views/week2/CokeMachine.vue?9e1d","webpack://cs50-site/./src/views/week2/JustTwttr.vue","webpack://cs50-site/./src/views/week2/JustTwttr.vue?249e","webpack://cs50-site/./src/views/week2/Notes2View.vue","webpack://cs50-site/./src/views/week2/Notes2View.vue?92a1","webpack://cs50-site/./src/views/week2/NutritionFacts.vue","webpack://cs50-site/./src/views/week2/NutritionFacts.vue?5e5d","webpack://cs50-site/./src/views/week2/Psets2View.vue","webpack://cs50-site/./src/views/week2/Psets2View.vue?ad44","webpack://cs50-site/./src/views/week2/VanityPlates.vue","webpack://cs50-site/./src/views/week2/VanityPlates.vue?e2b5","webpack://cs50-site/./src/views/week3/FelipesTaqueria.vue","webpack://cs50-site/./src/views/week3/FelipesTaqueria.vue?3dd6","webpack://cs50-site/./src/views/week3/FuelGauge.vue","webpack://cs50-site/./src/views/week3/FuelGauge.vue?55fb","webpack://cs50-site/./src/views/week3/GroceryList.vue","webpack://cs50-site/./src/views/week3/GroceryList.vue?df8b","webpack://cs50-site/./src/views/week3/Notes3View.vue","webpack://cs50-site/./src/views/week3/Notes3View.vue?0d97","webpack://cs50-site/./src/views/week3/Psets3View.vue","webpack://cs50-site/./src/views/week3/Psets3View.vue?2417","webpack://cs50-site/./src/views/week3/PsetsOutdated.vue","webpack://cs50-site/./src/views/week3/PsetsOutdated.vue?4d5c","webpack://cs50-site/./src/views/week4/AdieuAdieu.vue","webpack://cs50-site/./src/views/week4/AdieuAdieu.vue?a564","webpack://cs50-site/./src/views/week4/BitcoinPriceIndex.vue","webpack://cs50-site/./src/views/week4/BitcoinPriceIndex.vue?e5e6","webpack://cs50-site/./src/views/week4/FrankIanandGlensLetters.vue","webpack://cs50-site/./src/views/week4/FrankIanandGlensLetters.vue?2ccb","webpack://cs50-site/./src/views/week4/GuessingGame.vue","webpack://cs50-site/./src/views/week4/GuessingGame.vue?651e","webpack://cs50-site/./src/views/week4/LittleProfessor.vue","webpack://cs50-site/./src/views/week4/LittleProfessor.vue?c888","webpack://cs50-site/./src/views/week4/Notes4View.vue","webpack://cs50-site/./src/views/week4/Notes4View.vue?24bc","webpack://cs50-site/./src/views/week4/Psets4View.vue","webpack://cs50-site/./src/views/week4/Psets4View.vue?b2e5","webpack://cs50-site/./src/views/week4/PsetsEmojize.vue","webpack://cs50-site/./src/views/week4/PsetsEmojize.vue?20b3"],"sourcesContent":["<template>\r\n    <main class=\"col-md\" style=\"margin-bottom: 100px; margin-top: 0px;\">\r\n\r\n<a data-id=\"\" id=\"license\" style=\"top: 0px;\"></a><h1><a data-id=\"\" href=\"#license\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Лицензия</font></font></a></h1>\r\n\r\n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Этот курс находится под лицензией Creative Commons </font></font><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Attribution-NonCommercial-ShareAlike 4.0 International</font></font></a><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\"> (CC BY-NC-SA 4.0). </font><font style=\"vertical-align: inherit;\">Это удобочитаемое краткое изложение </font></font><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/legalcode\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">лицензии</font></font></a><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\"> (а не ее замена) . </font><font style=\"vertical-align: inherit;\">Официальные переводы этой лицензии доступны на </font></font><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/legalcode#languages\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">других языках</font></font></a><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\"> .</font></font></p>\r\n\r\n<p class=\"font-weight-bold\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Вы можете:</font></font></p>\r\n\r\n<ul class=\"fa-ul\">\r\n<li>\r\n<strong><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Делитесь</font></font></strong><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\"> — копируйте и распространяйте материал на любом носителе и в любом формате.\r\n</font></font></li>\r\n<li>\r\n<strong><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Адаптируйтесь</font></font></strong><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\"> — делайте ремиксы, трансформируйте и развивайте материал\r\n</font></font></li>\r\n</ul>\r\n\r\n<p class=\"font-weight-bold\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">На следующих условиях:</font></font></p>\r\n<ul class=\"fa-ul\">\r\n<li>\r\n<span class=\"fa-li fab fa-creative-commons-by\"></span>\r\n<div><strong><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Атрибуция</font></font></strong><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\"> — вы должны предоставить соответствующий кредит, предоставить ссылку на лицензию и указать, были ли внесены изменения. </font><font style=\"vertical-align: inherit;\">Вы можете сделать это любым разумным способом, но никоим образом не предполагающим, что лицензиар одобряет вас или ваше использование.</font></font></div>\r\n</li>\r\n<li>\r\n<span class=\"fa-li fab fa-creative-commons-nc\"></span>\r\n<div><strong><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Некоммерческий</font></font></strong><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\"> — вы не можете использовать материал в коммерческих целях.</font></font></div>\r\n</li>\r\n<li>\r\n<span class=\"fa-li fab fa-creative-commons-sa\"></span>\r\n<div><strong><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">ShareAlike</font></font></strong><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\"> — Если вы микшируете, трансформируете или развиваете материал, вы должны распространять свои материалы под той же лицензией, что и оригинал.</font></font></div>\r\n</li>\r\n<li class=\"mt-3\">\r\n<div><strong><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Никаких дополнительных ограничений</font></font></strong><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\"> . Вы не можете применять юридические условия или технологические меры, которые на законных основаниях запрещают другим делать что-либо, разрешенное лицензией.</font></font></div>\r\n</li>\r\n</ul>\r\n\r\n</main>\r\n</template>","import { render } from \"./LicenseNav.vue?vue&type=template&id=3858d509\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ммм\\\\Desktop\\\\cs50-python-ru\\\\cs50-python-ru\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <div class=\"about\">\n    <h1>Неделя 0 Функции</h1>\n    <iframe width=\"1214\" height=\"683\" src=\"https://www.youtube.com/embed/JP7ITIXGpHk\" title=\"CS50P - Lecture 0 - Functions, Variables\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n    <ul>\n      <li>\n          <span>Лекция</span>\n          <ul>\n              <li>\n                <span>Аудио</span>\n                <ul>\n                  <li><a href=\"http://cdn.cs50.net/python/2022/x/lectures/0/lecture0.mp3\">MP3</a></li>\n                </ul>\n              </li>\n              <li><a href=\"../../notes/0\">Заметки</a></li>\n              <li><span>Слайды</span>\n                <ul>\n                  <li><a href=\"https://docs.google.com/presentation/d/1yPirrSP2qRjnKiIFW39HJV2cmhwqAkooQkv9jZz2Hqs/edit?usp=sharing\">Google Слайды</a></li>\n                  <li><a href=\"https://cdn.cs50.net/python/2022/x/lectures/0/lecture0.pdf\">PDF</a></li>\n                </ul>\n              </li>\n              <li>\n                <span>Исходный код</span>\n                <ul>\n                  <li><a href=\"https://cdn.cs50.net/python/2022/x/lectures/0/src0/\">Index</a></li>\n                  <li><a href=\"https://cdn.cs50.net/python/2022/x/lectures/0/src0.pdf\">PDF</a></li>\n                  <li><a href=\"https://cdn.cs50.net/python/2022/x/lectures/0/src0.zip\">Zip</a></li>\n                </ul>\n              </li>\n              <li><a href=\"http://cdn.cs50.net/python/2022/x/lectures/0/lang/en/lecture0.srt\">Субтитры</a></li>\n              <li><a href=\"http://cdn.cs50.net/python/2022/x/lectures/0/lang/en/lecture0.txt\">Стенограмма видео</a></li>\n              <li>\n                <span>Видео</span>\n                <ul>\n                  <li><a href=\"https://video.cs50.io/JP7ITIXGpHk\">CS50 Видео плейер</a></li>\n                  <li>\n                    <span>MP4</span>\n                    <ul>\n                      <li>\n                        <span>HDR</span>\n                        <ul><li><a href=\"http://cdn.cs50.net/python/2022/x/lectures/0/lecture0-4k-hdr.mp4\">4K</a></li></ul>\n                      </li>\n                      <li>\n                        <span>SDR</span>\n                        <ul>\n                          <li><a href=\"http://cdn.cs50.net/python/2022/x/lectures/0/lecture0-360p.mp4\">360p</a></li>\n                          <li><a href=\"http://cdn.cs50.net/python/2022/x/lectures/0/lecture0-720p.mp4\">720p</a></li>\n                          <li><a href=\"http://cdn.cs50.net/python/2022/x/lectures/0/lecture0-1080p.mp4\">1080p</a></li>\n                          <li><a href=\"http://cdn.cs50.net/python/2022/x/lectures/0/lecture0-4k.mp4\">4K</a></li>\n                        </ul>\n                      </li>\n                    </ul>\n                  </li>\n                  <li><a href=\"https://youtu.be/JP7ITIXGpHk\">YouTube</a></li>\n                </ul>\n              </li>\n          </ul>\n      </li>\n      <li></li>\n      <li><a href=\"../psets/0\">Набор проблем 0</a></li>\n    </ul>\n  </div>\n</template>\n<style>\n\n</style>","import { render } from \"./Week0Nav.vue?vue&type=template&id=6b157414\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ммм\\\\Desktop\\\\cs50-python-ru\\\\cs50-python-ru\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n    <div class=\"about\">\r\n      <h1>Неделя 1 Условные выражения</h1>\r\n      <iframe width=\"1214\" height=\"683\" src=\"https://www.youtube.com/embed/_b6NgY_pMdw\" title=\"CS50P - Lecture 1 - Conditionals\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\r\n      <ul>\r\n        <li>\r\n            <span>Лекция</span>\r\n            <ul>\r\n                <li>\r\n                  <span>Аудио</span>\r\n                  <ul>\r\n                    <li><a href=\"http://cdn.cs50.net/python/2022/x/lectures/0/lecture0.mp3\">MP3</a></li>\r\n                  </ul>\r\n                </li>\r\n                <li><a href=\"../../notes/1\">Заметки</a></li>\r\n                <li><span>Слайды</span>\r\n                  <ul>\r\n                    <li><a href=\"https://docs.google.com/presentation/d/1iagFk7-WnjrWA4fxeHzbYG1MkaO9GYk1DCuRnrFWOQQ/edit?usp=sharing\">Google Слайды</a> </li>\r\n                    <li><a href=\"https://cdn.cs50.net/python/2022/x/lectures/1/lecture1.pdf\">PDF</a> </li>\r\n                  </ul>\r\n                </li>\r\n                <li>\r\n                  <span>Исходный код</span>\r\n                  <ul>\r\n                    <li><a href=\"https://cdn.cs50.net/python/2022/x/lectures/1/src1/\">Index</a> </li>\r\n                    <li><a href=\"https://cdn.cs50.net/python/2022/x/lectures/1/src1.pdf\">PDF</a> </li>\r\n                    <li><a href=\"https://cdn.cs50.net/python/2022/x/lectures/1/src1.zip\">Zip</a> </li>\r\n                  </ul>\r\n                </li>\r\n                <li><a href=\"http://cdn.cs50.net/python/2022/x/lectures/1/lang/en/lecture1.srt\">Субтитры</a> </li>\r\n                <li><a href=\"http://cdn.cs50.net/python/2022/x/lectures/1/lang/en/lecture1.txt\">Стенограмма видео</a> </li>\r\n                <li>\r\n                  <span>Видео</span>\r\n                  <ul>\r\n                    <li><a href=\"https://video.cs50.io/_b6NgY_pMdw\">CS50 Видео плейер</a> </li>\r\n                    <li>\r\n                      <span>MP4</span>\r\n                      <ul>\r\n                        <li>\r\n                          <span>HDR</span>\r\n                          <ul><li><a href=\"http://cdn.cs50.net/python/2022/x/lectures/1/lecture1-4k-hdr.mp4\">4K</a> </li></ul>\r\n                        </li>\r\n                        <li>\r\n                          <span>SDR</span>\r\n                          <ul>\r\n                            <li><a href=\"http://cdn.cs50.net/python/2022/x/lectures/1/lecture1-360p.mp4\">360p</a> </li>\r\n                            <li><a href=\"http://cdn.cs50.net/python/2022/x/lectures/1/lecture1-720p.mp4\">720p</a> </li>\r\n                            <li><a href=\"http://cdn.cs50.net/python/2022/x/lectures/1/lecture1-1080p.mp4\">1080p</a> </li>\r\n                            <li><a href=\"http://cdn.cs50.net/python/2022/x/lectures/1/lecture1-4k.mp4\">4K</a> </li>\r\n                          </ul>\r\n                        </li>\r\n                      </ul>\r\n                    </li>\r\n                    <li><a href=\"https://youtu.be/_b6NgY_pMdw\">YouTube</a> </li>\r\n                  </ul>\r\n                </li>\r\n            </ul>\r\n        </li>\r\n        <li><a href=\"../psets/1\">Набор проблем 1</a></li>\r\n      </ul>\r\n    </div>\r\n  </template>\r\n  <style>\r\n  \r\n  </style>","import { render } from \"./Week1Nav.vue?vue&type=template&id=3c228374\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ммм\\\\Desktop\\\\cs50-python-ru\\\\cs50-python-ru\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n  <div class=\"about\">\r\n    <h1>Неделя 2 Циклы</h1>\r\n    <iframe width=\"1214\" height=\"683\" src=\"https://www.youtube.com/embed/-7xg8pGcP6w\" title=\"CS50P - Lecture 2 - Loops\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\r\n    <ul>\r\n      <li>\r\n          <span>Лекция</span>\r\n          <ul>\r\n              <li>\r\n                <span>Аудио</span>\r\n                <ul>\r\n                  <li><a href=\"http://cdn.cs50.net/python/2022/x/lectures/2/lecture2.mp3\">MP3</a></li>\r\n                </ul>\r\n              </li>\r\n              <li><a href=\"../../notes/2\">Заметки</a></li>\r\n              <li><span>Слайды</span>\r\n                <ul>\r\n                  <li><a href=\"https://docs.google.com/presentation/d/1Dpqw4_EkV_EzSb7LC-Hy5ZQ-s0pflW0eS8GCZ4yxTnI/edit?usp=sharing\">Google Слайды</a> </li>\r\n                  <li><a href=\"https://cdn.cs50.net/python/2022/x/lectures/2/lecture2.pdf\">PDF</a> </li>\r\n                </ul>\r\n              </li>\r\n              <li>\r\n                <span>Исходный код</span>\r\n                <ul>\r\n                  <li><a href=\"https://cdn.cs50.net/python/2022/x/lectures/2/src2/\">Index</a> </li>\r\n                  <li><a href=\"https://cdn.cs50.net/python/2022/x/lectures/2/src2.pdf\">PDF</a> </li>\r\n                  <li><a href=\"https://cdn.cs50.net/python/2022/x/lectures/2/src2.zip\">Zip</a> </li>\r\n                </ul>\r\n              </li>\r\n              <li><a href=\"http://cdn.cs50.net/python/2022/x/lectures/2/lang/en/lecture2.srt\">Субтитры</a> </li>\r\n              <li><a href=\"http://cdn.cs50.net/python/2022/x/lectures/2/lang/en/lecture2.txt\">Стенограмма видео</a> </li>\r\n              <li>\r\n                <span>Видео</span>\r\n                <ul>\r\n                  <li><a href=\"https://video.cs50.io/-7xg8pGcP6w\">CS50 Видео плейер</a> </li>\r\n                  <li>\r\n                    <span>MP4</span>\r\n                    <ul>\r\n                      <li>\r\n                        <span>HDR</span>\r\n                        <ul><li><a href=\"http://cdn.cs50.net/python/2022/x/lectures/2/lecture2-4k-hdr.mp4\">4K</a> </li></ul>\r\n                      </li>\r\n                      <li>\r\n                        <span>SDR</span>\r\n                        <ul>\r\n                          <li><a href=\"http://cdn.cs50.net/python/2022/x/lectures/2/lecture2-360p.mp4\">360p</a> </li>\r\n                          <li><a href=\"http://cdn.cs50.net/python/2022/x/lectures/2/lecture2-720p.mp4\">720p</a> </li>\r\n                          <li><a href=\"http://cdn.cs50.net/python/2022/x/lectures/2/lecture2-1080p.mp4\">1080p</a> </li>\r\n                          <li><a href=\"http://cdn.cs50.net/python/2022/x/lectures/2/lecture2-4k.mp4\">4K</a> </li>\r\n                        </ul>\r\n                      </li>\r\n                    </ul>\r\n                  </li>\r\n                  <li><a href=\"https://youtu.be/-7xg8pGcP6w\">YouTube</a> </li>\r\n                </ul>\r\n              </li>\r\n          </ul>\r\n      </li>\r\n      <li><a href=\"../psets/2\">Набор проблем 2</a></li>\r\n    </ul>\r\n  </div>\r\n</template>\r\n<style>\r\n\r\n</style>","import { render } from \"./Week2Nav.vue?vue&type=template&id=7780c3fb\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ммм\\\\Desktop\\\\cs50-python-ru\\\\cs50-python-ru\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n    <div class=\"about\">\r\n      <h1>Неделя 3 Исключения</h1>\r\n      <iframe width=\"1214\" height=\"683\" src=\"https://www.youtube.com/embed/LW7g1169v7w\" title=\"CS50P - Lecture 3 - Exceptions\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\r\n      <ul>\r\n        <li>\r\n            <span>Лекция</span>\r\n            <ul>\r\n                <li>\r\n                  <span>Аудио</span>\r\n                  <ul>\r\n                    <li><a href=\"http://cdn.cs50.net/python/2022/x/lectures/3/lecture3.mp3\">MP3</a></li>\r\n                  </ul>\r\n                </li>\r\n                <li><a href=\"../../notes/3\">Заметки</a></li>\r\n                <li><span>Слайды</span>\r\n                  <ul>\r\n                    <li><a href=\"https://docs.google.com/presentation/d/116CmERVfymJwp5XJmywrKuv00nRns_nqmrdzNehNNUg/edit?usp=sharing\">Google Слайды</a> </li>\r\n                    <li><a href=\"https://cdn.cs50.net/python/2022/x/lectures/3/lecture3.pdf\">PDF</a> </li>\r\n                  </ul>\r\n                </li>\r\n                <li>\r\n                  <span>Исходный код</span>\r\n                  <ul>\r\n                    <li><a href=\"https://cdn.cs50.net/python/2022/x/lectures/3/src3/\">Index</a> </li>\r\n                    <li><a href=\"https://cdn.cs50.net/python/2022/x/lectures/3/src3.pdf\">PDF</a> </li>\r\n                    <li><a href=\"https://cdn.cs50.net/python/2022/x/lectures/3/src3.zip\">Zip</a> </li>\r\n                  </ul>\r\n                </li>\r\n                <li><a href=\"http://cdn.cs50.net/python/2022/x/lectures/3/lang/en/lecture3.srt\">Субтитры</a> </li>\r\n                <li><a href=\"http://cdn.cs50.net/python/2022/x/lectures/3/lang/en/lecture3.txt\">Стенограмма видео</a> </li>\r\n                <li>\r\n                  <span>Видео</span>\r\n                  <ul>\r\n                    <li><a href=\"https://video.cs50.io/-7xg8pGcP6w\">CS50 Видео плейер</a> </li>\r\n                    <li>\r\n                      <span>MP4</span>\r\n                      <ul>\r\n                        <li>\r\n                          <span>HDR</span>\r\n                          <ul><li><a href=\"http://cdn.cs50.net/python/2022/x/lectures/3/lecture3-4k-hdr.mp4\">4K</a> </li></ul>\r\n                        </li>\r\n                        <li>\r\n                          <span>SDR</span>\r\n                          <ul>\r\n                            <li><a href=\"http://cdn.cs50.net/python/2022/x/lectures/3/lecture3-360p.mp4\">360p</a> </li>\r\n                            <li><a href=\"http://cdn.cs50.net/python/2022/x/lectures/3/lecture3-720p.mp4\">720p</a> </li>\r\n                            <li><a href=\"http://cdn.cs50.net/python/2022/x/lectures/3/lecture3-1080p.mp4\">1080p</a> </li>\r\n                            <li><a href=\"http://cdn.cs50.net/python/2022/x/lectures/3/lecture3-4k.mp4\">4K</a> </li>\r\n                          </ul>\r\n                        </li>\r\n                      </ul>\r\n                    </li>\r\n                    <li><a href=\"https://youtu.be/-7xg8pGcP6w\">YouTube</a> </li>\r\n                  </ul>\r\n                </li>\r\n            </ul>\r\n        </li>\r\n        <li><a href=\"../psets/3\">Набор проблем 3</a></li>\r\n      </ul>\r\n    </div>\r\n  </template>\r\n  <style>\r\n  \r\n  </style>","import { render } from \"./Week3Nav.vue?vue&type=template&id=38f604cd\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ммм\\\\Desktop\\\\cs50-python-ru\\\\cs50-python-ru\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n    <div class=\"about\">\r\n      <h1>Неделя 4 Библиотеки </h1>\r\n      <iframe width=\"1214\" height=\"683\" src=\"https://www.youtube.com/embed/MztLZWibctI\" title=\"CS50P - Lecture 4 - Libraries\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\r\n      <ul>\r\n        <li>\r\n            <span>Лекция</span>\r\n            <ul>\r\n                <li>\r\n                  <span>Аудио</span>\r\n                  <ul>\r\n                    <li><a href=\"http://cdn.cs50.net/python/2022/x/lectures/4/lecture4.mp3\">MP3</a></li>\r\n                  </ul>\r\n                </li>\r\n                <li><a href=\"../../notes/4\">Заметки</a></li>\r\n                <li><span>Слайды</span>\r\n                  <ul>\r\n                    <li><a href=\"https://docs.google.com/presentation/d/1Nt055NqlRCWofNMlPzqbUsHnUg1td8XIR0QwSJU22JU/edit?usp=sharing\">Google Слайды</a> </li>\r\n                    <li><a href=\"https://cdn.cs50.net/python/2022/x/lectures/4/lecture4.pdf\">PDF</a></li>\r\n                  </ul>\r\n                </li>\r\n                <li>\r\n                  <span>Исходный код</span>\r\n                  <ul>\r\n                    <li><a href=\"https://cdn.cs50.net/python/2022/x/lectures/4/src4/\">Index</a> </li>\r\n                    <li><a href=\"https://cdn.cs50.net/python/2022/x/lectures/4/src4.pdf\">PDF</a> </li>\r\n                    <li><a href=\"https://cdn.cs50.net/python/2022/x/lectures/4/src4.zip\">Zip</a> </li>\r\n                  </ul>\r\n                </li>\r\n                <li><a href=\"http://cdn.cs50.net/python/2022/x/lectures/4/lang/en/lecture4.srt\">Субтитры</a> </li>\r\n                <li><a href=\"http://cdn.cs50.net/python/2022/x/lectures/4/lang/en/lecture4.txt\">Стенограмма видео</a> </li>\r\n                <li>\r\n                  <span>Видео</span>\r\n                  <ul>\r\n                    <li><a href=\"https://video.cs50.io/MztLZWibctI\">CS50 Видео плейер</a> </li>\r\n                    <li>\r\n                      <span>MP4</span>\r\n                      <ul>\r\n                        <li>\r\n                          <span>HDR</span>\r\n                          <ul><li><a href=\"http://cdn.cs50.net/python/2022/x/lectures/4/lecture4-4k-hdr.mp4\">4K</a> </li></ul>\r\n                        </li>\r\n                        <li>\r\n                          <span>SDR</span>\r\n                          <ul>\r\n                            <li><a href=\"http://cdn.cs50.net/python/2022/x/lectures/4/lecture4-360p.mp4\">360p</a> </li>\r\n                            <li><a href=\"http://cdn.cs50.net/python/2022/x/lectures/4/lecture4-720p.mp4\">720p</a> </li>\r\n                            <li><a href=\"http://cdn.cs50.net/python/2022/x/lectures/4/lecture4-1080p.mp4\">1080p</a> </li>\r\n                            <li><a href=\"http://cdn.cs50.net/python/2022/x/lectures/4/lecture4-4k.mp4\">4K</a> </li>\r\n                          </ul> \r\n                        </li>\r\n                      </ul>\r\n                    </li>\r\n                    <li><a href=\"https://youtu.be/MztLZWibctI\">YouTube</a> </li>\r\n                  </ul>\r\n                </li>\r\n            </ul>\r\n        </li>\r\n        <li><a href=\"../psets/4\">Набор проблем 4</a></li>\r\n      </ul>\r\n    </div>\r\n  </template>\r\n  <style>\r\n  \r\n  </style>","import { render } from \"./Week4Nav.vue?vue&type=template&id=ff913c14\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ммм\\\\Desktop\\\\cs50-python-ru\\\\cs50-python-ru\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n    <main></main>\r\n</template>","import { render } from \"./Week5Nav.vue?vue&type=template&id=2a0d7126\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ммм\\\\Desktop\\\\cs50-python-ru\\\\cs50-python-ru\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n    <main></main>\r\n</template>","import { render } from \"./Week6Nav.vue?vue&type=template&id=29970b27\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ммм\\\\Desktop\\\\cs50-python-ru\\\\cs50-python-ru\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n    <main></main>\r\n</template>","import { render } from \"./Week7Nav.vue?vue&type=template&id=2920a528\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ммм\\\\Desktop\\\\cs50-python-ru\\\\cs50-python-ru\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n    <main></main>\r\n</template>","import { render } from \"./Week8Nav.vue?vue&type=template&id=28aa3f29\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ммм\\\\Desktop\\\\cs50-python-ru\\\\cs50-python-ru\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n    <main></main>\r\n</template>","import { render } from \"./Week9Nav.vue?vue&type=template&id=2833d92a\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ммм\\\\Desktop\\\\cs50-python-ru\\\\cs50-python-ru\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n    <main>\r\n        <h1>Лекция 0</h1>\r\n        <ul>\r\n            <li><a href=\"#creating-code-with-python\">Написание кода на Python</a></li>\r\n            <li><a href=\"#functions\">Функции</a></li>\r\n            <li><a href=\"#bugs\">Баги</a></li>\r\n            <li><a href=\"#improving-your-first-python-program\">Улучшение вашей первой программы на Python</a></li>\r\n            <ul>\r\n                <li><a href=\"#variables\">Переменные</a></li>\r\n                <li><a href=\"#comments\">Комментарии</a></li>\r\n                <li><a href=\"#pseudocode\">Псевдокод</a></li>\r\n            </ul>\r\n            <li><a href=\"№further-improving-your-first-python-program\">Дальнейшее улучшение вашей первой программы на Python</a></li>\r\n            <li><a href=\"#strings-and-paremeters\">Строки и параметры</a></li>\r\n            <ul><li><a href=\"#a-small-problem-with-quotation-marks\">Небольшая проблема с кавычками</a></li></ul>\r\n            <li><a href=\"#formatting-strings\">Форматирование строк</a></li>\r\n            <li><a href=\"#more-on-strings\">Подробнее о строках</a></li>\r\n            <li><a href=\"#integers-or-int\">Целые числа или int</a></li>\r\n            <li><a href=\"#readability-wins\">Удобочитаемость выигрывает</a></li>\r\n            <li><a href=\"#float-basics\">Основы float</a></li>\r\n            <li><a href=\"#more-on-floats\">Подробнее о float</a></li>\r\n            <li><a href=\"#def\">Def</a></li>\r\n            <li><a href=\"#returning-values\">Возвращаемые значения</a></li>\r\n            <li><a href=\"#summing-up\">Подводя итог</a></li>\r\n        </ul>\r\n        <h2 id=\"creating-code-with-python\">Написание кода на Python</h2>\r\n        <ul>\r\n            <li>VS Code — это особый тип текстового редактора, который называется компилятором. Вверху вы увидите текстовый редактор, а внизу терминал, где вы можете выполнять команды.</li>\r\n            <li>В терминале вы можете выполнить команду <code class=\"code\">code hello.py</code> чтобы создать файл и начать писать код</li>\r\n            <li>В текстовом редакторе выше вы можете ввести <code class=\"code\">print(\"hello, world\")</code>. Это известная каноническая программа, которую почти все программисты пишут в процессе обучения.</li>\r\n            <li>В окне терминала вы можете выполнять команды. Чтобы запустить программу, вам нужно переместить курсор в нижнюю часть экрана, щелкнуть в окне терминала. Теперь вы можете ввести вторую команду в окне терминала. Рядом со знаком доллара введите <code class=\"code\">python hello.py</code>  и нажмите клавишу Enter на клавиатуре.</li>\r\n            <li>Напомним, что компьютеры понимают только нули и единицы. Поэтому когда вы выполняете команду <code class=\"code\">python hello.py </code> интерпретатор python будет  созданный вами файл <code class=\"code\">hello.py</code> переводить в нули и единицы, понятные компьютеру.</li>\r\n            <li>Результатом работы программы <code class=\"code\">python hello.py</code>, является вывод в терминал строки - <code class=\"code\">hello, world</code>.</li>\r\n            <li>Поздравляю! Вы только что создали свою первую программу.</li>\r\n        </ul>\r\n        <h2 id=\"functions\">Функции</h2>\r\n        <ul>\r\n            <li>Функции — это глаголы или действия, которые компьютер или компьютерный язык уже знают, как выполнять.</li>\r\n            <li>В вашей программе <code class=\"code\">hello.py</code> функция <code class=\"code\">print</code> умеет делать вывод каких либо данных в окно терминала.</li>\r\n            <li>Функция <code class=\"code\">print</code> принимает аргументы. В данном случае <code class=\"code\">\"hello, world\"</code>  это аргументы, которые принимает функция <code class=\"code\">print</code>.</li>\r\n        </ul>\r\n        <h2 id=\"bugs\">Баги</h2> \r\n        <ul>\r\n            <li>Ошибки являются естественной частью программирования. Ошибки - это проблемы, которые вы можете решать! Не расстраивайтесь! Это часть процесса становления великим программистом.</li>\r\n            <li>Представим в нашей программе <code class=\"code\">hello.py</code> случайно набранное <code class=\"code\">print(\"hello, world\"</code>  - заметьте, что мы пропустили <code class=\"code\">)</code> требуемый компилятором финал. Если я намеренно допущу эту ошибку, то компилятор выведет ошибку в окно терминала!</li>\r\n            <li>Часто сообщения об ошибках информируют вас о вашей ошибке и дают подсказки о том, как ее исправить. Однако в некоторых случаях компилятор не даст вам ответ в чем ваша ошибка.</li>\r\n        </ul>\r\n        <h2 id=\"improving-your-first-python-program\">Улучшение вашей первой программы на Python</h2>\r\n        <ul>\r\n            <li>Мы можем персонализировать вашу первую программу на Python.</li>\r\n            <li>В нашем текстовом редакторе в <code class=\"code\">hello.py</code> мы можем добавить еще одну функцию. input - это функция, которая принимает подсказку в качестве аргумента. Мы можем отредактировать наш код, как показано ниже: </li>\r\n            <pre class=\"highlight\"><code>input(\"What's your name? \")\r\nprint(\"hello, world\")</code></pre>\r\n            <li>Однако само по себе это редактирование не позволит вашей программе выводить то, что вводит ваш пользователь. Для этого нам нужно будет познакомить вас с переменными</li>\r\n        </ul>\r\n        <h3 id=\"variables\">Переменные</h3>\r\n        <ul>\r\n            <li>Переменная — это просто контейнер для значений в вашей программе.</li>\r\n            <li>В вашей программе вы можете ввести свою собственную переменную, отредактировав ее так:</li>\r\n            <pre class=\"highlight\"><code>name = input(\"What's your name? \")\r\nprint(\"hello, world\")</code></pre>\r\n            <p>Обратите внимание, что этот <code class=\"code\">= </code>знак равенства в середине <code class=\"code\">name = input(\"What's your name? \")</code> играет особую роль в программировании. Этот знак равенства буквально присваивает то, что справа, тому, что слева. Поэтому возвращаемое значение <code class=\"code\">input(\"What's your name? \")</code> присваивается <code class=\"code\">name</code>.</p>\r\n            <li>Если вы отредактируете свой код следующим образом, вы заметите ошибку</li>\r\n            <pre class=\"highlight\"><code>name = input(\"What's your name? \")\r\nprint(\"hello, name\")</code></pre>\r\n            <li>Программа вернется <code class=\"code\">hello, name</code> в окно терминала независимо от того, что вводит пользователь.</li>\r\n            <li>Дальнейшее редактирование нашего кода, может выглядить так:</li>\r\n            <pre class=\"highlight\"><code>name = input(\"What's your name? \")\r\nprint(\"hello,\")\r\nprint(name)</code></pre>\r\n            <li>Результат в окне терминала будет</li>\r\n            <pre class=\"highlight\"><code>What's your name? David\r\nhello\r\nDavid</code></pre>\r\n            <li>Мы стали ближе к желаемому результату!</li>\r\n            <li>Вы можете подробнее узнать о <a href=\"https://docs.python.org/3/library/datatypes.html\">типах данных</a> в документации Python</li>\r\n        </ul>\r\n        <h3 id=\"comments\">Комментарии</h3>\r\n        <ul>\r\n            <li>Комментарии — это способ для программистов отслеживать, что они делают в своих программах, и даже информировать других о своих намерениях относительно блока кода. Короче говоря, это заметки для вас и других, которые увидят ваш код!</li>\r\n            <li>Вы можете добавлять комментарии к своей программе, чтобы видеть, что она делает. Вы можете отредактировать свой код следующим образом:</li>\r\n            <pre class=\"highlight\"><code># Ask the user for their name(Спросить у пользователя его имя)\r\nname = input(\"What's your name? \")\r\nprint(\"hello,\")\r\nprint(name)</code></pre>\r\n            <li>Комментарии также могут служить для вас списком то что еще надо сделать в программе.</li>\r\n        </ul>\r\n        <h3 id=\"pseudocode\">Псевдокод</h3>\r\n        <ul>\r\n            <li>Псевдокод — это важный тип комментариев, который становится особым типом списка то что еще надо сделать, особенно когда вы не понимаете, как выполнить задачу. Например, вы можете отредактировать свой код, подобным образом:</li>\r\n            <pre class=\"highlight\"><code># Ask the user for their name(Спросить у пользователя его имя)\r\nname = input(\"What's your name? \")\r\n\r\n# Print hello(Вывести hello)\r\nprint(\"hello,\")\r\n\r\n# Print the name inputted(Вывести введенное имя)\r\nprint(name)</code></pre>\r\n        </ul>\r\n        <h2 id=\"further-improving-your-first-python-program\">Дальнейшее улучшение вашей первой программы на Python</h2>\r\n        <ul>\r\n            <li>Мы можем дополнительно отредактировать наш код следующим образом:</li>\r\n            <pre class=\"highlight\"><code># Ask the user for their name(Спросить у пользователя его имя)\r\nname = input(\"What's your name? \")\r\n\r\n# Print hello and the inputted name(Вывести hello и введенное имя)\r\nprint(\"hello, \" + name)</code></pre>\r\n            <li>Оказывается, некоторые функции принимают множество аргументов.</li>\r\n            <li>Мы можем использовать запятую <code class=\"code\">,</code> для передачи нескольких аргументов, отредактировав наш код следующим образом:</li>\r\n            <pre class=\"highlight\"><code># Ask the user for their name(Спросить у пользователя его имя)\r\nname = input(\"What's your name? \")\r\n\r\n# Print hello and the inputted name(Вывести hello и введенное имя)\r\nprint(\"hello,\", name)</code></pre>\r\n        <p>Если бы мы набрали «Дэвид», мы бы получили вывод в терминале <code class=\"code\">hello, David</code>. Ура.</p>\r\n        </ul>\r\n        <h2 id=\"strings-and-paremeters\">Строки и параметры</h2>\r\n        <ul>\r\n            <li>Строка, известная как str в Python, представляет собой последовательность текста.</li>\r\n            <li>Немного вернув наш код обратно к следующему, мы обнаружили визуальный побочный эффект, заключающийся в отображении результата на нескольких строках:</li>\r\n            <pre class=\"highlight\"><code># Ask the user for their name(Спросить у пользователя его имя)\r\nname = input(\"What's your name? \")\r\nprint(\"hello,\")\r\nprint(name)</code></pre>\r\n            <li>Функции принимают аргументы, влияющие на их поведение. Если мы посмотрим на документацию <a href=\"https://docs.python.org/3/library/functions.html#print\">print</a>, вы заметите, что мы можем многое узнать об аргументах, которые принимает функция печати.</li>\r\n            <li>Глядя на эту документацию, вы узнаете, что функция печати автоматически включает фрагмент кода <code class=\"code\">end='\\n'</code>. Этот индекатор <code class=\"code\">\\n </code>указывает, что функция печати автоматически создаст разрыв строки при запуске. Функция печати принимает аргумент с именем и по умолчанию создается новая строка.</li>\r\n            <li>Однако технически мы можем предоставить аргумент для end, чтобы новая строка не создавалась!</li>\r\n            <li>Мы можем изменить наш код следующим образом:</li>\r\n            <pre class=\"highlight\"><code># Ask the user for their name(Спросить у пользователя его имя)\r\nname = input(\"What's your name? \")\r\nprint(\"hello,\", end=\"\")\r\nprint(name)</code></pre>\r\n            <span>Предоставляя <code class=\"code\">end=\"\"</code>, мы перезаписываем значение по умолчанию <code class=\"code\">end</code>, так что оно не создает новую строку после первого оператора печати. Указав имя David, вывод в окне терминала будет <code class=\"code\">hello, David</code>.</span>\r\n            <li>Таким образом, параметры — это аргументы, которые может принимать функция.</li>\r\n            <li>Вы можете узнать больше в документации Python по <code class=\"code\"><a href=\"https://docs.python.org/3/library/functions.html#print\">print</a></code>.</li>\r\n        </ul>\r\n        <h3 id=\"a-small-problem-with-quotation-marks\">Небольшая проблема с кавычками</h3>\r\n        <ul>\r\n            <li>Обратите внимание, как сложно добавить кавычки в строку.</li>\r\n            <li><code class=\"code\">print(\"hello,\"friend\"\")</code>работать не будет и компилятор выдаст ошибку.</li>\r\n            <li>Как правило, есть два подхода к исправлению этого. Во-первых, вы можете просто изменить кавычки на одинарные кавычки.</li>\r\n            <li>Другим, более часто используемым подходом будет использование кода <code class=\"code\">print(\"hello, \\\"friend\\\"\")</code>. Обратная косая черта сообщает компилятору, что следующий символ следует рассматривать как кавычку в строке, чтобы избежать ошибки компилятора.</li>\r\n        </ul>\r\n        <h2 id=\"formatting-strings\">Форматирование строк</h2>\r\n        <ul>\r\n            <li>Вероятно, наиболее элегантным способом использования строк будет следующий:</li>\r\n            <pre class=\"highlight\"><code># Ask the user for their name(Спросить у пользователя его имя)\r\nname = input(\"What's your name? \")\r\nprint(f\"hello, {name}\")</code></pre>\r\n            <span>Обратите внимание на <code class=\"code\">f</code> в <code class=\"code\">print(f\"hello, {name}\")</code>. <code class=\"code\">f</code>-это специальный индикатор Python для обработки этой строки особым образом, отличным от предыдущих подходов, которые мы проиллюстрировали в этой лекции. Ожидайте, что вы будете использовать этот стиль строк довольно часто в этом курсе.</span>\r\n        </ul>\r\n        <h2 id=\"more-on-strings\">Подробнее о строках</h2>\r\n        <ul>\r\n            <li>Вы не должны ждать, что пользователь будет вести себя, как ожидалось. Следовательно, вам нужно будет убедиться, что ввод вашего пользователя исправлен или проверен.</li>\r\n            <li>Оказывается, в строки встроена возможность удалять пробелы из строки.</li>\r\n            <li>Применяя метод <code class=\"code\">strip</code> к переменной <code class=\"code\">name</code>,как это сделать: <code class=\"cide\">name = name.strip()</code>это удалит все пробелы слева и справа от пользовательского ввода. Вы можете изменить свой код, вот так:</li>\r\n            <pre class=\"highlight\"><code># Ask the user for their name(Спросить у пользователя его имя)\r\nname = input(\"What's your name? \")\r\n\r\n# Remove whitespace from the str(Удалить пробелы из строки(str))\r\nname = name.strip()\r\n\r\n# Print the output(Распечатать вывод)\r\nprint(f\"hello, {name}\")</code></pre>\r\n            <span>При повторном запуске этой программы, независимо от того, сколько пробелов вы наберете до или после name, она удалит все пробелы.</span>\r\n            <li>Используйте метод <code class=\"code\">title</code>, чтобы перевести в верхний регистр первую букву в имени:</li>\r\n            <pre class=\"highlight\"><code># Ask the user for their name(Спросить у пользователя его имя)\r\nname = input(\"What's your name? \")\r\n# Remove whitespace from the str(Удалить пробелы из строки(str))\r\nname = name.strip()\r\n# Capitalize the first letter of each word(Перевести в верхний регистр первую букву в слове)\r\nname = name.title()\r\n# Print the output(Распечатать вывод)\r\nprint(f\"hello, {name}\")\r\n</code></pre>\r\n            <li>К этому моменту вы, возможно, очень устали от многократного ввода <code class=\"code\">python</code> в окне терминала. Вы можете использовтаь стрелки вверх и вниз на вашей клавиатуре, чтобы увидеть самые последние команды терминала, которые вы вводили.</li>\r\n            <li>Обратите внимание, что вы можете изменить свой код, чтобы сделать его более эффективным:</li>\r\n            <pre class=\"highlight\"><code># Ask the user for their name(Спросить у пользователя его имя)\r\nname = input(\"What's your name? \")\r\n# Remove whitespace from the str and capitalize the first letter of each word(Удалить пробелы из строки(str) и перевести в верхний регистр первую букву в слове)\r\nname = name.strip().title()\r\n# Print the output(Распечатать вывод)\r\nprint(f\"hello, {name}\")</code></pre>\r\n            <span>Вывод будет тот же, что и в предыдущем коде.</span>\r\n            <li>Мы могли бы пойти еще дальше!</li>\r\n            <pre class=\"highlight\"><code># Ask the user for their name, remove whitespace from the str and capitalize the first letter of each word\r\nname = input(\"What's your name? \").strip().title()\r\n# Print the output\r\nprint(f\"hello, {name}\")</code></pre>\r\n        <li>Вы можете узнать больше о строках в документации Python <code class=\"code\"><a href=\"https://docs.python.org/3/library/stdtypes.html#str\">str</a></code></li>\r\n        </ul>\r\n        <h2 id=\"integers-or-int\">Целые числа или int</h2>\r\n        <ul>\r\n            <li>В Python целое число называется int.</li>\r\n            <li>В мире математики мы знакомы с операторами +, -, *, / и %. Этот последний оператор % или оператор по модулю может быть вам не очень знаком.</li>\r\n            <li>Вам не нужно использовать окно текстового редактора в компиляторе для запуска кода Python. В своем терминале вы можете написать <code class=\"code\">python</code>.И в окне терминала вы увидите >>>. Затем вы можете запустить живой интерактивный код. Вы можете ввести 1+1, и он запустит этот расчет. Этот режим будет использоваться во время этого курса.</li>\r\n            <li>Снова открыв VS Code, мы можем ввести <code class=\"code\">code calculator.py</code> в терминал. Это создаст новый файл, в котором мы создадим наш собственный калькулятор.</li>\r\n            <li>Во-первых, мы можем объявить несколько переменных.</li>\r\n            <pre class=\"highlight\"><code>x = 1\r\ny = 2\r\nz = x + y\r\nprint(z)</code></pre>\r\n            <span>Естественно при запуске <code class=\"code\">python calculator.py</code> мы получаем результат в окне терминала <code class=\"code\">3</code>. Мы можем сделать это более интерактивным, используя функцию <code class=\"code\">input</code>.</span>\r\n            <pre class=\"highlight\"><code>x = input(\"What's x? \")\r\ny = input(\"What's y? \")\r\nz = x + y\r\nprint(z)</code></pre>\r\n            <li>Запустив эту программу, мы обнаруживаем, что вывод неверен, так как вывод <code class=\"code\">12</code>. В чем может быть причина?</li>\r\n            <li>Ранее мы видели, как знак <code class=\"code\">+</code> объединяет две строки. Поскольку ваш ввод с клавиатуры на вашем компьютере поступает в компилятор в виде текста, он обрабатывается как строка. Поэтому нам нужно преобразовать этот ввод из строки в целое число. Мы можем сделать это следующим образом:</li>\r\n            <pre class=\"highlight\"><code>x = input(\"What's x? \")\r\ny = input(\"What's y? \")\r\nz = int(x) + int(y)\r\nprint(z)</code></pre>\r\n            <span>Теперь результат правильный. Использование int(x), называется «приведением», когда значение временно изменяется с одного типа переменной (в данном случае строки) на другой (здесь — целое число).</span>\r\n            <li>Мы можем улучшить нашу программу следующим образом:</li>\r\n            <pre class=\"highlight\"><code>x = int(input(\"What's x? \"))\r\ny = int(input(\"What's y? \"))\r\nprint(x + y)</code></pre>\r\n            <span>Это показывает, что вы можете запускать функции в функциях. Сначала запускается самая внутренняя функция, а затем запускается внешняя. Сначала функция <code class=\"code\">input</code> запускается. Затем функция <code class=\"code\">int</code>.</span>\r\n            <li>Вы можете узнать больше об <code class=\"code\"><a href=\"https://docs.python.org/3/library/functions.html?highlight=float#int\">int</a></code> из документации Python</li>\r\n        </ul>\r\n        <h2 id=\"readability-wins\">Удобочитаемость выигрывает</h2>\r\n        <li>Принимая решение о своем подходе к задачам программирования, помните, что можно привести разумные аргументы в пользу многих подходов к одной и той же проблеме.</li>\r\n        <li>Независимо от того, какой подход вы примете к задаче программирования, помните, что ваш код должен быть читабельным. Вы должны использовать комментарии, чтобы дать себе и другим подсказки о том, что делает ваш код. Кроме того, вы должны создавать код таким образом, чтобы он был удобочитаемым.</li>\r\n        <h2 id=\"float-basics\">Основы float</h2>\r\n        <li>Значение с плавающей запятой — это действительное число, содержащее десятичную точку, например <code class=\"code\">0.52</code>.</li>\r\n        <li>Вы можете изменить свой код чтобы он поддерживал float следующим образом:</li>\r\n        <pre class=\"highlight\"><code>x = float(input(\"What's x? \"))\r\ny = float(input(\"What's y? \"))\r\nprint(x + y)</code></pre>\r\n        <li>Это изменение позволяет вашему пользователю вводить <code class=\"code\">1.2</code> и <code class=\"code\">3.4</code> отображать их сумму <code class=\"code\">4.6</code>.</li>\r\n        <li>Однако давайте представим, что вы хотите округлить сумму до ближайшего целого числа. Посмотрев в документации Python на <code class=\"code\">round</code>, вы увидите, что доступны аргументы <code class=\"code\">round(number[n, ndigits])</code>. Эти квадратные скобки указывают на то, что программист может указать что-то необязательное. Следовательно, вы можете округлить цифру до ближайшего целого числа  <code class=\"code\">round(n)</code>. В качестве альтернативы ваш код может выглядить следующим образом:</li>\r\n        <pre class=\"highlight\"><code># Get the user's input\r\nx = float(input(\"What's x? \"))\r\ny = float(input(\"What's y? \"))\r\n# Create a rounded result\r\nz = round(x + y)\r\n# Print the result\r\nprint(z)</code></pre>\r\n        <span>Вывод будет округлен до ближайшего целого числа.</span>\r\n        <li>Что, если бы мы захотели отформатировать вывод длинных чисел? Например, вместо того, чтобы видеть <code class=\"code\">1000</code>, вы можете захотеть увидеть <code class=\"code\">1,000</code>. Вы можете изменить свой код следующим образом:</li>\r\n        <pre class=\"highlight\"><code># Get the user's input\r\nx = float(input(\"What's x? \"))\r\ny = float(input(\"What's y? \"))\r\n# Create a rounded result\r\nz = round(x + y)\r\n# Print the formatted result\r\nprint(f\"{z:,}\")</code></pre>\r\n        <span>Хотя это довольно загадочно, <code class=\"code\">print(f\"{z:,}\")</code> создает сценарий, в котором вывод <code class=\"code\">z</code> будет включать запятые, где результат может выглядеть как <code class=\"code\">1,000</code> или <code class=\"code\">2,500</code>.</span>\r\n        <h2 id=\"more-on-floats\">Подробнее о float</h2>\r\n        <li>Как мы можем округлить значения с плавающей запятой? Сначала измените код следующим образом:</li>\r\n        <pre class=\"highlight\"><code># Get the user's input\r\nx = float(input(\"What's x? \"))\r\ny = float(input(\"What's y? \"))\r\n\r\n# Calculate the result\r\nz = x / y\r\n\r\n# Print the result\r\nprint(z)\r\n</code></pre>\r\n        <li>При вводе x, как <code class=\"code\">2</code> и y, как <code class=\"code\">3</code>, результат z будет <code class=\"code\">0.6666666666</code> по-видимому, продолжается до бесконечности, как мы могли бы ожидать.</li>\r\n        <li>Давайте представим, что мы хотим округлить это значение в меньшую сторону, мы могли бы изменить наш код следующим образом:</li>\r\n        <pre class=\"highlight\"><code># Get the user's input\r\nx = float(input(\"What's x? \"))\r\ny = float(input(\"What's y? \"))\r\n\r\n# Calculate the result and round\r\nz = round(x / y, 2)\r\n\r\n# Print the result\r\nprint(z)</code></pre>\r\n        <span>Как и следовало ожидать, это округлит результат до ближайших двух знаков после запятой.</span>\r\n        <li>Мы также можем использовать <code class=\"code\">fstring</code> для форматирования вывода следующим образом:</li>\r\n        <pre class=\"highlight\"><code># Get the user's input\r\nx = float(input(\"What's x? \"))\r\ny = float(input(\"What's y? \"))\r\n\r\n# Calculate the result\r\nz = x / y\r\n\r\n# Print the result\r\nprint(f\"{z:.2f}\")</code></pre>\r\n        <span>Этот загадочный код <code class=\"code\">fstring</code> отображает то же самое, что и наша предыдущая стратегия округления.</span>\r\n        <li>Вы можете узнать больше о <a href=\"https://docs.python.org/3/library/functions.html?highlight=float#float\"><code class=\"code\">float</code></a> в документации Python</li>\r\n        <h2 id=\"def\">Def</h2>\r\n        <li>Было бы неплохо создать свои собственные функции?</li>\r\n        <li>Давайте вернем наш посдедний код <code class=\"code\">hello.py</code>, введя <code class=\"code\">code hello.py</code> в окно терминала. Ваш начальный код должен выглядеть следующим образом:</li>\r\n        <pre class=\"highlight\"><code># Ask the user for their name, remove whitespace from the str and capitalize the first letter of each word\r\nname = input(\"What's your name? \").strip().title()\r\n\r\n# Print the output\r\nprint(f\"hello, {name}\")</code></pre>\r\n        <span>Мы можем улучшить наш код, чтобы создать собственную специальную функцию, которая говорит нам \"hello!\"</span>\r\n        <li>Сотрите весь код в текстовом редакторе, и давайте начнем с нуля:</li>\r\n        <pre class=\"highlight\"><code>name = input(\"What's your name? \")\r\nhello()\r\nprint(name)</code></pre>\r\n        <span>При попытке запустить этот код ваш компилятор выдаст ошибку. В конце концов, не была создана функция <code class=\"code\">hello</code>.</span>\r\n        <li>Мы можем создать нашу собственную функцию с именем <code class=\"cd\">hello</code> следующим образом:</li>\r\n        <pre class=\"highlight\"><code>def hello():\r\n    print(\"hello\")\r\n\r\n\r\nname = input(\"What's your name? \")\r\nhello()\r\nprint(name)</code></pre>\r\n        <span>Обратите внимание, что все, что ниже <code class=\"code\">def hello()</code>, имеет отступ. Python — это язык с отступами. Он использует отступ, чтобы понять, что является частью вышеуказанной функции. Поэтому все в функции <code class=\"code\">hello</code> должно быть с отступом. Когда что-то не имеет отступа, оно обрабатывается так, как будто оно не находится внутри функции <code class=\"code\">hello</code>. Запустив <code class=\"code\">python hello.py</code> в окне терминала, вы увидите, что ваш вывод не совсем такой, как вам хотелось бы.</span>\r\n        <li>Мы можем еще улучшить наш код:</li>\r\n        <pre class=\"highlight\"><code># Create our own function\r\ndef hello(to):\r\n    print(\"hello,\", to)\r\n\r\n\r\n# Output using our own function\r\nname = input(\"What's your name? \")\r\nhello(name)</code></pre>\r\n        <span>Здесь, в первых строках, вы создаете свою функцию <code class=\"code\">hello</code>. Однако на этот раз вы сообщаете компилятору, что эта функция принимает единственный параметр: переменную с именем <code class=\"code\">to</code>. Поэтому при вызове <code class=\"code\">hello(name)</code> компьютер передает name в  функцию <code class=\"code\">hello</code> как <code class=\"code\">to</code>. Вот как мы передаем значения в функции. Очень полезно! Запустив <code class=\"code\">python hello.py</code> в окне терминала, вы увидите, что результат намного ближе к нашему идеалу, представленному ранее в этой лекции.</span>\r\n        <li>Мы можем изменить наш код, чтобы добавить значение по умолчанию для <code class=\"code\">hello</code>:</li>\r\n        <pre class=\"highlight\"><code># Create our own function\r\ndef hello(to=\"world\"):\r\n    print(\"hello,\", to)\r\n\r\n\r\n# Output using our own function\r\nname = input(\"What's your name? \")\r\nhello(name)\r\n\r\n# Output without passing the expected arguments\r\nhello()</code></pre>\r\n        <span>Проверьте свой код самостоятельно. Обратите внимание, как первое <code class=\"code\">hello</code> будет вести себя так, как вы ожидаете, а второе hello, которому не передано значение, по умолчанию будет выводить hello, world.</span>\r\n        <li>Нам не обязательно писать нашу функцию в начале нашей программы. Мы можем сдвинуть ее вниз, но нам нужно сообщить компилятору, что у нас есть функция <code class=\"code\">main</code> и отдельная функция <code class=\"code\">hello</code>.</li>\r\n        <pre class=\"highlight\"><code>def main():\r\n\r\n# Output using our own function\r\nname = input(\"What's your name? \")\r\nhello(name)\r\n\r\n# Output without passing the expected arguments\r\nhello()\r\n\r\n\r\n# Create our own function\r\ndef hello(to=\"world\"):\r\nprint(\"hello,\", to)</code></pre>\r\n        <span>Однако одно это создаст своего рода ошибку. Если мы запустим <code class=\"code\">python hello.py</code>, ничего не произойдет! Причина этого в том, что ничто в этом коде на самом деле не вызывает основную функцию и не оживляет нашу программу.</span>\r\n        <li>Следующая очень маленькая модификация вызовет функцию <code class=\"cide\">main</code> и наша программа начнет работать:</li>\r\n        <pre class=\"highlight\"><code>def main():\r\n\r\n# Output using our own function\r\nname = input(\"What's your name? \")\r\nhello(name)\r\n\r\n# Output without passing the expected arguments\r\nhello()\r\n\r\n\r\n# Create our own function\r\ndef hello(to=\"world\"):\r\nprint(\"hello,\", to)\r\n\r\n\r\nmain()</code></pre>\r\n        <h2 id=\"returning-values\">Возвращаемые значения</h2>\r\n        <li>Вы можете представить множество сценариев, в которых вы хотите, чтобы функция не только выполняла действие, но и возвращала значение обратно в основную функцию. Например, вместо того, чтобы просто печатать вычисление x + y, вы можете захотеть, чтобы функция возвращала значение этого вычисления обратно в другую часть вашей программы. Эту «возвращаемое значение» значения мы называем return.</li>\r\n        <li>Вернемся к нашему коду в <code class=\"code\">calculator.py</code>, набрав <code class=\"code\">code calculator.py</code>. Сотрите там весь код. Переработайте код следующим образом:</li>\r\n        <pre class=\"highlight\"><code>def main():\r\n    x = int(input(\"What's x? \"))\r\n    print(\"x squared is\", square(x))\r\n\r\n\r\ndef square(n):\r\n    return n * n\r\n\r\n\r\nmain()</code></pre>\r\n        <span><code class=\"code\">x</code> передается в <code class=\"code\">square</code>. Затем вычисление <code class=\"code\">x * x</code> возвращается обратно в функцию main.</span>\r\n        <h2 id=\"summing-up\">Подводя итог</h2>\r\n        <p>Благодаря работе на этой единственной лекции вы узнали способности, которые будете использовать бесчисленное количество раз в своих собственных программах. Вы узнали о…</p>\r\n        <ul>\r\n            <li>Написание кода на Python;</li>\r\n            <li>Функции;</li>\r\n            <li>Баги;</li>\r\n            <li>Переменные;</li>\r\n            <li>Комментарии;</li>\r\n            <li>Псевдокод;</li>\r\n            <li>Строки;</li>\r\n            <li>Параметры;</li>\r\n            <li>Форматирование строк;</li>\r\n            <li>Целые числа;</li>\r\n            <li>Принципы удобочитаемости;</li>\r\n            <li>float;</li>\r\n            <li>Создание собственных функций;</li>\r\n            <li>Возвращаемые значения.</li>\r\n        </ul>\r\n    </main>\r\n</template>\r\n\r\n\r\n","import { render } from \"./Notes0View.vue?vue&type=template&id=3349f213\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ммм\\\\Desktop\\\\cs50-python-ru\\\\cs50-python-ru\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n    <main>\r\n        <h1>Набор проблем 0</h1>\r\n        <h2>Что нужно делать</h2>\r\n        <ol>\r\n            <li>Отправьте <a href=\"https://forms.cs50.io/27a35e60-490a-4e42-8574-6b55154ae760\"> эту форму</a>.</li>\r\n            <li>Перейдите по <a href=\"https://submit.cs50.io/invites/579861a2825849178cd11315c055bc49\">этой ссылке</a>, войдите в свой GitHub аккаунт, и нажмите Authorize CS50.</li>\r\n            <li>Установите флажок, указывающий, что вы хотите предоставить сотрудникам курса доступ к вашей работе, и нажмите 'Присоединиться к курсу'(Join course).</li>\r\n            <li>Войдите в <a href=\"https://code.cs50.io/\"> code.cs50.io</a>, облачную версию Visual Studio Code (VS Code), которая предоставляет собственное  кодовое пространство(Codespace) со всем что нужно для прохождения курса . Не нужно скачивать и устанавливать VS Code или Python на свой Mac или ПК!</li>\r\n            <li>Как только кодовое пространство(Codespace) загрузится, закройте все вкладки приветствия, которые могли быть открыты по умолчанию.</li>\r\n            <li>В терминале Codespace выполните шаги в разделе SSH по адресу <a href=\"https://cs50.readthedocs.io/github/#ssh\"> cs50.readthedocs.io/github/#ssh</a>, чтобы настроить Codespace для некоторых инструментов командной строки CS50.</li>\r\n            <li>Выполните update50 в окне терминала вашего Codespace, чтобы убедиться, что ваше пространство кода обновлено, при появлении запроса нажмите <b>Rebuild now</b>.</li>\r\n            <li>\r\n                <span>Отправьте все проблемы приведенные ниже:</span>\r\n                <ul>\r\n                    <li><router-link to=\"/0/indoor/\">Indoor</router-link> </li>\r\n                    <li><router-link to=\"/0/playback/\">Playback Speed</router-link> </li>\r\n                    <li><router-link to=\"/0/making/\">Making face</router-link> </li>\r\n                    <li><router-link to=\"/0/einstein/\">Einstein</router-link> </li>\r\n                    <li><router-link to=\"/0/calculator/\">Tip Calculator</router-link> </li>\r\n                </ul>\r\n            </li>\r\n        </ol>\r\n    </main>\r\n</template>\r\n<style scoped>\r\nmain {\r\n    height: 100vh;\r\n}\r\n</style>","import { render } from \"./Psets0View.vue?vue&type=template&id=62ffa640&scoped=true\"\nconst script = {}\n\nimport \"./Psets0View.vue?vue&type=style&index=0&id=62ffa640&scoped=true&lang=css\"\n\nimport exportComponent from \"C:\\\\Users\\\\ммм\\\\Desktop\\\\cs50-python-ru\\\\cs50-python-ru\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-62ffa640\"]])\n\nexport default __exports__","<template>\r\n    <main>\r\n        <h1>Глубокий Разум (Deep Thought)</h1>\r\n        <blockquote>\r\n            <p>— Хорошо, — сказал компьютер и снова погрузился в тишину. Двое мужчин заерзали. Напряжение было невыносимым.<br>— Тебе это действительно не понравится, — заметил Глубокий Разум.\r\n                <br>\"Расскажи нам!\"<br>— Хорошо, — сказал Глубокий Разум. «Ответ на великий вопрос…»<br>«Да…!»<br>— О Жизни, Вселенной и обо всем… — сказал Глубокий Разум.<br>\"Да…!\"<br>— Это… — сказал Глубокий Разум <br> и сделал паузу.<br>\"Да…!\"<br>«Это…»<br>«Да…!!!…?»<br>— Сорок два, — сказал Глубокий Разум с бесконечным величием и спокойствием.</p>\r\n            <p>— Автостопом по Галактике , Дуглас Адамс</p>\r\n        </blockquote>\r\n        <p>В <code class=\"code\">deep.py</code>, реализуйте программу, которая запрашивает у пользователя ответ на Великий вопрос о жизни, Вселенной и всего остального, выводя, <code class=\"code\">Yes</code> если пользователь вводит <code class=\"code\">42</code> или <code class=\"code\">forty-two</code> или <code class=\"code\">forty two</code>(без учета регистра). В противном случае вывод <code class=\"code\">No</code>.</p>\r\n        <details>\r\n            <summary>Подсказки</summary>\r\n            <ul>\r\n                <li>Нет необходимости преобразовывать ввод пользователя в int, если вы проверяете равенство с помощью \"42\"(str), а не 42(int)!</li>\r\n                <li>Ничего страшного, если ваш вывод или вывод пользователя переносятся на несколько строк.</li>\r\n            </ul>\r\n        </details>\r\n        <h2>Демо</h2>\r\n        <img src=\"../../assets/week1/demo_deep.png\" alt=\"\">\r\n        <h2>Перед тем как приступить к заданию</h2>\r\n        <p>Перейдите по ссылке <a href=\"https://code.cs50.io/\">code.cs50.io</a> и зайдите в свой аккаунт. Выполните команду <code class=\"code\">cd</code> в вашем терминальном окне. Ваше терминальное окно должно выглядить как представлено ниже:</p>\r\n        <pre class=\"highlight\"><code>$</code></pre>\r\n        <p>Следующая команда</p>\r\n        <pre class=\"highlight\"><code>mkdir deep</code></pre>\r\n        <p>создаст папку <code class=\"code\">deep</code> в вашем рабочем пространстве.</p>\r\n        <p>Затем выполните</p>\r\n        <pre class=\"highlight\"><code>cd deep</code></pre>\r\n        <p>чтобы изменить директорию в папке. Вы должны увидеть в терминале <code class=\"code\">deep/ $</code>. Вы можете сейчас выполнить</p>\r\n        <pre class=\"highlight\"><code>code deep.py</code> </pre>\r\n        <p>чтобы создать файл с именем , <code class=\"code\"> deep.py</code>в котором вы будете писать свою программу.</p>\r\n        <h2>Как проверить</h2>\r\n        <p>Вот как протестировать код вручную:</p>\r\n        <ul>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python deep.py</code>. Введите  <code class=\"code\">42</code> и нажмите Enter. Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code> Yes</code></pre>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python deep.py</code>. Введите  <code class=\"code\">Forty Two</code> и нажмите Enter.Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>Yes</code></pre>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python deep.py</code>. Введите  <code class=\"code\">forty-two</code> и нажмите Enter. Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>Yes</code></pre>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python deep.py</code>. Введите  <code class=\"code\">50</code> и нажмите Enter. Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>No</code></pre>\r\n        </ul>\r\n        <p>Вы можете выполнить приведенную ниже команду, чтобы проверить свой код с помощью <code>check50</code>,являющейся программой которой CS50 будет проверять ваш код при отправке. Но перед отправкой обязательно протестируйте свой код сами!</p>\r\n        <pre  class=\"highlight\"><code>check50 cs50/problems/2022/python/deep</code></pre>\r\n        <p>Зеленые смайлики означают, что ваша программа прошла проверку! Красные означают, что ваша программа выводит что-то неожиданное. Посетите URL-адрес, который выводит <code class=\"code\">check50</code>, чтобы увидеть ответ <code class=\"code\">check50</code>, переданный вашей программе, какой вывод она ожидала и какой вывод фактически выдала ваша программа.</p>\r\n        <h2>Как отправить</h2>\r\n        <p> В своем терминале выполните следующее, чтобы отправить свою работу.</p>\r\n        <pre class=\"highlight\"><code>submit50 cs50/problems/2022/python/deep</code></pre>\r\n    </main>\r\n</template>","import { render } from \"./DeepThought.vue?vue&type=template&id=bc6b17b0\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ммм\\\\Desktop\\\\cs50-python-ru\\\\cs50-python-ru\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n    <main>\r\n        <h1>Расширения файлов (File Extensions)</h1>\r\n        <p>Несмотря на то, что Windows и macOS иногда их скрывают, большинство файлов имеют <a href=\"https://en.wikipedia.org/wiki/Filename_extension\">расширения</a>, суффикс, начинающийся с точки (<code class=\"code\">.</code>) в конце имени. Например, имена <a href=\"https://en.wikipedia.org/wiki/GIF\">файлов для GIF</a> заканчиваются на <code class=\"code\">.gif</code>, а имена <a href=\"https://en.wikipedia.org/wiki/JPEG\">файлов для JPEG</a> заканчиваются на <code class=\"code\">jpg</code> или <code class=\"code\">jpeg</code>. Когда вы дважды щелкаете файл, чтобы открыть его, ваш компьютер использует расширение файла, чтобы определить, какую программу запускать.</p>\r\n        <p>Веб-браузеры, напротив, полагаются на <a href=\"https://en.wikipedia.org/wiki/Media_type\">типы мультимедиа</a>, ранее известные как типы MIME, чтобы определить, как отображать файлы, находящиеся в Интернете. Когда вы загружаете файл с веб-сервера, этот сервер отправляет <a href=\"https://en.wikipedia.org/wiki/List_of_HTTP_header_fields\">HTTP-заголовок</a> вместе с самим файлом, указывающим тип носителя файла. Например, тип мультимедиа для GIF — <code class=\"code\">image/gif</code>, а тип мультимедиа для JPEG — <code class=\"code\">image/jpeg</code>. Чтобы определить тип мультимедиа для файла, веб-сервер обычно просматривает расширение файла, сопоставляя одно с другим.</p>\r\n        <p>Общие типы см . на странице <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types\">developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types</a>.</p>\r\n        <p>В файле с именем <code class=\"code\">extensions.py</code> реализуйте программу, которая запрашивает у пользователя имя файла, а затем выводит тип носителя этого файла, если имя файла заканчивается без учета регистра любым из этих суффиксов:</p>\r\n        <ul>\r\n            <li><code class=\"code\">.gif</code></li>\r\n            <li><code class=\"code\">.jpg</code></li>\r\n            <li><code class=\"code\">.jpeg</code></li>\r\n            <li><code class=\"code\">.png</code></li>\r\n            <li><code class=\"code\">.pdf</code></li>\r\n            <li><code class=\"code\">.txt</code></li>\r\n            <li><code class=\"code\">.zip</code></li>\r\n        </ul>\r\n        <p>Если имя файла заканчивается каким-либо другим суффиксом или вообще не имеет суффикса, вместо этого выводится <code class=\"code\">application/octet-stream</code>, что является обычным значением по умолчанию.</p>\r\n        <details>\r\n            <summary>Подсказки</summary>\r\n            <ul>\r\n                <li>Не забывайте, что <code class=\"code\">str</code> имеет несколько методов, согласно <a href=\"https://docs.python.org/3/library/stdtypes.html#string-methods\">docs.python.org/3/library/stdtypes.html#string-methods</a></li>        \r\n            </ul>\r\n        </details>\r\n        <h2>Демо</h2>\r\n        <div id=\"asciicast-container-qUGyqlHIt0Za5lBMc0GB4CuLV\" class=\"asciicast\" style=\"display: block; float: none; overflow: hidden; padding: 0px; margin: 20px 0px;\"><iframe src=\"https://asciinema.org/a/qUGyqlHIt0Za5lBMc0GB4CuLV/iframe?autoplay=1&amp;loop=1&amp;cols=80&amp;rows=12\" id=\"asciicast-iframe-qUGyqlHIt0Za5lBMc0GB4CuLV\" name=\"asciicast-iframe-qUGyqlHIt0Za5lBMc0GB4CuLV\" scrolling=\"no\" allowfullscreen=\"true\" style=\"overflow: hidden; margin: 0px; border: 0px; display: inline-block; width: 100%; float: none; visibility: visible; height: 491px;\"></iframe></div>\r\n        <h2>Перед тем как приступить к заданию</h2>\r\n        <p>Перейдите по ссылке <a href=\"https://code.cs50.io/\">code.cs50.io</a> и зайдите в свой аккаунт. Выполните команду <code class=\"code\">cd</code> в вашем терминальном окне. Ваше терминальное окно должно выглядить как представлено ниже:</p>\r\n        <pre class=\"highlight\"><code>$</code></pre>\r\n        <p>Следующая команда</p>\r\n        <pre class=\"highlight\"><code>mkdir extensions</code></pre>\r\n        <p>создаст папку <code class=\"code\">extensions</code> в вашем рабочем пространстве.</p>\r\n        <p>Затем выполните</p>\r\n        <pre class=\"highlight\"><code>cd extensions</code></pre>\r\n        <p>чтобы изменить директорию в папке. Вы должны увидеть в терминале <code class=\"code\">extensions/ $</code>. Вы можете сейчас выполнить</p>\r\n        <pre class=\"highlight\"><code>code extensions.py</code> </pre>\r\n        <p>чтобы создать файл с именем , <code class=\"code\"> extensions.py</code>в котором вы будете писать свою программу.</p>\r\n        <h2>Как проверить</h2>\r\n        <p>Вот как протестировать код вручную:</p>\r\n        <ul>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python extensions.py</code>. Введите  <code class=\"code\">happy.jpg</code> и нажмите Enter. Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code> image/jpeg </code></pre>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python extensions.py</code>. Введите  <code class=\"code\">document.pdf</code> и нажмите Enter.Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>application/pdf </code></pre>\r\n        </ul>\r\n        <p>Обязательно протестируйте каждый из других форматов файлов, измените регистр ввода и «случайно» добавьте пробелы с обеих сторон ввода перед нажатием клавиши ввода. Ваша программа должна вести себя так, как ожидается, без учета регистра и пробелов.</p>\r\n        <p>Вы можете выполнить приведенную ниже команду, чтобы проверить свой код с помощью <code>check50</code>,являющейся программой которой CS50 будет проверять ваш код при отправке. Но перед отправкой обязательно протестируйте свой код сами!</p>\r\n        <pre  class=\"highlight\"><code>check50 cs50/problems/2022/python/extensions</code></pre>\r\n        <p>Зеленые смайлики означают, что ваша программа прошла проверку! Красные означают, что ваша программа выводит что-то неожиданное. Посетите URL-адрес, который выводит <code class=\"code\">check50</code>, чтобы увидеть ответ <code class=\"code\">check50</code>, переданный вашей программе, какой вывод она ожидала и какой вывод фактически выдала ваша программа.</p>\r\n        <h2>Как отправить</h2>\r\n        <p> В своем терминале выполните следующее, чтобы отправить свою работу.</p>\r\n        <pre class=\"highlight\"><code>submit50 cs50/problems/2022/python/extensions</code></pre>\r\n    </main>\r\n</template>","import { render } from \"./FileExtensions.vue?vue&type=template&id=6383663a\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ммм\\\\Desktop\\\\cs50-python-ru\\\\cs50-python-ru\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n    <main>\r\n        <h1>Главный Федеральный сберегательный банк (Home Federal Savings Bank)</h1>\r\n        <p>В <a href=\"https://en.wikipedia.org/wiki/The_Invitations\">24 эпизоде 7 сезона</a> <a href=\"https://en.wikipedia.org/wiki/Seinfeld\">« Сайнфелда »</a> <a href=\"https://en.wikipedia.org/wiki/Cosmo_Kramer\">Крамер</a> посещает банк, который обещает дать 100 долларов любому посетителю, который при приветствии не скажет \"hello\". Вместо этого Крамера говорит \"hey\", которое, как он настаивает, не является \"hello\", и поэтому он просит 100 долларов. Менеджер банка предлагает компромисс: «Ваше приветствие начинается на \"h\", как насчет 20 долларов?» Крамер соглашается.</p>\r\n        <p>В файле с именем <code class=\"code\">bank.py</code> реализуйте программу, которая запрашивает у пользователя приветствие. Если приветствие начинается с \"hello\", выведите $0. Если приветствие начинается с «h» (но не «hello»), выведите $20. В противном случае выведите $100. Игнорируйте любые начальные пробелы в приветствии пользователя и обрабатывайте приветствие пользователя без учета регистра.</p>\r\n        <details>\r\n            <summary>Подсказки</summary>\r\n            <ul>\r\n                <li>Не забывайте, что <code class=\"code\">str</code> имеет несколько методов, согласно <a href=\"https://docs.python.org/3/library/stdtypes.html#string-methods\">docs.python.org/3/library/stdtypes.html#string-methods</a></li>\r\n                <li>Обязательно дайте 0$ не только за \"hello\", но и за \"hello there\", “hello, Newman”, и тому подобное.</li>\r\n            </ul>\r\n        </details>\r\n        <h2>Демо</h2>\r\n        <div id=\"asciicast-container-Pes7djS4b1GmwpwqNu2vj6LgY\" class=\"asciicast\" style=\"display: block; float: none; overflow: hidden; padding: 0px; margin: 20px 0px;\"><iframe src=\"https://asciinema.org/a/Pes7djS4b1GmwpwqNu2vj6LgY/iframe?autoplay=1&amp;loop=1&amp;cols=80&amp;rows=12\" id=\"asciicast-iframe-Pes7djS4b1GmwpwqNu2vj6LgY\" name=\"asciicast-iframe-Pes7djS4b1GmwpwqNu2vj6LgY\" scrolling=\"no\" allowfullscreen=\"true\" style=\"overflow: hidden; margin: 0px; border: 0px; display: inline-block; width: 100%; float: none; visibility: visible; height: 491px;\"></iframe></div>\r\n        <h2>Перед тем как приступить к заданию</h2>\r\n        <p>Перейдите по ссылке <a href=\"https://code.cs50.io/\">code.cs50.io</a> и зайдите в свой аккаунт. Выполните команду <code class=\"code\">cd</code> в вашем терминальном окне. Ваше терминальное окно должно выглядить как представлено ниже:</p>\r\n        <pre class=\"highlight\"><code>$</code></pre>\r\n        <p>Следующая команда</p>\r\n        <pre class=\"highlight\"><code>mkdir bank</code></pre>\r\n        <p>создаст папку <code class=\"code\">bank</code> в вашем рабочем пространстве.</p>\r\n        <p>Затем выполните</p>\r\n        <pre class=\"highlight\"><code>cd bank</code></pre>\r\n        <p>чтобы изменить директорию в папке. Вы должны увидеть в терминале <code class=\"code\">bank/ $</code>. Вы можете сейчас выполнить</p>\r\n        <pre class=\"highlight\"><code>code bank.py</code> </pre>\r\n        <p>чтобы создать файл с именем , <code class=\"code\"> bank.py</code>в котором вы будете писать свою программу.</p>\r\n        <h2>Как проверить</h2>\r\n        <p>Вот как протестировать код вручную:</p>\r\n        <ul>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python bank.py</code>. Введите  <code class=\"code\">Hello</code> и нажмите Enter. Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code> $0 </code></pre>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python bank.py</code>. Введите  <code class=\"code\">Hello, Newman</code> и нажмите Enter.Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>$0 </code></pre>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python bank.py</code>. Введите  <code class=\"code\">How you doing?</code> и нажмите Enter. Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>$20</code></pre>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python bank.py</code>. Введите  <code class=\"code\">What's happening?</code> и нажмите Enter. Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>$100</code></pre>\r\n        </ul>\r\n        <p>Вы можете выполнить приведенную ниже команду, чтобы проверить свой код с помощью <code>check50</code>,являющейся программой которой CS50 будет проверять ваш код при отправке. Но перед отправкой обязательно протестируйте свой код сами!</p>\r\n        <pre  class=\"highlight\"><code>check50 cs50/problems/2022/python/bank</code></pre>\r\n        <p>Зеленые смайлики означают, что ваша программа прошла проверку! Красные означают, что ваша программа выводит что-то неожиданное. Посетите URL-адрес, который выводит <code class=\"code\">check50</code>, чтобы увидеть ответ <code class=\"code\">check50</code>, переданный вашей программе, какой вывод она ожидала и какой вывод фактически выдала ваша программа.</p>\r\n        <h2>Как отправить</h2>\r\n        <p> В своем терминале выполните следующее, чтобы отправить свою работу.</p>\r\n        <pre class=\"highlight\"><code>submit50 cs50/problems/2022/python/bank</code></pre>\r\n    </main>\r\n</template>","import { render } from \"./HomeBank.vue?vue&type=template&id=31418a35\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ммм\\\\Desktop\\\\cs50-python-ru\\\\cs50-python-ru\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n    <main>\r\n        <h1>Math Interpreter</h1>\r\n        <p>Python уже поддерживает математику, благодаря чему вы можете писать код для сложения, вычитания, умножения или деления значений и даже переменных. Но давайте напишем программу, которая позволит пользователям заниматься математикой, даже не зная Python.</p>\r\n        <p>В файле с именем <code class=\"code\">interpreter.py</code> реализуйте программу, которая запрашивает у пользователя  арифметическое выражение, а затем вычисляет и выводит результат в виде значения с плавающей запятой(float), отформатированного до одного десятичного разряда. Допустим что пользователь вводит данные в формате <code class=\"code\">x y z</code> и с одним пробелом между <code class=\"code\">x</code> и <code class=\"code\">y</code> и одним пробелом между <code class=\"code\">y</code> и <code class=\"code\">z</code> в котором: </p>\r\n        <ul>\r\n            <li><code class=\"code\">x</code> это целое число(int)</li>\r\n            <li><code class=\"code\">y</code> это <code class=\"code\">+</code>,<code class=\"code\">-</code>,<code class=\"code\">*</code> или <code class=\"code\">/</code></li>\r\n            <li><code class=\"code\">z</code> это целое число(int)</li>\r\n        </ul>\r\n        <p>Обратите внимание, что <code class=\"code\">python</code> это интерпретатор Python, а ваша программа <code class=\"code\">interpreter.py</code> будет интерпретатором математики</p>\r\n        <details>\r\n            <summary>Подсказки</summary>\r\n            <ul>\r\n                <li>Не забывайте, что <code class=\"code\">str</code> имеет несколько методов, согласно <a href=\"https://docs.python.org/3/library/stdtypes.html#string-methods\">docs.python.org/3/library/stdtypes.html#string-methods</a>, включая метод <code class=\"code\">split</code>, который разделяет <code class=\"code\">str</code> в последовательность значений, все они могут быть назначены переменным одновременно. Например, если выражение это <code class=\"code\">str</code> - 1 + 1, то</li>\r\n                <pre class=\"highlight\"><code>x, y, z = expression.split(\" \")</code></pre>\r\n                <p>в x будет помещена 1, в y будет помещен +, а в z будет помещена вторая 1</p>\r\n            </ul>\r\n        </details>\r\n        <h2>Демо</h2>\r\n        <div id=\"asciicast-container-udHWr5HxtxP5poDso1aVRB7qC\" class=\"asciicast\" style=\"display: block; float: none; overflow: hidden; padding: 0px; margin: 20px 0px;\"><iframe src=\"https://asciinema.org/a/udHWr5HxtxP5poDso1aVRB7qC/iframe?autoplay=1&amp;loop=1&amp;cols=80&amp;rows=12\" id=\"asciicast-iframe-udHWr5HxtxP5poDso1aVRB7qC\" name=\"asciicast-iframe-udHWr5HxtxP5poDso1aVRB7qC\" scrolling=\"no\" allowfullscreen=\"true\" style=\"overflow: hidden; margin: 0px; border: 0px; display: inline-block; width: 100%; float: none; visibility: visible; height: 491px;\"></iframe></div>\r\n        <h2>Перед тем как приступить к заданию</h2>\r\n        <p>Перейдите по ссылке <a href=\"https://code.cs50.io/\">code.cs50.io</a> и зайдите в свой аккаунт. Выполните команду <code class=\"code\">cd</code> в вашем терминальном окне. Ваше терминальное окно должно выглядить как представлено ниже:</p>\r\n        <pre class=\"highlight\"><code>$</code></pre>\r\n        <p>Следующая команда</p>\r\n        <pre class=\"highlight\"><code>mkdir interpreter</code></pre>\r\n        <p>создаст папку <code class=\"code\">interpreter</code> в вашем рабочем пространстве.</p>\r\n        <p>Затем выполните</p>\r\n        <pre class=\"highlight\"><code>cd interpreter</code></pre>\r\n        <p>чтобы изменить директорию в папке. Вы должны увидеть в терминале <code class=\"code\">interpreter/ $</code>. Вы можете сейчас выполнить</p>\r\n        <pre class=\"highlight\"><code>code interpreter.py</code> </pre>\r\n        <p>чтобы создать файл с именем , <code class=\"code\"> interpreter.py</code>в котором вы будете писать свою программу.</p>\r\n        <h2>Как проверить</h2>\r\n        <p>Вот как протестировать код вручную:</p>\r\n        <ul>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python interpreter.py</code>. Введите  <code class=\"code\">1 + 1</code> и нажмите Enter. Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>2.0 </code></pre>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python interpreter.py</code>. Введите  <code class=\"code\">2 - 3</code> и нажмите Enter.Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>-1.0 </code></pre>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python interpreter.py</code>. Введите  <code class=\"code\">2 * 2</code> и нажмите Enter. Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>4.0</code></pre>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python interpreter.py</code>. Введите  <code class=\"code\">50 / 5</code> и нажмите Enter. Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>10.0</code></pre>\r\n        </ul>\r\n        <p>Вы можете выполнить приведенную ниже команду, чтобы проверить свой код с помощью <code>check50</code>,являющейся программой которой CS50 будет проверять ваш код при отправке. Но перед отправкой обязательно протестируйте свой код сами!</p>\r\n        <pre  class=\"highlight\"><code>check50 cs50/problems/2022/python/interpreter</code></pre>\r\n        <p>Зеленые смайлики означают, что ваша программа прошла проверку! Красные означают, что ваша программа выводит что-то неожиданное. Посетите URL-адрес, который выводит <code class=\"code\">check50</code>, чтобы увидеть ответ <code class=\"code\">check50</code>, переданный вашей программе, какой вывод она ожидала и какой вывод фактически выдала ваша программа.</p>\r\n        <h2>Как отправить</h2>\r\n        <p> В своем терминале выполните следующее, чтобы отправить свою работу.</p>\r\n        <pre class=\"highlight\"><code>submit50 cs50/problems/2022/python/interpreter</code></pre>\r\n    </main>\r\n</template>","import { render } from \"./MathInterpreter.vue?vue&type=template&id=0d1c1c7a\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ммм\\\\Desktop\\\\cs50-python-ru\\\\cs50-python-ru\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n    <main>\r\n        <h1>Время приема пищи (Meal Time)</h1>\r\n        <p>Предположим, вы находитесь в стране, где принято завтракать с 7:00 до 8:00, обедать с 12:00 до 13:00, а ужинать с 18:00 до 19:00. Было бы неплохо, если бы у вас была программа, которая могла бы сказать вам, что и когда есть?</p>\r\n        <p>В <code class=\"code\">meal.py</code>, реализуйте программу, которая запрашивает у пользователя время и выводит, является ли это <code class=\"code\">breakfast time</code>, <code class=\"code\">lunch time</code>, или <code class=\"code\">dinner time</code>. Если это не время приема пищи, вообще ничего не выводите. Предположим, что пользовательский ввод будет отформатирован в 24-часовом формате как <code class=\"code\">#:##</code> или <code class=\"code\">##:##</code>. И предположим, что диапазон времени каждого приема пищи является инклюзивным. Например, будь то 7:00, 7:01, 7:59, 8:00 или любое другое время между ними, пора завтракать.</p>\r\n        <p>Структурируйте свою программу, как показано ниже, в которой <code class=\"code\">convert</code> функция (которую можно вызвать из <code class=\"code\">main</code>), которая преобразует <code class=\"code\">time</code>, строку <code class=\"code\">str</code> в 24-часовом формате, в соответствующее количество часов в виде <code class=\"code\">float</code>. Например, <code class=\"code\">time</code> равен <code class=\"code\">\"7:30\"</code> (т. е. 7 часов 30 минут), тогда <code class=\"code\">convert</code> должен вернуть <code class=\"code\">7.5</code>(т. е. 7.5 часов).</p>\r\n        <pre class=\"highlight\"><code>def main():\r\n    ...\r\n\r\ndef convert(time):\r\n    ...\r\n\r\nif __name__ == \"__main__\":\r\n    main()</code></pre>\r\n        <details>\r\n            <summary>Подсказки</summary>\r\n            <ul>\r\n                <li>Не забывайте, что <code class=\"code\">str</code> имеет несколько методов, согласно <a href=\"https://docs.python.org/3/library/stdtypes.html#string-methods\">docs.python.org/3/library/stdtypes.html#string-methods</a>, включая метод <code class=\"code\">split</code>, который разделяет <code class=\"code\">str</code> в последовательность значений, все они могут быть назначены переменным одновременно. Например, если <code class=\"code\">time</code> это <code class=\"code\">str</code> равный <code class=\"code\">\"7:30\"</code>, то</li>\r\n                <pre class=\"highlight\"><code>hours, minutes = time.split(\":\")</code></pre>\r\n                <p><code class=\"code\">\"7\"</code> будет помещен в переменную<code class=\"code\">hours</code>, а <code class=\"code\">\"30\"</code> в <code class=\"code\">minutes</code></p>\r\n                <li>Держите в уме, что в 1 часе 60 минут</li>\r\n            </ul>\r\n        </details>\r\n        <h2>Демо</h2>\r\n        <div id=\"asciicast-container-r50SdWETBghko6aqkpawWhj1G\" class=\"asciicast\" style=\"display: block; float: none; overflow: hidden; padding: 0px; margin: 20px 0px;\"><iframe src=\"https://asciinema.org/a/r50SdWETBghko6aqkpawWhj1G/iframe?autoplay=1&amp;loop=1&amp;cols=80&amp;rows=12\" id=\"asciicast-iframe-r50SdWETBghko6aqkpawWhj1G\" name=\"asciicast-iframe-r50SdWETBghko6aqkpawWhj1G\" scrolling=\"no\" allowfullscreen=\"true\" style=\"overflow: hidden; margin: 0px; border: 0px; display: inline-block; width: 100%; float: none; visibility: visible; height: 491px;\"></iframe></div>\r\n        <h2>Перед тем как приступить к заданию</h2>\r\n        <p>Перейдите по ссылке <a href=\"https://code.cs50.io/\">code.cs50.io</a> и зайдите в свой аккаунт. Выполните команду <code class=\"code\">cd</code> в вашем терминальном окне. Ваше терминальное окно должно выглядить как представлено ниже:</p>\r\n        <pre class=\"highlight\"><code>$</code></pre>\r\n        <p>Следующая команда</p>\r\n        <pre class=\"highlight\"><code>mkdir meal</code></pre>\r\n        <p>создаст папку <code class=\"code\">meal</code> в вашем рабочем пространстве.</p>\r\n        <p>Затем выполните</p>\r\n        <pre class=\"highlight\"><code>cd meal</code></pre>\r\n        <p>чтобы изменить директорию в папке. Вы должны увидеть в терминале <code class=\"code\">meal/ $</code>. Вы можете сейчас выполнить</p>\r\n        <pre class=\"highlight\"><code>code meal.py</code> </pre>\r\n        <p>чтобы создать файл с именем , <code class=\"code\"> meal.py</code>в котором вы будете писать свою программу.</p>\r\n        <h2>Вызов</h2>\r\n        <p>Если вы готовы принять вызов, при желании добавьте поддержку 12-часового времени, что позволит пользователю вводить время и в этих форматах:</p>\r\n        <ul>\r\n            <li><code class=\"code\">#:## a.m.</code> и <code class=\"code\">##:## a.m.</code></li>\r\n            <li><code class=\"code\">#:## p.m.</code> и <code class=\"code\">##:## p.m.</code></li>\r\n        </ul>\r\n        <h2>Как проверить</h2>\r\n        <p>Вот как протестировать код вручную:</p>\r\n        <ul>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python meal.py</code>. Введите  <code class=\"code\">7:00</code> и нажмите Enter. Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>breakfast time</code></pre>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python meal.py</code>. Введите  <code class=\"code\">7:30</code> и нажмите Enter.Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>breakfast time </code></pre>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python meal.py</code>. Введите  <code class=\"code\">12:42</code> и нажмите Enter.Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>lunch time </code></pre>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python meal.py</code>. Введите  <code class=\"code\">18:32</code> и нажмите Enter.Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>dinner time </code></pre>\r\n        </ul>\r\n        <p>Вы можете выполнить приведенную ниже команду, чтобы проверить свой код с помощью <code>check50</code>,являющейся программой которой CS50 будет проверять ваш код при отправке. Но перед отправкой обязательно протестируйте свой код сами!</p>\r\n        <pre  class=\"highlight\"><code>check50 cs50/problems/2022/python/meal</code></pre>\r\n        <p>Зеленые смайлики означают, что ваша программа прошла проверку! Красные означают, что ваша программа выводит что-то неожиданное. Посетите URL-адрес, который выводит <code class=\"code\">check50</code>, чтобы увидеть ответ <code class=\"code\">check50</code>, переданный вашей программе, какой вывод она ожидала и какой вывод фактически выдала ваша программа.</p>\r\n        <h2>Как отправить</h2>\r\n        <p> В своем терминале выполните следующее, чтобы отправить свою работу.</p>\r\n        <pre class=\"highlight\"><code>submit50 cs50/problems/2022/python/meal</code></pre>\r\n    </main>\r\n</template>","import { render } from \"./MealTime.vue?vue&type=template&id=6109322a\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ммм\\\\Desktop\\\\cs50-python-ru\\\\cs50-python-ru\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n    <main>\r\n        <h1>Лекция 1</h1>\r\n        <ul>\r\n            <a href=\"#conditionals\"><li>Условные выражения</li></a>\r\n            <a href=\"#if-statements\"><li>Оператор if</li></a>\r\n            <a href=\"#control-flow-elif-and-else\"><li>Управление потоком, elif, and else</li></a>\r\n            <a href=\"#or\"><li>or</li></a>\r\n            <a href=\"#and\"><li>and</li></a>\r\n            <a href=\"#modulo\"><li>Modulo</li></a>\r\n            <a href=\"#creating-our-own-parity-function\"><li>Создание функции для определении четности числа</li></a>\r\n            <a href=\"#pythonic\"><li>Pythonic</li></a>\r\n            <a href=\"#match\"><li>match</li></a>\r\n            <a href=\"#summing-up\"><li>Подводя итог</li></a>\r\n        </ul>\r\n        <h2 id=\"conditionals\">Условные выражения</h2>\r\n        <ul>\r\n            <li>Условные выражения позволяют вам, программисту, разрешить вашей программе принимать решения: как если бы у вашей программы был выбор между левым или правым путем в зависимости от определенных условий</li>\r\n            <li>В Python встроен набор «операторов», с помощью которых можно задавать математические вопросы.</li>\r\n            <li><code class=\"code\">></code> и <code class=\"code\">&lt;</code> символы, вероятно, вам хорошо знакомы.</li>\r\n            <li><code class=\"code\">>=</code> означает «больше или равно».</li>\r\n            <li><code class=\"code\">&lt;=</code> означает «меньше или равно».</li>\r\n            <li><code class=\"code\">==</code> означает «равно», обратите внимание на двойной знак равенства! Один знак равенства будет присваивать значение. Двойной знак равенства используются для сравнения переменных.</li>\r\n            <li><code class=\"code\">!= </code>означает «не равно».</li>\r\n            <li>Условные операторы сравнивают левое выражение с правым выражением.</li>\r\n        </ul>\r\n        <h2 id=\"if-statements\">Оператор if</h2>\r\n        <ul>\r\n            <li>В окне терминала введите <code class=\"code\">code compare.py</code>. Это создаст новый файл с именем «compare».</li>\r\n            <li>В окне текстового редактора начните со следующего:</li>\r\n            <pre class=\"highlight\"><code>x = int(input(\"What's x? \"))\r\ny = int(input(\"What's y? \"))\r\n\r\nif x &lt; y:\r\n    print(\"x is less than y\")</code></pre>\r\n            <span>Обратите внимание, как ваша программа принимает ввод пользователя как для x, так и для y, преобразуя их в целые числа и сохраняя их в соответствующие переменные x и y. Затем  оператор <code class=\"code\">if</code> сравнивает x и y. Если условие <code class=\"code\">x &lt; y</code> выполнено, выполняется функция <code class=\"code\">print</code>.</span>\r\n            <li>Операторы if используют <code class=\"code\">bool</code> или логические значения (true или false), чтобы решить, выполнять код или нет. Если утверждение <code class=\"code\">x > y</code> верно, компилятор зарегистрирует его как true и выполнит код.</li>\r\n        </ul>\r\n        <h2 id=\"control-flow-elif-and-else\">Управление потоком, elif, and else</h2>\r\n        <ul>\r\n            <li>Далее измените свой код следующим образом:</li>\r\n            <pre class=\"highlight\"><code>x = int(input(\"What's x? \"))\r\ny = int(input(\"What's y? \"))\r\n\r\nif x &lt; y:\r\n    print(\"x is less than y\")\r\nif x > y:\r\n    print(\"x is greater than y\")\r\nif x == y:\r\n    print(\"x is equal to y\")</code></pre>\r\n            <span>Обратите внимание, как выглядит серия if утверждений. Сначала if оценивается первое утверждение. Затем второй if оператор выполняет свою проверку. Наконец, последний if оператор выполняет проверку. Этот поток решений называется «поток управления»(control flow).</span>\r\n            <li>Наш код можно представить следующим образом:</li>\r\n            <img src=\"../../assets/week1/note1_1.png\" alt=\"\">\r\n            <li>Эту программу можно улучшить, если не задавать три последовательных вопроса. Ведь все три вопроса могут не иметь верный ответ! Измените свою программу следующим образом:</li>\r\n            <pre class=\"highlight\"><code>x = int(input(\"What's x? \"))\r\ny = int(input(\"What's y? \"))\r\n\r\nif x &lt; y:\r\n    print(\"x is less than y\")\r\nelif x > y:\r\n    print(\"x is greater than y\")\r\nelif x == y:\r\n    print(\"x is equal to y\")</code></pre>\r\n            <span>Обратите внимание, что использование <code class=\"code\">elif</code> позволяет программе принимать меньше решений. Сначала проверяется <code class=\"code\">if</code>. Если это утверждение окажется верным, все <code class=\"code\">elif</code> утверждения вообще не будут выполняться. Однако, если <code class=\"code\">if</code> проверяется и оказывается ложным, будет проверяться первый <code class=\"code\">elif</code>. Если утверждение будет верным, последняя проверка выполняться не будет.</span>\r\n            <li>Наш код можно представить следующим образом:</li>\r\n            <img src=\"../../assets/week1/note1_2.png\" alt=\"\">\r\n            <li>Хотя ваш компьютер может не заметить разницы в скорости между нашей первой программой и этой исправленной программой, подумайте, об онлайн-сервере, выполняющий миллиарды или триллионы таких вычислений каждый день, определенно такое небольшое кодовое решение может повлиять на производительность.</li>\r\n            <li>И последнее улучшение, которое мы можем внести в нашу программу. Обратите внимание, насколько логически выполнение<code class=\"code\">elif x == y</code>проверки не является обязательным. В конце концов, если логически x не меньше y И x не больше y, x ДОЛЖЕН равняться y. Поэтому нам не нужно проверять <code class=\"code\">elif x == y</code>. Мы можем создать «универсальный» результат по умолчанию, используя else оператор. Мы можем переписать код следующим образом:</li>\r\n            <pre class=\"highlight\"><code>x = int(input(\"What's x? \"))\r\ny = int(input(\"What's y? \"))\r\n\r\nif x &lt; y:\r\n    print(\"x is less than y\")\r\nelif x > y:\r\n    print(\"x is greater than y\")\r\nelse:\r\n    print(\"x is equal to y\")</code></pre>\r\n            <span>Обратите внимание, как относительная сложность этой программы уменьшилась благодаря нашей редакции.</span>\r\n            <li>Наш код можно представить следующим образом:</li>\r\n            <img src=\"../../assets/week1/note1_3.png\" alt=\"\">\r\n            </ul>\r\n            <h2 id=\"#or\">or</h2>\r\n            <ul>\r\n                <li><code class=\"code\">or</code> позволяет вашей программе выбирать между одной или несколькими альтернативами. Например, мы могли бы дополнительно отредактировать нашу программу следующим образом:</li>\r\n                <pre class=\"highlight\"><code>x = int(input(\"What's x? \"))\r\ny = int(input(\"What's y? \"))\r\n\r\nif x &lt; y or x > y:\r\n    print(\"x is not equal to y\")\r\nelse:\r\n    print(\"x is equal to y\")</code></pre>\r\n                <span>Обратите внимание, что результат нашей программы тот же, но сложность уменьшилась, а эффективность нашего кода увеличилась.</span>\r\n                <li>На данный момент наш код довольно хорош. Однако можно ли еще улучшить конструкцию? Мы могли бы дополнительно отредактировать наш код следующим образом:</li>\r\n                <pre class=\"highlight\"><code>x = int(input(\"What's x? \"))\r\ny = int(input(\"What's y? \"))\r\n\r\nif x != y:\r\n    print(\"x is not equal to y\")\r\nelse:\r\n    print(\"x is equal to y\")</code></pre>\r\n                <span>Обратите внимание, что мы полностью удалили <code class=\"code\">or</code> и просто спросили: «Разве x не равно y?»(x is not equal to y) Мы задаем один и только один вопрос. Очень эффективно!</span>\r\n                <li>Для иллюстрации мы также можем изменить наш код следующим образом:</li>\r\n            <pre class=\"highlight\"><code>x = int(input(\"What's x? \"))\r\ny = int(input(\"What's y? \"))\r\n\r\nif x == y:\r\n    print(\"x is equal to y\")\r\nelse:\r\n    print(\"x is not equal to y\")</code></pre>\r\n                <span>Обратите внимание, что оператор <code class=\"code\">==</code> проверяет, равны ли друг другу то, что находится слева и справа. Использование двойного знака равенства очень важно. Если вы используете только один знак равенства, компилятор, скорее всего, выдаст ошибку.</span>\r\n                <li>Наш код можно проиллюстрировать следующим образом:</li>\r\n                <img src=\"../../assets/week1/note1_4.png\" alt=\"\">\r\n            </ul>\r\n            <h2 id=\"and\">and</h2>\r\n            <ul>\r\n                <li>Подобно <code class=\"code\">or</code>, <code class=\"code\">and</code> можно использовать в условных операторах.</li>\r\n                <li>Выполнить в окне терминала <code class=\"code\">code grade.py</code>. Заполните новую программу следующим образом:</li>\r\n                <pre class=\"highlight\"><code>score = int(input(\"Score: \"))\r\n\r\nif score >= 90 and score &lt;= 100:\r\n    print(\"Grade: A\")\r\nelif score >=80 and score &lt; 90:\r\n    print(\"Grade: B\")\r\nelif score >=70 and score &lt; 80:\r\n    print(\"Grade: C\")\r\nelif score >=60 and score &lt; 70:\r\n    print(\"Grade: D\")\r\nelse:\r\n    print(\"Grade: F\")</code></pre>\r\n                <span>Обратите внимание, что при выполнении <code class=\"cod\">python grade.py</code> вы сможете ввести балл и получить оценку. Однако обратите внимание, на возможные ошибки.</span>\r\n                <li>Как правило, мы никогда не доверяем нашему пользователю вводить правильную информацию. Мы могли бы улучшить наш код следующим образом:</li>\r\n                <pre class=\"highlight\"><code>  score = int(input(\"Score: \"))\r\n\r\nif 90 &lt;= score &lt;= 100:\r\n    print(\"Grade: A\")\r\nelif 80 &lt;= score &lt; 90:\r\n    print(\"Grade: B\")\r\nelif 70 &lt;= score &lt; 80:\r\n    print(\"Grade: C\")\r\nelif 60 &lt;= score &lt; 70:\r\n    print(\"Grade: D\")\r\nelse:\r\n    print(\"Grade: F\")</code></pre>\r\n                <span>Обратите внимание на то, как Python позволяет вам связывать операторы и условия способом, совершенно необычным для других языков программирования.</span>\r\n                <li>Тем не менее, мы можем еще больше улучшить нашу программу:</li>\r\n                <pre class=\"highlight\"><code>score = int(input(\"Score: \"))\r\n\r\nif score >= 90:\r\n    print(\"Grade: A\")\r\nelif score >= 80:\r\n    print(\"Grade: B\")\r\nelif score >= 70:\r\n    print(\"Grade: C\")\r\nelif score >= 60:\r\n    print(\"Grade: D\")\r\nelse:\r\n    print(\"Grade: F\")</code></pre>\r\n                <span>Обратите внимание, как улучшилась программа за счет меньшего количества вопросов. Это делает нашу программу более легкой для чтения и гораздо более удобной в обслуживании в будущем.</span>\r\n                <li>Вы можете подробнее узнать о <a href=\"https://docs.python.org/3/tutorial/controlflow.html\">control flow</a> в документации Python </li>\r\n            </ul>\r\n            <h2 id=\"modulo\">Modulo</h2>\r\n            <ul>\r\n                <li>В математике паритет означает, является ли число четным или нечетным.</li>\r\n                <li>Оператор по модулю <code class=\"code\">%</code> в программировании позволяет увидеть, делятся ли два числа нацело или делятся и имеют остаток.</li>\r\n                <li>Например, <code class=\"code\">4 % 2</code> даст ноль, потому что делится без остатка. Однако <code class=\"code\">3 % 2</code> не делится без остатка и даст число, отличное от нуля!</li>\r\n                <li>В окне терминала создайте новую программу, набрав <code class=\"code\">code parity.py</code>. В окне текстового редактора введите код следующим образом:</li>\r\n                <pre class=\"highlight\"><code>x = int(input(\"What's x? \"))\r\n\r\n    if x % 2 == 0:\r\n        print(\"Even\")\r\n    else:\r\n        print(\"Odd\")</code></pre>\r\n                <span>Обратите внимание, как наши пользователи могут ввести любое число, чтобы увидеть, четное оно или нечетное.</span>\r\n            </ul>\r\n            <h2 id=\"creating-our-own-parity-function\">Создание функции для определении четности числа</h2>\r\n            <ul>\r\n                <li>Как обсуждалось в лекции 0, вам будет полезно создать собственную функцию!</li>\r\n                <li>Мы можем создать функцию для проверки того, является ли число четным или нечетным. Настройте свой код следующим образом:</li>\r\n                <pre class=\"highlight\"><code>def main():\r\n    x = int(input(\"What's x? \")\r\n    if is_even(x):\r\n        print(\"Even\")\r\n    else:\r\n        print(\"Odd\")\r\n\r\ndef is_even(n):\r\n    if n % 2 == 0:\r\n        return True\r\n    else:\r\n        return False\r\n\r\nmain()</code></pre>\r\n            <span>Обратите внимание, что одна из причин, по которой наше <code class=\"code\">if</code> утверждение <code class=\"code\">is_even(x)</code> работает, даже несмотря на то, что там нет оператора. Это потому, что наша функция возвращает bool(или логическое значение), true или false обратно в основную функцию. Оператор <code class=\"code\">if</code> просто проверяет, является ли x из функции <code class=\"code\">is_even</code> true  или false.</span>\r\n            </ul>\r\n            <h2 id=\"pythonic\">Pythonic</h2>\r\n            <ul>\r\n                <li>В мире программирования есть типы программирования, которые по своей природе называются «Pythonic». То есть существуют способы программирования, которые иногда встречаются только в программировании на Python. Рассмотрим следующую модификацию нашей программы:</li>\r\n                <pre class=\"highlight\"><code>def main():\r\n    x = int(input(\"What's x? \")\r\n    if is_even(x):\r\n        print(\"Even\")\r\n    else:\r\n        print(\"Odd\")\r\n\r\n\r\ndef is_even(n):\r\n    return True if n % 2 == 0 else False\r\n\r\n\r\nmain()</code></pre>\r\n                <span>Обратите внимание, что этот оператор возврата в нашем коде почти похож на предложение на английском языке. Это уникальный способ кодирования, встречающийся только в Python.</span>\r\n                <li>Мы можем дополнительно пересмотреть наш код и сделать его более читабельным:</li>\r\n                <pre class=\"highlight\"><code>def main():\r\n    x = int(input(\"What's x? \")\r\n    if is_even(x):\r\n        print(\"Even\")\r\n    else:\r\n        print(\"Odd\")\r\n\r\n\r\ndef is_even(n):\r\n    return n % 2 == 0\r\n\r\n\r\nmain()</code></pre>\r\n                <span>Обратите внимание, что программа провеярет <code class=\"code\">n % 2 == 0</code>как true или false и возвращает это функции main.</span>\r\n            </ul>\r\n            <h2 id=\"match\">match</h2>\r\n            <ul>\r\n                <li>Подобно операторам <code class=\"code\">if</code>, <code class=\"code\">elif</code> и <code class=\"code\">else</code>, <code class=\"code\">match</code> оператор можно использовать для условного запуска кода, соответствующего определенным значениям.</li>\r\n                <li>Рассмотрим следующую программу:</li>\r\n                <pre class=\"highlight\"><code>  name = input(\"What's your name? \")\r\n\r\nif name == \"Harry\":\r\n    print(\"Gryffindor\")\r\nelif name == \"Hermione\":\r\n    print(\"Gryffindor\")\r\nelif name == \"Ron\": \r\n    print(\"Gryffindor\")\r\nelif name == \"Draco\":\r\n    print(\"Slytherin\")\r\nelse:\r\n    print(\"Who?\")</code></pre>\r\n                <span>Обратите внимание, что первые три условных оператора выводят один и тот же ответ.</span>\r\n                <li>Мы можем немного улучшить этот код, используя ключевое слово <code class=\"code\">or</code>:</li>\r\n                <pre class=\"highlight\"><code> name = input(\"What's your name? \")\r\n\r\nif name == \"Harry\" or name == \"Hermione\" or name == \"Ron\": \r\n    print(\"Gryffindor\")\r\nelif name == \"Draco\":\r\n    print(\"Slytherin\")\r\nelse:\r\n    print(\"Who?\")</code></pre>\r\n                <span>Обратите внимание, что количество  операторов <code class=\"code\">elif</code> уменьшилось, что улучшило читаемость нашего кода.</span>\r\n                <li>В качестве альтернативы мы можем использовать операторы <code class=\"code\">match</code> для сопоставления имен с домами. Рассмотрим следующий код:</li>\r\n                <pre class=\"highlight\"><code>name = input(\"What's your name? \")\r\n\r\nmatch name: \r\n    case \"Harry\":\r\n        print(\"Gryffindor\")\r\n    case \"Hermione\":\r\n        print(\"Gryffindor\")\r\n    case \"Ron\": \r\n        print(\"Gryffindor\")\r\n    case \"Draco\":\r\n        print(\"Slytherin\")\r\n    case _:\r\n        print(\"Who?\")</code></pre>\r\n                <span>Обратите внимание на использование <code class=\"code\">_</code> символа в последнем случае. Это будет соответствовать любому другому вводу, что приведет к поведению, аналогичному поведению  оператора <code class=\"code\">else</code>.</span>\r\n                <li>Оператор <code class=\"code\">match</code> сравнивает значение, следующее за  ключевым словом <code class=\"code\">match</code>, с каждым из значений, следующих за  ключевыми словами <code class=\"code\">case</code>. В случае обнаружения совпадения выполняется соответствующий участок кода с отступом, и программа останавливает сравнение.</li>\r\n                <li>Мы можем улучшить код:</li>\r\n                <pre class=\"highlight\"><code> name = input(\"What's your name? \")\r\n\r\nmatch name: \r\n    case \"Harry\" | \"Hermione\" | \"Ron\":\r\n        print(\"Gryffindor\")\r\n    case \"Draco\":\r\n        print(\"Slytherin\")\r\n    case _:\r\n        print(\"Who?\")</code></pre>\r\n                <span>Обратите внимание на использование одной вертикальной черты <code class=\"code\">|</code>. Подобно ключевому слову <code class=\"code\">or</code>, это позволяет нам проверять несколько значений в одном  выражении <code class=\"code\">case</code>.</span>\r\n            </ul>\r\n        <h2 id=\"summing-up\">Подводя итог</h2>\r\n        <p>Теперь у вас есть возможность в Python использовать условные операторы, чтобы задавать вопросы, и ваша программа выполняет соответствующие действия. В этой лекции мы обсудили…</p>\r\n        <ul>\r\n            <li>Условные выражения;</li>\r\n            <li>Оператор if;</li>\r\n            <li>Управление потоком, elif, and else;</li>\r\n            <li>or;</li>\r\n            <li>and;</li>\r\n            <li>modulo;</li>\r\n            <li>Создание функции;</li>\r\n            <li>Pythonic кодирование</li>\r\n            <li>и match</li>\r\n        </ul>\r\n    </main>\r\n</template>","import { render } from \"./Notes1View.vue?vue&type=template&id=2278338b\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ммм\\\\Desktop\\\\cs50-python-ru\\\\cs50-python-ru\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n    <main>\r\n        <h1>Набор проблем 1</h1>\r\n        <h2>Что нужно делать</h2>\r\n        <ol>\r\n            <li>Войдите в <a href=\"https://code.cs50.io/\"> code.cs50.io</a>, облачную версию Visual Studio Code (VS Code), которая предоставляет собственное  кодовое пространство(Codespace) со всем что нужно для прохождения курса . Не нужно скачивать и устанавливать VS Code или Python на свой Mac или ПК!</li>\r\n            <li>Выполните update50 в окне терминала вашего Codespace, чтобы убедиться, что ваше пространство кода обновлено, при появлении запроса нажмите <b>Rebuild now</b>.</li>\r\n            <li>\r\n                <span>Отправьте все проблемы приведенные ниже:</span>\r\n                <ul>\r\n                    <li><router-link to=\"/1/deep/\">Deep Thought</router-link> </li>\r\n                    <li><router-link to=\"/1/bank/\">Home Federal Savings Bank</router-link> </li>\r\n                    <li><router-link to=\"/1/extensions/\">File Extensions</router-link> </li>\r\n                    <li><router-link to=\"/1/interpreter/\">Math Interpreter</router-link> </li>\r\n                    <li><router-link to=\"/1/meal/\">Meal Time</router-link> </li>\r\n                </ul>\r\n            </li>\r\n        </ol>\r\n    </main>\r\n</template>\r\n<style scoped>\r\nmain {\r\n    height: 100vh;\r\n}\r\n</style>","import { render } from \"./Psets1View.vue?vue&type=template&id=c08636b2&scoped=true\"\nconst script = {}\n\nimport \"./Psets1View.vue?vue&type=style&index=0&id=c08636b2&scoped=true&lang=css\"\n\nimport exportComponent from \"C:\\\\Users\\\\ммм\\\\Desktop\\\\cs50-python-ru\\\\cs50-python-ru\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-c08636b2\"]])\n\nexport default __exports__","<template>\r\n    <main>\r\n        <h1>camelCase</h1>\r\n        <img src=\"https://cs50.harvard.edu/python/2022/psets/2/camel/1024px-CamelCase_new.svg.png\" alt=\"\" width=\"496\">\r\n        <p class=\"small\">Источник: <a href=\"https://en.wikipedia.org/wiki/Camel_case\">https://en.wikipedia.org/wiki/Camel_case</a></p>\r\n        <p>В некоторых языках принято использовать <a href=\"https://en.wikipedia.org/wiki/Camel_case\">camel case</a>(верблюжий регистр, также известный как «смешанный регистр») для имен переменных, когда эти имена состоят из нескольких слов, при этом первая буква первого слова — строчная, а первая буква каждого последующего слова — прописная. Например, переменная name может называться <code class=\"code\">name</code>, переменная first name может называться <code class=\"code\">firstName</code>, а переменная для предпочитаемого имени пользователя(preferred first name)(например, псевдонима) может называться preferredFirstName.</p>\r\n        <p>Python, напротив, рекомендует <a href=\"https://peps.python.org/pep-0008/#function-and-variable-names\">змеиный регистр</a> в котором слова разделяются символом подчеркивания (_), а все буквы в нижнем регистре. Например , в Python те же самые переменные будут называться <code class=\"code\">name</code>, <code class=\"code\">first_name</code>, и , соответственно <code class=\"code\">preferred_first_name</code>.</p>\r\n        <p>В файле с именем <code class=\"code\">camel.py</code> реализуйте программу, которая запрашивает у пользователя имя переменной в верблюжьем регистре и выводит соответствующее имя в змеином регистре. Предположим, что пользовательский ввод действительно будет в верблюжьем регистре.</p>\r\n        <details>\r\n            <summary>Подсказки</summary>\r\n            <ul>\r\n                <li>Не забывайте, что <code class=\"code\">str</code> имеет несколько методов, согласно <a href=\"https://docs.python.org/3/library/stdtypes.html#string-methods\">docs.python.org/3/library/stdtypes.html#string-methods</a></li>\r\n                <li>Как и <code class=\"code\">list</code> - <code class=\"code\">str</code> является «итерируемым», что означает, что вы можете перебирать каждый из его символов в цикле. Например, если <code class=\"code\">s</code> - это <code class=\"code\">str</code>, вы можете напечатать каждый из его символов по одному с помощью такого кода:\r\n                <pre class=\"highlight\"><code>for c in s:\r\n    print(c, end=\"\")</code></pre>\r\n                </li>        \r\n            </ul>\r\n        </details>\r\n        <h2>Демо</h2>\r\n        <div id=\"asciicast-container-bbXilkZPylKGt0bo3g65wE5hU\" class=\"asciicast\" style=\"display: block; float: none; overflow: hidden; padding: 0px; margin: 20px 0px;\"><iframe src=\"https://asciinema.org/a/bbXilkZPylKGt0bo3g65wE5hU/iframe?autoplay=1&amp;loop=1&amp;cols=80&amp;rows=12\" id=\"asciicast-iframe-bbXilkZPylKGt0bo3g65wE5hU\" name=\"asciicast-iframe-bbXilkZPylKGt0bo3g65wE5hU\" scrolling=\"no\" allowfullscreen=\"true\" style=\"overflow: hidden; margin: 0px; border: 0px; display: inline-block; width: 100%; float: none; visibility: visible; height: 496px;\"></iframe></div>\r\n        <h2>Перед тем как приступить к заданию</h2>\r\n        <p>Перейдите по ссылке <a href=\"https://code.cs50.io/\">code.cs50.io</a> и зайдите в свой аккаунт. Выполните команду <code class=\"code\">cd</code> в вашем терминальном окне. Ваше терминальное окно должно выглядить как представлено ниже:</p>\r\n        <pre class=\"highlight\"><code>$</code></pre>\r\n        <p>Следующая команда</p>\r\n        <pre class=\"highlight\"><code>mkdir camel</code></pre>\r\n        <p>создаст папку <code class=\"code\">camel</code> в вашем рабочем пространстве.</p>\r\n        <p>Затем выполните</p>\r\n        <pre class=\"highlight\"><code>cd camel</code></pre>\r\n        <p>чтобы изменить директорию в папке. Вы должны увидеть в терминале <code class=\"code\">camel/ $</code>. Вы можете сейчас выполнить</p>\r\n        <pre class=\"highlight\"><code>code camel.py</code> </pre>\r\n        <p>чтобы создать файл с именем , <code class=\"code\"> camel.py</code>в котором вы будете писать свою программу.</p>\r\n        <h2>Как проверить</h2>\r\n        <p>Вот как протестировать код вручную:</p>\r\n        <ul>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python camel.py</code>. Введите  <code class=\"code\">name</code> и нажмите Enter. Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code> name </code></pre>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python camel.py</code>. Введите  <code class=\"code\">firstName</code> и нажмите Enter.Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>first_name </code></pre>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python camel.py</code>. Введите  <code class=\"code\">preferredFirstName</code> и нажмите Enter.Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>preferred_first_name </code></pre>\r\n        </ul>\r\n        <p>Вы можете выполнить приведенную ниже команду, чтобы проверить свой код с помощью <code>check50</code>,являющейся программой которой CS50 будет проверять ваш код при отправке. Но перед отправкой обязательно протестируйте свой код сами!</p>\r\n        <pre  class=\"highlight\"><code>check50 cs50/problems/2022/python/camel</code></pre>\r\n        <p>Зеленые смайлики означают, что ваша программа прошла проверку! Красные означают, что ваша программа выводит что-то неожиданное. Посетите URL-адрес, который выводит <code class=\"code\">check50</code>, чтобы увидеть ответ <code class=\"code\">check50</code>, переданный вашей программе, какой вывод она ожидала и какой вывод фактически выдала ваша программа.</p>\r\n        <h2>Как отправить</h2>\r\n        <p> В своем терминале выполните следующее, чтобы отправить свою работу.</p>\r\n        <pre class=\"highlight\"><code>submit50 cs50/problems/2022/python/camel</code></pre>\r\n    </main>\r\n</template>","import { render } from \"./CamelCase.vue?vue&type=template&id=71ef587a\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ммм\\\\Desktop\\\\cs50-python-ru\\\\cs50-python-ru\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n    <main>\r\n        <h1>Автомат с Колой</h1>\r\n        <div class=\"pset\">\r\n            <p>Предположим, что автомат продает бутылки Coca-Cola (Coke) по 50 центов и принимает монеты только следующих номиналов: 25 центов, 10 центов и 5 центов.</p>\r\n            <p>В файле с именем coke.py реализуйте программу, предлагающую пользователю вставлять монету в автомат по одной, каждый раз информируя пользователя о сумме, которую он еще должен всавить в автомат. Как только пользователь введет не менее 50 центов, выведите сколько центов сдачи причитается пользователю. Предположим, что пользователь будет вводить только целые числа и игнорировать любые целые числа, не являющиеся допустимым номиналом.</p>\r\n        </div>\r\n        <img src=\"https://cs50.harvard.edu/python/2022/psets/2/coke/coke.png\" width=\"100%\" height=\"100%\" alt=\"Бутылка кока-колы CS50\">     \r\n        <h2>Демо</h2>\r\n        <div id=\"asciicast-container-DuIJvOFsuZiBswsLhSuUaDYe2\" class=\"asciicast\" style=\"display: block; float: none; overflow: hidden; padding: 0px; margin: 20px 0px;\"><iframe src=\"https://asciinema.org/a/DuIJvOFsuZiBswsLhSuUaDYe2/iframe?autoplay=1&amp;loop=1&amp;cols=80&amp;rows=12\" id=\"asciicast-iframe-DuIJvOFsuZiBswsLhSuUaDYe2\" name=\"asciicast-iframe-DuIJvOFsuZiBswsLhSuUaDYe2\" scrolling=\"no\" allowfullscreen=\"true\" style=\"overflow: hidden; margin: 0px; border: 0px; display: inline-block; width: 100%; float: none; visibility: visible; height: 450px;\"></iframe></div>\r\n        <h2>Перед тем как приступить к заданию</h2>\r\n        <p>Перейдите по ссылке <a href=\"https://code.cs50.io/\">code.cs50.io</a> и зайдите в свой аккаунт. Выполните команду <code class=\"code\">cd</code> в вашем терминальном окне. Ваше терминальное окно должно выглядить как представлено ниже:</p>\r\n        <pre class=\"highlight\"><code>$</code></pre>\r\n        <p>Следующая команда</p>\r\n        <pre class=\"highlight\"><code>mkdir coke</code></pre>\r\n        <p>создаст папку <code class=\"code\">coke</code> в вашем рабочем пространстве.</p>\r\n        <p>Затем выполните</p>\r\n        <pre class=\"highlight\"><code>cd coke</code></pre>\r\n        <p>чтобы изменить директорию в папке. Вы должны увидеть в терминале <code class=\"code\">coke/ $</code>. Вы можете сейчас выполнить</p>\r\n        <pre class=\"highlight\"><code>code coke.py</code> </pre>\r\n        <p>чтобы создать файл с именем , <code class=\"code\"> coke.py</code>в котором вы будете писать свою программу.</p>\r\n        <h2>Как проверить</h2>\r\n        <p>Вот как протестировать код вручную:</p>\r\n        <ul>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python coke.py</code>. При появлении <code class=\"code\">Insert Coin:</code> запроса введите <code class=\"\">25</code> и нажмите Enter. Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code> Amount Due: 25 </code></pre>\r\n            <span>и продолжайте запрашивать у пользователя монеты.</span>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python coke.py</code>. При появлении <code class=\"code\">Insert Coin:</code> запроса введите <code class=\"\">10</code> и нажмите Enter. Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>Amount Due: 40</code></pre>\r\n            <span>и продолжайте запрашивать у пользователя монеты.</span>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python coke.py</code>. При появлении <code class=\"code\">Insert Coin:</code> запроса введите <code class=\"\">5</code> и нажмите Enter. Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>Amount Due: 45</code></pre>\r\n            <span>и продолжайте запрашивать у пользователя монеты.</span>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python coke.py</code>. При появлении <code class=\"code\">Insert Coin:</code> запроса введите <code class=\"\">30</code> и нажмите Enter. Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>Amount Due: 50</code></pre>\r\n            <span>потому что автомат не принимает 30-центовые монеты! Затем ваша программа должна продолжать запрашивать у пользователя монеты.</span>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python coke.py</code>. При появлении <code class=\"code\">Insert Coin:</code> запроса введите <code class=\"\">25</code> и нажмите Enter, затем введите <code class=\"\">25</code> еще раз и нажмите Enter. Ваша программа должна остановиться и отобразить:</li>\r\n            <pre class=\"highlight\"><code>Change Owed: 0</code></pre>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python coke.py</code>. При появлении <code class=\"code\">Insert Coin:</code> запроса введите <code class=\"\">25</code> и нажмите Enter, затем введите <code class=\"\">10</code> и нажмите Enter. Введите <code class=\"\">25</code> еще раз и нажмите Enter, после чего ваша программа должна остановиться и отобразить:</li>\r\n            <pre class=\"highlight\"><code>Change Owed: 10</code></pre>\r\n        </ul>\r\n        <p>Вы можете выполнить приведенную ниже команду, чтобы проверить свой код с помощью <code>check50</code>,являющейся программой которой CS50 будет проверять ваш код при отправке. Но перед отправкой обязательно протестируйте свой код сами!</p>\r\n        <pre  class=\"highlight\"><code>check50 cs50/problems/2022/python/coke</code></pre>\r\n        <p>Зеленые смайлики означают, что ваша программа прошла проверку! Красные означают, что ваша программа выводит что-то неожиданное. Посетите URL-адрес, который выводит <code class=\"code\">check50</code>, чтобы увидеть ответ <code class=\"code\">check50</code>, переданный вашей программе, какой вывод она ожидала и какой вывод фактически выдала ваша программа.</p>\r\n        <details>\r\n            <summary>Подсказки</summary>\r\n            <ul>\r\n                <li>Следите за тем, чтобы подсказки и ответы печатались точно так, как показано выше. Если ваша программа напечатает какой-либо дополнительный текст, это может привести к сбою <code class=\"code\">check50</code>.</li>\r\n            </ul>\r\n        </details>\r\n        <h2>Как отправить</h2>\r\n        <p> В своем терминале выполните следующее, чтобы отправить свою работу.</p>\r\n        <pre class=\"highlight\"><code>submit50 cs50/problems/2022/python/coke</code></pre>\r\n    </main>\r\n</template>\r\n<style scoped>\r\n.pset {\r\n    width: 80%;\r\n}\r\n</style>","import { render } from \"./CokeMachine.vue?vue&type=template&id=685888de&scoped=true\"\nconst script = {}\n\nimport \"./CokeMachine.vue?vue&type=style&index=0&id=685888de&scoped=true&lang=css\"\n\nimport exportComponent from \"C:\\\\Users\\\\ммм\\\\Desktop\\\\cs50-python-ru\\\\cs50-python-ru\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-685888de\"]])\n\nexport default __exports__","<template>\r\n    <main>\r\n        <h1>Просто настройка моего twttr(Just setting up my twttr)</h1>\r\n        <blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">just setting up my twttr</p>— jack⚡️ (@jack) <a href=\"https://twitter.com/jack/status/20?ref_src=twsrc%5Etfw\">March 21, 2006</a></blockquote>\r\n        <p>При отправке текстовых сообщений или твитов нередко сокращают слова, чтобы сэкономить время или место, например, опуская гласные, так же, как Twitter изначально назывался twttr. В файле с именем <code class=\"code\">twttr.py</code> реализуйте программу, которая запрашивает у пользователя <code class=\"code\">str</code> текст, а затем выводит тот же текст, но без всех гласных (A, E, I, O и U), независимо от того, введены они в верхнем или нижнем регистре.</p>\r\n        <details>\r\n            <summary>Подсказки</summary>\r\n            <ul>\r\n                <li>Не забывайте, что <code class=\"code\">str</code> имеет несколько методов, согласно <a href=\"https://docs.python.org/3/library/stdtypes.html#string-methods\">docs.python.org/3/library/stdtypes.html#string-methods</a></li>\r\n                <li>Как и <code class=\"code\">list</code> - <code class=\"code\">str</code> является «итерируемым», что означает, что вы можете перебирать каждый из его символов в цикле. Например, если <code class=\"code\">s</code> - это <code class=\"code\">str</code>, вы можете напечатать каждый из его символов по одному с помощью такого кода:\r\n                <pre class=\"highlight\"><code>for c in s:\r\n    print(c, end=\"\")</code></pre>\r\n                </li>        \r\n            </ul>\r\n        </details>\r\n        <h2>Демо</h2>\r\n        <div id=\"asciicast-container-Nv6iLIjNIdxofiRExZ5K9mBHS\" class=\"asciicast\" style=\"display: block; float: none; overflow: hidden; padding: 0px; margin: 20px 0px;\"><iframe src=\"https://asciinema.org/a/Nv6iLIjNIdxofiRExZ5K9mBHS/iframe?autoplay=1&amp;loop=1&amp;cols=80&amp;rows=12\" id=\"asciicast-iframe-Nv6iLIjNIdxofiRExZ5K9mBHS\" name=\"asciicast-iframe-Nv6iLIjNIdxofiRExZ5K9mBHS\" scrolling=\"no\" allowfullscreen=\"true\" style=\"overflow: hidden; margin: 0px; border: 0px; display: inline-block; width: 100%; float: none; visibility: visible; height: 496px;\"></iframe></div>\r\n        <h2>Перед тем как приступить к заданию</h2>\r\n        <p>Перейдите по ссылке <a href=\"https://code.cs50.io/\">code.cs50.io</a> и зайдите в свой аккаунт. Выполните команду <code class=\"code\">cd</code> в вашем терминальном окне. Ваше терминальное окно должно выглядить как представлено ниже:</p>\r\n        <pre class=\"highlight\"><code>$</code></pre>\r\n        <p>Следующая команда</p>\r\n        <pre class=\"highlight\"><code>mkdir twttr</code></pre>\r\n        <p>создаст папку <code class=\"code\">twttr</code> в вашем рабочем пространстве.</p>\r\n        <p>Затем выполните</p>\r\n        <pre class=\"highlight\"><code>cd twttr</code></pre>\r\n        <p>чтобы изменить директорию в папке. Вы должны увидеть в терминале <code class=\"code\">twttr/ $</code>. Вы можете сейчас выполнить</p>\r\n        <pre class=\"highlight\"><code>code twttr.py</code> </pre>\r\n        <p>чтобы создать файл с именем , <code class=\"code\"> twttr.py</code>в котором вы будете писать свою программу.</p>\r\n        <h2>Как проверить</h2>\r\n        <p>Вот как протестировать код вручную:</p>\r\n        <ul>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python twttr.py</code>. Введите  <code class=\"code\">Twitter</code> и нажмите Enter. Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code> Twttr </code></pre>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python twttr.py</code>. Введите  <code class=\"code\">What's your name?</code> и нажмите Enter.Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>Wht's yr nm?</code></pre>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python twttr.py</code>. Введите  <code class=\"code\">CS50</code> и нажмите Enter.Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>CS50 </code></pre>\r\n        </ul>\r\n        <p>Вы можете выполнить приведенную ниже команду, чтобы проверить свой код с помощью <code>check50</code>,являющейся программой которой CS50 будет проверять ваш код при отправке. Но перед отправкой обязательно протестируйте свой код сами!</p>\r\n        <pre  class=\"highlight\"><code>check50 cs50/problems/2022/python/twttr\r\n</code></pre>\r\n        <p>Зеленые смайлики означают, что ваша программа прошла проверку! Красные означают, что ваша программа выводит что-то неожиданное. Посетите URL-адрес, который выводит <code class=\"code\">check50</code>, чтобы увидеть ответ <code class=\"code\">check50</code>, переданный вашей программе, какой вывод она ожидала и какой вывод фактически выдала ваша программа.</p>\r\n        <h2>Как отправить</h2>\r\n        <p> В своем терминале выполните следующее, чтобы отправить свою работу.</p>\r\n        <pre class=\"highlight\"><code>submit50 cs50/problems/2022/python/twttr</code></pre>\r\n    </main>\r\n</template>","import { render } from \"./JustTwttr.vue?vue&type=template&id=3867980c\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ммм\\\\Desktop\\\\cs50-python-ru\\\\cs50-python-ru\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n    <main>\r\n        <h1>Лекция 2</h1>\r\n        <ul>\r\n            <a href=\"#loops\"><li>Циклы</li></a>\r\n            <a href=\"#while-loops\"><li>Цикл while</li></a>\r\n            <a href=\"#for-loops\"><li>Цикл for</li></a>\r\n            <a href=\"#improving-with-user-input\"><li>Улучшение программы запросом данных от пользователя</li></a>\r\n            <a href=\"#more-about-lists\"><li>Больше о списках(list)</li></a>\r\n            <a href=\"#length\"><li>Длина</li></a>\r\n            <a href=\"#dictionaries\"><li>Словари(Dict)</li></a>\r\n            <a href=\"#mario\"><li>Марио</li></a>\r\n            <a href=\"#summing-up\"><li>Подводя итог</li></a>\r\n        </ul>\r\n        <h2 id=\"loops\">Циклы</h2>\r\n        <ul>\r\n            <li>По сути, циклы — это способ повторять что-то снова и снова.</li>\r\n            <li>Начните с ввода <code class=\"code\">code cat.py</code> в окне терминала.</li>\r\n            <li>В текстовом редакторе начните со следующего кода:</li>\r\n            <pre class=\"highlight\"><code>print(\"meow\")\r\nprint(\"meow\")\r\nprint(\"meow\")</code></pre>\r\n            <span>Запустив этот код и набрав <code class=\"code\">python cat.py</code>, вы заметите, что программа мяукает три раза.</span>\r\n            <li>Развиваясь как программист, вы захотите подумать, как можно улучшить области своего кода, где вы вводите одно и то же снова и снова. Представьте себе, что вам может захотеться «мяукать» 500 раз. Было бы логично, набирать одно и то же выражение print(\"meow\")снова и снова?</li>\r\n            <li>Циклы позволяют создавать блоки кода, которые выполняются снова и снова.</li>\r\n        </ul>\r\n        <h2 id=\"while-loops\">Цикл while</h2>\r\n        <ul>\r\n            <li>Цикл while почти универсален для всех языков кодирования.</li>\r\n            <li>Такой цикл будет повторять блок кода снова и снова.</li>\r\n            <li>В окне текстового редактора отредактируйте код следующим образом:</li>\r\n            <pre class=\"highlight\"><code>i = 3\r\nwhile i != 0:\r\n    print(\"meow\")</code></pre>\r\n            <p>Обратите внимание, хотя этот код будет выполнять команду print(\"meow\") несколько раз, он никогда не остановится! Он зациклиться навсегда. while цикл работает, многократно запрашивая, было ли выполнено условие цикла. В этом случае компилятор спрашивает « i не равно нулю?» Когда вы застреваете в цикле, который выполняется вечно, вы можете нажать control-c на клавиатуре, чтобы выйти из цикла.</p>\r\n            <li>Чтобы исправить этот цикл, который длится вечно, мы можем отредактировать наш код следующим образом.</li>\r\n<pre class=\"highlight\"><code>i = 3\r\nwhile i != 0:\r\n  print(\"meow\")\r\n  i = i - 1</code></pre>\r\n            <p>Обратите внимание, что теперь наш код выполняется правильно, уменьшая i на 1 каждую «итерацию» в цикле. Этот термин итерация имеет особое значение в программировании. Под итерацией мы подразумеваем один шаг в цикле. Первая итерация является «0-й» итерацией цикла. Вторая — это «1-я» итерация. В программировании мы считаем, начиная с 0, затем с 1, затем с 2.</p>\r\n            <li>Мы можем улучшить наш код следующим образом:</li>\r\n            <pre class=\"highlight\"><code>  i = 1\r\n  while i &lt; = 3:\r\n      print(\"meow\")\r\n      i = i + 1</code></pre>\r\n            <p>Обратите внимание, что когда мы кодируем, i = i + 1 мы присваиваем значение i справа налево. Выше мы начинаем i с единицы, как считает большинство людей (1, 2, 3). Если вы выполните приведенный выше код, вы увидите, как он мяукает три раза. В программировании рекомендуется начинать счет с нуля.</p>\r\n            <li>Мы можем улучшить наш код, чтобы начать считать с нуля:</li>\r\n            <pre class=\"highlight\"><code>i = 0\r\nwhile i &lt; 3:\r\n    print(\"meow\")\r\n    i += 1</code></pre>\r\n            <p>Обратите внимание, как изменение оператора на i  &lt; 3 позволяет нашему коду функционировать должным образом. Мы начинаем считать с 0, и цикл повторяется три раза, производя три мяу. Кроме того, обратите внимание, как i += 1 это то же самое, что сказать i = i + 1.</p>\r\n            <li>Наш код на данный момент проиллюстрирован следующим образом:</li>\r\n            <img src=\"../../assets/week2/note2_1.png\" alt=\"\">\r\n            <p>Обратите внимание, как наш цикл считает i до 3 не включая саму тройку.</p>\r\n        </ul>\r\n        <h2 id=\"for-loops\">Цикл for</h2>\r\n        <ul>\r\n            <li>Цикл <code class=\"code\">for</code> — это еще один тип цикла.</li>\r\n            <li>Чтобы лучше понять цикл <code class=\"code\">for</code>, лучше всего начать с обсуждения нового типа переменных, который в Python называется списком(<code class=\"code\">list</code>). Как и в других сферах нашей жизни, у нас может быть список покупок, список дел и т. д.</li>\r\n            <li>Цикл <code class=\"code\">for</code> перебирает список(<code class=\"code\">list</code>) элементов. Например, в окне текстового редактора измените код <code class=\"code\">cat.py</code> следующим образом:</li>\r\n            <pre class=\"highlight\"><code>for i in [0, 1, 2]:\r\n    print(\"meow\")</code></pre>\r\n            <p>Обратите внимание, насколько чистый этот код по сравнению с вашим предыдущим кодом с циклом <code class=\"code\">while</code>. В этом коде <code class=\"code\">i</code> начинается с <code class=\"\">0</code>, мяукает, <code class=\"code\">i</code> присваивается <code class=\"code\">1</code>, мяукает и, наконец, <code class=\"code\">i</code> присваивается <code class=\"code\">2</code>, мяукает, а затем завершается.</p>\r\n            <li>Хотя этот код выполняет то, что мы хотим, есть некоторые возможности улучшения нашего кода для крайних случаев. На первый взгляд наш код выглядит великолепно. Однако что, если вы хотите повторить до миллиона? Лучше всего создать код, который может работать с такими крайними случаями. Соответственно, мы можем улучшить наш код следующим образом:</li>\r\n            <pre class=\"highlight\"><code>for i in range(3):\r\n    print(\"meow\")</code></pre>\r\n            <p>Обратите внимание, как автоматически <code class=\"code\">range(3)</code> возвращает три значения <code class=\"code\">(0, 1, и 2)</code>. Этот код выполнится и произведет ожидаемый эффект, мяукнув три раза.</p>\r\n            <li>Наш код можно улучшить. Обратите внимание, что мы никогда не используем <code class=\"code\">i</code> явно в нашем коде. То есть, хотя Python нужен <code class=\"code\">i</code>, как место для хранения номера итерации цикла, мы никогда не используем его для каких-либо других целей. В Python, если переменная не имеет никакого другого значения в нашем коде, мы можем просто представить эту переменную как одиночное подчеркивание <code class=\"code\">_</code>. Таким образом, вы можете изменить свой код следующим образом:</li>\r\n            <pre class=\"highlight\"><code>for _ in range(3):\r\n    print(\"meow\")</code></pre>\r\n            <p>Обратите внимание, что изменение <code class=\"code\">i</code> на <code class=\"code\">_</code> не влияет на работу нашей программы.</p>\r\n            <li>Наш код можно улучшить. Чтобы изучить возможности Python, рассмотрите следующий код:</li>\r\n            <pre class=\"highlight\"><code>print(\"meow\" * 3)</code></pre>\r\n            <p>Обратите внимание, как он мяукает три раза, но программа выдаст <code class=\"code\">meowmeowmeow</code>. Подумайте: как бы вы могли сделать разрыв строки в конце каждого мяу?</p>\r\n            <li>Действительно, вы можете отредактировать свой код следующим образом:</li>\r\n            <pre class=\"highlight\"><code>print(\"meow\\n\" * 3, end=\"\")</code></pre>\r\n            <p>Обратите внимание, как этот код производит три мяуканья, каждое на отдельной строке. Добавляя <code class=\"code\">end=\"\"</code> и <code class=\"code\">\\n</code> мы указываем компилятору добавлять разрыв строки в конце каждого мяу.</p>\r\n        </ul>\r\n        <h2 id=\"improving-with-user-input\">Улучшение программы запросом данных от пользователя</h2>\r\n        <ul>\r\n            <li>Возможно, мы хотим получить информацию от нашего пользователя. Мы можем использовать циклы как способ проверки ввода пользователя.</li>\r\n            <li>Распространенной парадигмой в Python является использование <code class=\"code\">while</code> цикла для проверки ввода пользователя.</li>\r\n            <li>Например, давайте попробуем запросить у пользователя число больше или равное 0:</li>\r\n            <pre class=\"highlight\"><code>while True:\r\n    n = int(input(\"What's n? \"))\r\n    if n &lt; 0:\r\n        continue\r\n    else:\r\n        break</code></pre>\r\n            <li>Обратите внимание, что мы ввели два новых ключевых слова в Python <code class=\"code\">continue</code> и <code class=\"code\">break</code>. <code class=\"cpde\">continue</code> явно указывает Python перейти к следующей итерации цикла. <code class=\"code\">break</code>, с другой стороны, говорит Python «вырваться» из цикла раньше, чем он завершит все свои итерации. В этом случае мы перейдем к следующей(<code class=\"code\">continue</code>) итерации цикла, когда n меньше 0, — в конечном итоге повторно задав пользователю вопрос «What's is n?». Если, тем не менее, n больше или равно 0, мы выходим( <code class=\"code\">break</code>) из цикла и разрешаем выполнение остальной части нашей программы.</li>\r\n            <li>Получается, что  <code class=\"code\">continue</code> ключевое слово в данном случае лишнее. Мы можем улучшить наш код следующим образом:</li>\r\n            <pre class=\"highlight\"><code>while True:\r\n    n = int(input(\"What's n? \"))\r\n    if n > 0:\r\n        break\r\n\r\nfor _ in range(n):\r\n    print(\"meow\")</code></pre>\r\n            <p>Обратите внимание, что этот цикл <code class=\"code\">while</code> будет выполняться бесконечно, пока <code class=\"code\">n</code> больше, чем <code class=\"code\">0</code>. Когда <code class=\"code\">n</code> больше <code class=\"code\">0</code>, цикл прерывается.</p>\r\n            <li>Используя наши предыдущие знания, мы можем использовать функции для дальнейшего улучшения нашего кода:</li>\r\n            <pre class=\"highlight\"><code>def main():\r\n    number = get_number()\r\n    meow(number)\r\n\r\ndef get_number():\r\n    while True:\r\n        n = int(input(\"What's n? \"))\r\n        if n > 0:\r\n            break\r\n    return n\r\n\r\ndef meow(n):\r\n    for _ in range(n):\r\n        print(\"meow\")</code></pre>\r\n            <p>Обратите внимание, что мы не только изменили ваш код для работы с несколькими функциями, но также использовали оператор <code class=\"code\">return</code>, чтобы вернуть значение <code class=\"code\">n</code> в основную функцию.</p>\r\n        </ul>\r\n        <h2 id=\"more-about-lists\">Больше о списках(list)</h2>\r\n        <ul>\r\n            <li>Рассмотрим мир Хогвартса из знаменитой вселенной Гарри Поттера.</li>\r\n            <li>В терминале введите <code class=\"code\">code hogwarts.py</code>.</li>\r\n            <li>В текстовом редакторе введите следующий код:</li>\r\n            <pre class=\"highlight\"><code>students = [\"Hermoine\", \"Harry\", \"Ron\"]\r\n\r\nprint(students[0])\r\nprint(students[1])\r\nprint(students[2])</code></pre>\r\n            <p>Обратите внимание, что у нас есть <code class=\"code\">list</code> учеников с именами, как указано выше. Затем мы печатаем ученицу, которая находится на 0-м месте, «Гермиона». Остальные ученики печатаются также.</p>\r\n            <li>Как мы показали ранее, мы можем использовать цикл для перебора списка. Вы можете улучшить свой код следующим образом:</li>\r\n            <pre class=\"highlight\"><code>students = [\"Hermoine\", \"Harry\", \"Ron\"]\r\n\r\nfor student in students:\r\n    print(student)</code></pre>\r\n            <p>Обратите внимание, что для каждого <code class=\"code\">student</code> в списке <code class=\"code\">students</code> будет напечатан студент, как и предполагалось. Вы можете задаться вопросом, почему мы не использовали <code class=\"code\">_</code>, как обсуждалось ранее. Мы решили не делать этого, потому что <code class=\"code\">student</code> явно используется в нашем коде.</p>\r\n            <li>Вы можете узнать больше в документации по Python о <a href=\"https://docs.python.org/3/tutorial/datastructures.html#more-on-lists\">списках</a>.</li>\r\n        </ul>\r\n        <h2 id=\"length\">Длина</h2>\r\n        <ul>\r\n            <li>Мы можем использовать <code class=\"code\">len</code> как способ проверки длины списка(<code class=\"code\">list</code>) c названием <code class=\"code\">students</code>.</li>\r\n            <li>Представьте, что вы хотите напечатать не только имя студента, но и его позицию в списке. Для этого вы можете отредактировать свой код следующим образом:</li>\r\n            <pre class=\"highlight\"><code>students = [\"Hermoine\", \"Harry\", \"Ron\"]\r\n\r\nfor i in range(len(students)):\r\n    print(i + 1, students[i])</code></pre>\r\n            <p>Обратите внимание, что результатом выполнение этого кода,является не только получение позиции каждого учащегося с помощью i + 1, но и вывод имени каждого учащегося. <code class=\"code\">len</code> позволяют вам динамически видеть, насколько длинный список студентов, независимо от того, насколько он растет.</p>\r\n            <li>Вы можете узнать больше в документации по Python о <a href=\"https://docs.python.org/3/tutorial/datastructures.html#more-on-lists\">len</a></li>\r\n        </ul>\r\n        <h2 id=\"dictionaries\">Словари(Dict)</h2>\r\n        <ul>\r\n            <li>dict или словари — это структура данных, позволяющая связывать ключи со значениями.</li>\r\n            <li>Если <code class=\"code\">list</code> - это множество значений, то <code class=\"code\">dict</code> связывает ключ со значением.</li>\r\n            <li>Рассматривая факультеты Хогвартса, мы могли бы распределить конкретных студентов по конкретным факультетам.</li>\r\n            <img src=\"https://cs50.harvard.edu/python/2022/notes/2/cs50pWeek2Slide17.png\">\r\n            <li>Для этого мы могли бы использовать <code class=\"code\">list</code>:</li>\r\n            <pre class=\"highlight\"><code>students = [\"Hermoine\", \"Harry\", \"Ron\", \"Draco\"]\r\nhouses = [\"Gryffindor\", \"Gryffindor\", \"Griffindor\", \"Slytherin\"]</code></pre>\r\n            <p>Обратите внимание, что мы можем пообещать, что всегда будем поддерживать порядок в этих списках. Человек на первой позиции <code class=\"code\">students</code> связан с домом на первой позиции в списке <code class=\"code\">houses</code> и так далее. Однако это может стать довольно громоздким по мере роста наших списков!</p>\r\n            <li>Мы можем улучшить наш код, используя <code class=\"code\">dict</code> следующим образом:</li>\r\n            <pre class=\"highlight\"><code>students = {\r\n    \"Hermoine\": \"Gryffindor\",\r\n    \"Harry\": \"Gryffindor\",\r\n    \"Ron\": \"Gryffindor\",\r\n    \"Draco\": \"Slytherin\",\r\n}\r\nprint(students[\"Hermoine\"])\r\nprint(students[\"Harry\"])\r\nprint(students[\"Ron\"])\r\nprint(students[\"Draco\"])</code></pre>\r\n            <p>Обратите внимание, как мы используем <code class=\"code\">{}</code> фигурные скобки для создания словаря. Там, где list использует числа для перебора списка, dict позволяет нам использовать слова.</p>\r\n            <li>Запустите свой код и убедитесь, что ваш вывод выглядит следующим образом:</li>\r\n            <pre class=\"highlight\"><code>$ python hogwarts.py\r\nGryffindor\r\nGryffindor\r\nGryffindor\r\nSlytherin</code></pre>\r\n            <li>Мы можем улучшить наш код следующим образом:</li>\r\n            <pre class=\"highlight\"><code>students = {\r\n    \"Hermoine\": \"Gryffindor\",\r\n    \"Harry\": \"Gryffindor\",\r\n    \"Ron\": \"Gryffindor\",\r\n    \"Draco\": \"Slytherin\",\r\n}\r\nfor student in students:\r\n    print(student)</code></pre>\r\n            <p>Обратите внимание, что при выполнении этого кода цикл <code class=\"code\">for</code> будет перебирать только ключи, в результате чего появится список имен учеников. Как мы можем распечатать и значения, и ключи?</p>\r\n            <li>Измените код следующим образом:</li>\r\n            <pre class=\"highlight\"><code>students = {\r\n    \"Hermoine\": \"Gryffindor\",\r\n    \"Harry\": \"Gryffindor\",\r\n    \"Ron\": \"Gryffindor\",\r\n    \"Draco\": \"Slytherin\",\r\n}\r\nfor student in students:\r\n    print(student, students[student])</code></pre>\r\n            <p>Обратите внимание, как <code class=\"code\">students[student]</code> будет идти к ключу(ученикам) и находить значения(их дома). Выполните свой код, и вы заметите, что вывод немного запутан.</p>\r\n            <li>Мы можем очистить функцию печати, улучшив наш код следующим образом:</li>\r\n            <pre class=\"highlight\"><code>students = {\r\n    \"Hermoine\": \"Gryffindor\",\r\n    \"Harry\": \"Gryffindor\",\r\n    \"Ron\": \"Gryffindor\",\r\n    \"Draco\": \"Slytherin\",\r\n}\r\nfor student in students:\r\n    print(student, students[student], sep=\", \")</code></pre>\r\n            <p>Обратите внимание, как это создает четкое разделение , между каждым напечатанным элементом.</p>\r\n            <li>Если вы выполните <code class=\"code\">python hogwarts.py</code>, вы должны увидеть следующее:</li>\r\n            <pre class=\"highlight\"><code>$ python hogwarts.py\r\nHermoine, Gryffindor\r\nHarry, Gryffindor\r\nRon, Gryffindor\r\nDraco, Slytherin</code></pre>\r\n            <li>Что, если у нас будет больше информации о наших студентах? Как бы мы могли связать больше данных с каждым из студентов?</li>\r\n            <img src=\"https://cs50.harvard.edu/python/2022/notes/2/cs50pWeek2Slide18.png\" alt=\"\">\r\n            <li>Вы можете себе представить, что хотите иметь много данных, связанных с несколькими вещами с одним ключом. Улучшите свой код следующим образом:</li>\r\n            <pre class=\"highlight\"><code>students = [\r\n    {\"name\": \"Hermoine\", \"house\": \"Gryffindor\", \"patronus\": \"Otter\"},\r\n    {\"name\": \"Harry\", \"house\": \"Gryffindor\", \"patronus\": \"Stag\"},\r\n    {\"name\": \"Ron\", \"house\": \"Gryffindor\", \"patronus\": \"Jack Russell terrier\"},\r\n    {\"name\": \"Draco\", \"house\": \"Slytherin\", \"patronus\": None},\r\n]</code></pre>\r\n            <p> Обратите внимание, как этот код создает список словарей. В <code class=\"code\">list</code> с названием students четыре <code class=\"code\">dicts</code>: по одному на каждого ученика. Также обратите внимание, что Python имеет специальное None обозначение, в котором нет значения, связанного с ключом.</p>\r\n            <li>Теперь у вас есть доступ к целому ряду интересных данных об этих студентах. Теперь измените код следующим образом:</li>\r\n            <pre class=\"highlight\"><code>students = [\r\n    {\"name\": \"Hermoine\", \"house\": \"Gryffindor\", \"patronus\": \"Otter\"},\r\n    {\"name\": \"Harry\", \"house\": \"Gryffindor\", \"patronus\": \"Stag\"},\r\n    {\"name\": \"Ron\", \"house\": \"Gryffindor\", \"patronus\": \"Jack Russell terrier\"},\r\n    {\"name\": \"Draco\", \"house\": \"Slytherin\", \"patronus\": None},\r\n]\r\n\r\nfor student in students:\r\n    print(student[\"name\"], student[\"house\"], student[\"patronus\"], sep=\", \")</code></pre>\r\n            <p>Обратите внимание, как цикл <code class=\"code\">for</code> будет перебирать каждый из dicts внутри list с названием students.</p>\r\n            <li>Вы можете узнать больше в документации по Python о <a href=\"https://docs.python.org/3/tutorial/datastructures.html#dictionaries\">словарях</a>.</li>\r\n        </ul>\r\n        <h2 id=\"mario\">Марио</h2>\r\n        <li>Помните, что в классической игре Марио герой прыгает по кирпичам. Давайте создадим текстовое представление этой игры.</li>\r\n        <img src=\"https://cs50.harvard.edu/python/2022/notes/2/cs50pWeek2Slide21.png\" alt=\"\">\r\n        <li>Начните программу следующим образом:</li>\r\n            <pre class=\"highlight\"><code>print(\"#\")\r\nprint(\"#\")\r\nprint(\"#\")</code></pre>\r\n            <p>Обратите внимание, как мы снова и снова копируем и вставляем один и тот же код.</p>\r\n            <li>Рассмотрим, как мы могли бы улучшить код следующим образом:</li>\r\n            <pre class=\"highlight\"><code>for _ in range(3):\r\n    print(\"#\")</code></pre>\r\n            <p>Обратите внимание, как это по выполняет то, что мы хотим.</p>\r\n            <li>Подумайте: можем ли мы дальше абстрагироваться для решения более сложных задач с помощью этого кода? Измените код следующим образом:</li>\r\n            <pre class=\"highlight\"><code>def main():\r\n    print_column(3)\r\n\r\ndef print_column(height):\r\n    for _ in range(height):\r\n        print(\"#\")\r\n\r\nmain()</code></pre>\r\n            <p>Обратите внимание, как наша колонка может расти настолько, насколько мы хотим, без какого-либо жесткого кодирования.</p>\r\n            <li>Теперь давайте попробуем напечатать строку по горизонтали. Измените код следующим образом:</li>\r\n            <pre class=\"highlight\"><code>def main():\r\n    print_row(4)\r\n\r\ndef print_row(width):\r\n    print(\"?\" * width)\r\n\r\nmain()</code></pre>\r\n            <p>Обратите внимание, что теперь у нас есть код, который может создавать блоки слева направо.</p>\r\n            <li>Изучая слайд ниже, обратите внимание, что у Марио есть как ряды, так и столбцы блоков.</li>\r\n            <img src=\"https://cs50.harvard.edu/python/2022/notes/2/cs50pWeek2Slide24.png\" alt=\"\">\r\n            <li>Подумайте, как мы могли бы реализовать и строки, и столбцы в нашем коде? Измените код следующим образом:</li>\r\n            <pre class=\"highlight\"><code>def main():\r\n    print_square(3)\r\n\r\ndef print_square(size):\r\n    # For each row in square\r\n    for i in range(size):\r\n        # For each brick in row\r\n        for j in range(size):\r\n            #  Print brick\r\n            print(\"#\", end=\"\")\r\n        # Print blank line\r\n        print()\r\n\r\nmain()</code></pre>\r\n            <p>Обратите внимание, что у нас есть внешний цикл, который обращается к каждой строке в квадрате. Затем у нас есть внутренний цикл, который печатает кирпич в каждой строке. Наконец, у нас есть оператор <code class=\"code\">print</code>, который печатает пустую строку.</p>\r\n            <li>Мы можем еще больше абстрагироваться от нашего кода:</li>\r\n            <pre class=\"highlight\"><code>def main():\r\n    print_square(3)\r\n\r\ndef print_square(size):\r\n    for i in range(size):\r\n        print_row(size)\r\n\r\ndef print_row(width):\r\n    print(\"#\" * width)\r\n\r\nmain()</code></pre>\r\n        <h2 id=\"summing-up\">Подводя итог</h2>\r\n        <p>Теперь у вас есть возможность в Python использовать условные операторы, чтобы задавать вопросы, и ваша программа выполняет соответствующие действия. В этой лекции мы обсудили…</p>\r\n        <ul>\r\n            <li>Loops</li>\r\n            <li><code class=\"code\">while</code></li>\r\n            <li><code class=\"code\">for</code></li>\r\n            <li><code class=\"code\">len</code></li>\r\n            <li><code class=\"code\">list</code></li>\r\n            <li><code class=\"code\">dict</code></li>\r\n        </ul>\r\n    </main>\r\n</template>","import { render } from \"./Notes2View.vue?vue&type=template&id=b569f048\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ммм\\\\Desktop\\\\cs50-python-ru\\\\cs50-python-ru\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n    <main>\r\n        <h1>Пищевая ценность(Nutrition Facts)</h1>\r\n        <p>Управление по санитарному надзору за качеством пищевых продуктов и медикаментов США (FDA) предлагает <a href=\"https://www.fda.gov/food/food-labeling-nutrition/nutrition-information-raw-fruits-vegetables-and-fish\"> загружаемые/распечатываемые плакаты</a>, которые «показывают информацию о пищевой ценности 20 наиболее часто потребляемых сырых фруктов… в Соединенных Штатах. Розничные магазины могут загружать плакаты, распечатывать, демонстрировать и/или распространять их среди потребителей в непосредственной близости от соответствующих продуктов питания в магазинах».</p>\r\n        <p>В файле с именем <code class=\"code\">nutrition.py</code> реализуйте программу, которая предлагает потребителям ввести фрукт (без учета регистра), а затем выводит количество калорий в одной порции этого фрукта в соответствии с <a href=\"https://cs50.harvard.edu/python/2022/psets/2/nutrition/Nutrition-Information-for-Raw-Fruits---small-PDF-Poster.pdf\">плакатом FDA</a> для фруктов , который также <a href=\"https://www.fda.gov/food/food-labeling-nutrition/raw-fruits-poster-text-version-accessible-version\">доступен в виде текста</a>. Помимо заглавных букв, предположим, что пользователи будут вводить фрукты точно так, как написано на плакате (например, strawberries, а не strawberry). Игнорируйте любые входные данные, которые не являются фруктами.</p>\r\n        <details>\r\n            <summary>Подсказки</summary>\r\n            <ul>\r\n                <li>Вместо того, чтобы использовать условное выражение с 20 булевыми выражениями, по одному для каждого фрукта, лучше использовать , dict чтобы связать фрукт с его калориями!</li>\r\n                <li>Если k это str и d это dict, вы можете проверить, является ли k ключом d с помощью кода, например:</li>\r\n                <pre class=\"highlight\"><code>if k in d:\r\n    ...</code></pre>\r\n                <li>Следите за тем, чтобы выводить калории фруктов, а не калории жира!</li>\r\n            </ul>\r\n        </details>\r\n        <h2>Демо</h2>\r\n        <div id=\"asciicast-container-l1yGc9HCul10e7VAp0nmLZNNY\" class=\"asciicast\" style=\"display: block; float: none; overflow: hidden; padding: 0px; margin: 20px 0px;\"><iframe src=\"https://asciinema.org/a/l1yGc9HCul10e7VAp0nmLZNNY/iframe?autoplay=1&amp;loop=1&amp;cols=80&amp;rows=12\" id=\"asciicast-iframe-l1yGc9HCul10e7VAp0nmLZNNY\" name=\"asciicast-iframe-l1yGc9HCul10e7VAp0nmLZNNY\" scrolling=\"no\" allowfullscreen=\"true\" style=\"overflow: hidden; margin: 0px; border: 0px; display: inline-block; width: 100%; float: none; visibility: visible; height: 492px;\"></iframe></div>\r\n        <h2>Перед тем как приступить к заданию</h2>\r\n        <p>Перейдите по ссылке <a href=\"https://code.cs50.io/\">code.cs50.io</a> и зайдите в свой аккаунт. Выполните команду <code class=\"code\">cd</code> в вашем терминальном окне. Ваше терминальное окно должно выглядить как представлено ниже:</p>\r\n        <pre class=\"highlight\"><code>$</code></pre>\r\n        <p>Следующая команда</p>\r\n        <pre class=\"highlight\"><code>mkdir nutrition</code></pre>\r\n        <p>создаст папку <code class=\"code\">nutrition</code> в вашем рабочем пространстве.</p>\r\n        <p>Затем выполните</p>\r\n        <pre class=\"highlight\"><code>cd nutrition</code></pre>\r\n        <p>чтобы изменить директорию в папке. Вы должны увидеть в терминале <code class=\"code\">nutrition/ $</code>. Вы можете сейчас выполнить</p>\r\n        <pre class=\"highlight\"><code>code nutrition.py</code> </pre>\r\n        <p>чтобы создать файл с именем , <code class=\"code\"> nutrition.py</code>в котором вы будете писать свою программу.</p>\r\n        <h2>Как проверить</h2>\r\n        <p>Вот как протестировать код вручную:</p>\r\n        <ul>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python nutrition.py</code>. Введите  <code class=\"code\">Apple</code> и нажмите Enter. Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code> Calories: 130 </code></pre>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python nutrition.py</code>. Введите  <code class=\"code\">Avocado</code> и нажмите Enter.Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code> Calories: 50</code></pre>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python nutrition.py</code>. Введите  <code class=\"code\">Sweet Cherries</code> и нажмите Enter.Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>Calories: 100 </code></pre>\r\n            <li>Запустите вашу программу с помощью python nutrition.py. Введите Tomato и нажмите Enter. Ваша программа не должна ничего выводить.</li>\r\n        </ul>\r\n        <p>Обязательно попробуйте другие фрукты и измените оболочку вашего ввода. Ваша программа должна вести себя так, как ожидалось, без учета регистра.</p>\r\n        <p>Вы можете выполнить приведенную ниже команду, чтобы проверить свой код с помощью <code>check50</code>,являющейся программой которой CS50 будет проверять ваш код при отправке. Но перед отправкой обязательно протестируйте свой код сами!</p>\r\n        <pre  class=\"highlight\"><code>check50 cs50/problems/2022/python/nutrition\r\n</code></pre>\r\n        <p>Зеленые смайлики означают, что ваша программа прошла проверку! Красные означают, что ваша программа выводит что-то неожиданное. Посетите URL-адрес, который выводит <code class=\"code\">check50</code>, чтобы увидеть ответ <code class=\"code\">check50</code>, переданный вашей программе, какой вывод она ожидала и какой вывод фактически выдала ваша программа.</p>\r\n        <h2>Как отправить</h2>\r\n        <p> В своем терминале выполните следующее, чтобы отправить свою работу.</p>\r\n        <pre class=\"highlight\"><code>submit50 cs50/problems/2022/python/nutrition</code></pre>\r\n    </main>\r\n</template>","import { render } from \"./NutritionFacts.vue?vue&type=template&id=4fff2e44\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ммм\\\\Desktop\\\\cs50-python-ru\\\\cs50-python-ru\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n    <main>\r\n        <h1>Набор проблем 2</h1>\r\n        <h2>Что нужно делать</h2>\r\n        <ol>\r\n            <li>Войдите в <a href=\"https://code.cs50.io/\"> code.cs50.io</a>, облачную версию Visual Studio Code (VS Code), которая предоставляет собственное  кодовое пространство(Codespace) со всем что нужно для прохождения курса . Не нужно скачивать и устанавливать VS Code или Python на свой Mac или ПК!</li>\r\n            <li>Выполните update50 в окне терминала вашего Codespace, чтобы убедиться, что ваше пространство кода обновлено, при появлении запроса нажмите <b>Rebuild now</b>.</li>\r\n            <li>\r\n                <span>Отправьте все проблемы приведенные ниже:</span>\r\n                <ul>\r\n                    <li><router-link to=\"/2/camel/\">camelCase</router-link> </li>\r\n                    <li><router-link to=\"/2/coke/\">Coke Machine</router-link> </li>\r\n                    <li><router-link to=\"/2/twttr/\">Just setting up my twttr</router-link> </li>\r\n                    <li><router-link to=\"/2/plates/\">Vanity Plates</router-link> </li>\r\n                    <li><router-link to=\"/2/nutrition/\">Nutrition Facts</router-link> </li>\r\n                </ul>\r\n            </li>\r\n        </ol>\r\n    </main>\r\n</template>\r\n<style scoped>\r\nmain {\r\n    height: 100vh;\r\n}\r\n</style>","import { render } from \"./Psets2View.vue?vue&type=template&id=27d202ee&scoped=true\"\nconst script = {}\n\nimport \"./Psets2View.vue?vue&type=style&index=0&id=27d202ee&scoped=true&lang=css\"\n\nimport exportComponent from \"C:\\\\Users\\\\ммм\\\\Desktop\\\\cs50-python-ru\\\\cs50-python-ru\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-27d202ee\"]])\n\nexport default __exports__","<template>\r\n    <main>\r\n        <h1>Vanity Plates</h1>        \r\n        <img src=\"https://cs50.harvard.edu/python/2022/psets/2/plates/plate.png\" alt=\"\">\r\n        <p>В штате Массачусетс, где находится Гарвардский университет, можно запросить <a href=\"https://www.mass.gov/how-to/request-a-vanity-license-plate\">эксклюзивный номерной знак</a> для вашего автомобиля с выбранными вами буквами и цифрами вместо случайных. Однако среди требований:</p>\r\n        <ul>\r\n            <li>«Все эксклюзивные номерные знаки должны начинаться как минимум с двух букв».</li>\r\n            <li>«… таблички для номерных знаков могут содержать не более 6 и не менее 2 символов(букв или цифр)».</li>\r\n            <li>«Числа нельзя использовать в середине номерных знаков, они должны быть в конце. Например, AAA222 будет приемлемым… номерным знаком; AAA22A неприемлем. Первое используемое число не может быть «0».</li>\r\n            <li>«Точки, пробелы и знаки препинания не допускаются».</li>\r\n        </ul>\r\n        <p>В <code class=\"code\">plates.py</code>, реализуйте программу, которая запрашивает у пользователя номерной знак, а затем выводит результат <code class=\"code\">Valid</code>если он соответствует всем требованиям или <code class=\"code\">Invalid</code> если нет. Предположим, что любые буквы вводимые пользователем будут в верхнем регистре. Структурируйте свою программу в соответствии с приведенным ниже кодом, при этом <code class=\"code\">is_valid</code> возвращает <code class=\"code\">True</code> если все требования соблюдены, а <code class=\"code\">False</code> если нет. Предположим, что <code class=\"code\">s</code> это будет <code class=\"code\">str</code>. Вы можете реализовать дополнительные функции для <code class=\"code\">is_valid</code> вызова (например, по одной функции на каждое требование).</p>\r\n        <pre class=\"highlight\"><code>def main():\r\n    plate = input(\"Plate: \")\r\n    if is_valid(plate):\r\n        print(\"Valid\")\r\n    else:\r\n        print(\"Invalid\")\r\n\r\ndef is_valid(s):\r\n    ...\r\n\r\nmain()</code></pre>\r\n        <details>\r\n            <summary>Подсказки</summary>\r\n            <ul>\r\n                <li>Не забывайте, что <code class=\"code\">str</code> имеет несколько методов, согласно <a href=\"https://docs.python.org/3/library/stdtypes.html#string-methods\">docs.python.org/3/library/stdtypes.html#string-methods</a></li>\r\n                <li>Подобно list str представляет собой «последовательность» (символов), что означает, что ее можно <a href=\"https://docs.python.org/3/library/stdtypes.html#common-sequence-operations\">«нарезать»</a> на более короткие строки с синтаксисом вроде s[i:j]. Например, если s = \"CS50\", то s[0:2] будет \"CS\". (Это называлется срезом)\r\n                </li>        \r\n            </ul>\r\n        </details>\r\n        <h2>Демо</h2>\r\n        <div id=\"asciicast-container-w851L8m3HFuSVcHslP4DGKELp\" class=\"asciicast\" style=\"display: block; float: none; overflow: hidden; padding: 0px; margin: 20px 0px;\"><iframe src=\"https://asciinema.org/a/w851L8m3HFuSVcHslP4DGKELp/iframe?autoplay=1&amp;loop=1&amp;cols=80&amp;rows=12\" id=\"asciicast-iframe-w851L8m3HFuSVcHslP4DGKELp\" name=\"asciicast-iframe-w851L8m3HFuSVcHslP4DGKELp\" scrolling=\"no\" allowfullscreen=\"true\" style=\"overflow: hidden; margin: 0px; border: 0px; display: inline-block; width: 100%; float: none; visibility: visible; height: 482px;\"></iframe></div>\r\n        <h2>Перед тем как приступить к заданию</h2>\r\n        <p>Перейдите по ссылке <a href=\"https://code.cs50.io/\">code.cs50.io</a> и зайдите в свой аккаунт. Выполните команду <code class=\"code\">cd</code> в вашем терминальном окне. Ваше терминальное окно должно выглядить как представлено ниже:</p>\r\n        <pre class=\"highlight\"><code>$</code></pre>\r\n        <p>Следующая команда</p>\r\n        <pre class=\"highlight\"><code>mkdir plates</code></pre>\r\n        <p>создаст папку <code class=\"code\">plates</code> в вашем рабочем пространстве.</p>\r\n        <p>Затем выполните</p>\r\n        <pre class=\"highlight\"><code>cd plates</code></pre>\r\n        <p>чтобы изменить директорию в папке. Вы должны увидеть в терминале <code class=\"code\">plates/ $</code>. Вы можете сейчас выполнить</p>\r\n        <pre class=\"highlight\"><code>code plates.py</code> </pre>\r\n        <p>чтобы создать файл с именем , <code class=\"code\"> plates.py</code>в котором вы будете писать свою программу.</p>\r\n        <h2>Как проверить</h2>\r\n        <p>Вот как протестировать код вручную:</p>\r\n        <ul>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python plates.py</code>. Введите  <code class=\"code\">CS50</code> и нажмите Enter. Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code> Valid </code></pre>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python plates.py</code>. Введите  <code class=\"code\">CS05</code> и нажмите Enter.Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>Invalid</code></pre>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python plates.py</code>. Введите  <code class=\"code\">CS50P</code> и нажмите Enter.Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>Invalid </code></pre>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python plates.py</code>. Введите  <code class=\"code\">PI3.14</code> и нажмите Enter.Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>Invalid </code></pre>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python plates.py</code>. Введите  <code class=\"code\">H</code> и нажмите Enter.Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>Invalid </code></pre>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python plates.py</code>. Введите  <code class=\"code\">OUTATIME</code> и нажмите Enter.Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>Invalid </code></pre>\r\n        </ul>\r\n        <p>Вы можете выполнить приведенную ниже команду, чтобы проверить свой код с помощью <code>check50</code>,являющейся программой которой CS50 будет проверять ваш код при отправке. Но перед отправкой обязательно протестируйте свой код сами!</p>\r\n        <pre  class=\"highlight\"><code>check50 cs50/problems/2022/python/plates\r\n</code></pre>\r\n        <p>Зеленые смайлики означают, что ваша программа прошла проверку! Красные означают, что ваша программа выводит что-то неожиданное. Посетите URL-адрес, который выводит <code class=\"code\">check50</code>, чтобы увидеть ответ <code class=\"code\">check50</code>, переданный вашей программе, какой вывод она ожидала и какой вывод фактически выдала ваша программа.</p>\r\n        <h2>Как отправить</h2>\r\n        <p> В своем терминале выполните следующее, чтобы отправить свою работу.</p>\r\n        <pre class=\"highlight\"><code>submit50 cs50/problems/2022/python/plates</code></pre>\r\n    </main>\r\n</template>","import { render } from \"./VanityPlates.vue?vue&type=template&id=3dfcb1de\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ммм\\\\Desktop\\\\cs50-python-ru\\\\cs50-python-ru\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n    <main>\r\n        <h1>Felipe's Taqueria</h1>\r\n        <p>Одним из самых популярных мест, где можно поесть на <a href=\"https://en.wikipedia.org/wiki/Harvard_Square\">Гарвардской площади</a>, является Felipe's Taqueria, где предлагается <a href=\"https://www.felipesboston.com/menu\">меню</a> основных блюд, как показано в <code class=\"code\">dict</code> ниже, где значение каждого ключа это цена в долларах:</p>\r\n        <pre class=\"highlight\"><code>{\r\n    \"Baja Taco\": 4.00,\r\n    \"Burrito\": 7.50,\r\n    \"Bowl\": 8.50,\r\n    \"Nachos\": 11.00,\r\n    \"Quesadilla\": 8.50,\r\n    \"Super Burrito\": 8.50,\r\n    \"Super Quesadilla\": 9.50,\r\n    \"Taco\": 3.00,\r\n    \"Tortilla Salad\": 8.00\r\n}</code></pre>\r\n        <p>В файле с именем <code class=\"code\">taqueria.py</code> реализуйте программу, которая позволяет пользователю размещать заказ, предлагая ему ввести по одному блюду в строке, до тех пор, пока пользователь не введет control-d (что является распространенным способом завершения ввода в программу). После каждого введенного элемента отобразите общую стоимость всех введенных элементов со знаком доллара <code class=\"code\">($)</code> в начале и отформатируйте до двух знаков после запятой. Не обращайте внимание на регистр ввода пользователя. Игнорируйте любой ввод, который не является элементом из словаря. Предположим, что каждый пункт меню будет иметь <a href=\"https://docs.python.org/3/library/stdtypes.html#str.title\">заглавную букву</a>.</p>\r\n        <details>\r\n            <summary>Подсказки</summary>\r\n            <ul>\r\n                <li>Обратите внимание, что вы можете определить, когда пользователь ввел control-d, перехватив <a href=\"https://docs.python.org/3/library/exceptions.html#EOFError\">EOFError</a> такой код:</li>\r\n                <pre class=\"highlight\"><code>try:\r\n    item = input()\r\nexcept EOFError:\r\n    ...</code></pre>\r\n                <span>Возможно, вы захотите напечатать новую строку, чтобы курсор пользователя (и последующее приглашение) не оставался на той же строке, что и собственное приглашение вашей программы.</span>\r\n                <li>Ввод control-d также не требует ввода Enter, поэтому курсор пользователя (и последующий запрос) может оставаться на той же строке, на которой ваша программа делает запрос. Вы можете переместить курсор пользователя на новую строку, напечатав \\n!</li>\r\n                <li>Обратите внимание, что у <code class=\"code\">dict</code> есть несколько методов <a href=\"https://docs.python.org/3/library/stdtypes.html#mapping-types-dict\">docs.python.org/3/library/stdtypes.html#mapping-types-dict</a>, среди которых и метод <code class=\"code\">get</code>, а также он поддерживает такие операции, как:</li>\r\n                <pre class=\"highlight\"><code>d[key]</code></pre>\r\n                <span>и</span>\r\n                <pre class=\"highlight\"><code>if key in d:\r\n    ...</code></pre>\r\n                <span>где <code class=\"code\">d</code> это <code class=\"code\">dict</code> и <code class=\"code\">key</code> это <code class=\"code\">str</code>.</span>\r\n                <li>Удостоверьтесь, что избежали или поймали  KeyError.</li>\r\n            </ul>\r\n        </details>\r\n        <h2>Демо</h2>\r\n        <div id=\"asciicast-container-J20VZsCKXRPoavI0nFwCreRmr\" class=\"asciicast\" style=\"display: block; float: none; overflow: hidden; padding: 0px; margin: 20px 0px;\"><iframe src=\"https://asciinema.org/a/J20VZsCKXRPoavI0nFwCreRmr/iframe?autoplay=1&amp;loop=1&amp;cols=80&amp;rows=12\" id=\"asciicast-iframe-J20VZsCKXRPoavI0nFwCreRmr\" name=\"asciicast-iframe-J20VZsCKXRPoavI0nFwCreRmr\" scrolling=\"no\" allowfullscreen=\"true\" style=\"overflow: hidden; margin: 0px; border: 0px; display: inline-block; width: 100%; float: none; visibility: visible; height: 162px;\"></iframe></div>\r\n        <h2>Перед тем как приступить к заданию</h2>\r\n        <p>Перейдите по ссылке <a href=\"https://code.cs50.io/\">code.cs50.io</a> и зайдите в свой аккаунт. Выполните команду <code class=\"code\">cd</code> в вашем терминальном окне. Ваше терминальное окно должно выглядить как представлено ниже:</p>\r\n        <pre class=\"highlight\"><code>$</code></pre>\r\n        <p>Следующая команда</p>\r\n        <pre class=\"highlight\"><code>mkdir taqueria</code></pre>\r\n        <p>создаст папку <code class=\"code\">taqueria</code> в вашем рабочем пространстве.</p>\r\n        <p>Затем выполните</p>\r\n        <pre class=\"highlight\"><code>cd taqueria</code></pre>\r\n        <p>чтобы изменить директорию в папке. Вы должны увидеть в терминале <code class=\"code\">taqueria/ $</code>. Вы можете сейчас выполнить</p>\r\n        <pre class=\"highlight\"><code>code taqueria.py</code> </pre>\r\n        <p>чтобы создать файл с именем , в <code class=\"code\"> taqueria.py</code> котором вы будете писать свою программу.</p>\r\n        <h2>Как проверить</h2>\r\n        <p>Вот как протестировать код вручную:</p>\r\n        <ul>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python taqueria.py</code>. Введите  <code class=\"code\">Taco</code> и нажмите Enter, затем введите Taco. Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>Total: $6.00</code></pre>\r\n            <span>и продолжайте предлагать ввод пользователю, пока он не нажмет control-d.</span>\r\n            <li>Запустите вашу программу с помощью <code>python taqueria.py</code>. Введите <code class=\"code\">Baja Taco</code> и нажмите Enter, затем введите <code class=\"code\">Tortilla Salad</code> и нажмите Enter. Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>Total: $12.00</code></pre>\r\n           <span>и продолжайте предлагать пользователю ввод, пока он не нажмет control-d.</span>\r\n           <li>Запустите вашу программу с помощью <code>python taqueria.py</code>. Введите <code class=\"code\">Burger</code> и нажмите Enter. Ваша программа должна повторно сделать запрос у пользователя.</li>\r\n        </ul>\r\n        <p>Обязательно попробуйте другие продукты и измените регистр вашего ввода. Ваша программа должна вести себя так, как ожидалось, без учета регистра.</p>\r\n        <p>Вы можете выполнить приведенную ниже команду, чтобы проверить свой код с помощью <code>check50</code>,являющейся программой которой CS50 будет проверять ваш код при отправке. Но перед отправкой обязательно протестируйте свой код сами!</p>\r\n        <pre  class=\"highlight\"><code>check50 cs50/problems/2022/python/taqueria</code></pre>\r\n        <p>Зеленые смайлики означают, что ваша программа прошла проверку! Красные означают, что ваша программа выводит что-то неожиданное. Посетите URL-адрес, который выводит <code class=\"code\">check50</code>, чтобы увидеть ответ <code class=\"code\">check50</code>, переданный вашей программе, какой вывод она ожидала и какой вывод фактически выдала ваша программа.</p>\r\n        <h2>Как отправить</h2>\r\n        <p> В своем терминале выполните следующее, чтобы отправить свою работу.</p>\r\n        <pre class=\"highlight\"><code>submit50 cs50/problems/2022/python/taqueria</code></pre>\r\n    </main>\r\n</template>","import { render } from \"./FelipesTaqueria.vue?vue&type=template&id=de1b9ffa\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ммм\\\\Desktop\\\\cs50-python-ru\\\\cs50-python-ru\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n    <main>\r\n        <h1>Указатель уровня топлива(Fuel Gauge)</h1>\r\n        <p>Датчики топлива показывают, часто с дробями, сколько топлива в баке. Например, 1/4 означает, что бак заполнен на 25%, 1/2 означает, что бак заполнен на 50%, а 3/4 означает, что бак заполнен на 75%.</p>\r\n        <p>В файле с именем fuel.py реализуйте программу, которая запрашивает у пользователя дробь в формате X/Y, где X и Y является целым числом(int), а затем выводит в процентах, округленных до ближайшего целого числа, количество топлива в баке. Если, тем не менее, остается 1% или меньше, выведите E вместо этого вывод, указывающий, что резервуар практически пуст. И если осталось 99% или больше, выведите F, указывающий, что бак по существу полный.</p>\r\n        <p>Однако, если X или Y не является целым числом, X больше Y или Y равно 0, запросите дробьм у пользователя еще раз. (Y не обязан быть равен 4, это может быть любое число) Обязательно перехватывайте любые исключения, такие как <a href=\"https://docs.python.org/3/library/exceptions.html#ValueError\">ValueError</a> или <a href=\"https://docs.python.org/3/library/exceptions.html#ZeroDivisionError\">ZeroDivisionError</a>.</p>\r\n        <details>\r\n            <summary>Подсказки</summary>\r\n            <ul>\r\n                <li>Не забывайте, что <code class=\"code\">str</code> имеет несколько методов, согласно <a href=\"https://docs.python.org/3/library/stdtypes.html#string-methods\">docs.python.org/3/library/stdtypes.html#string-methods</a>, включая метод split.</li>\r\n                <li>Обратите внимание, что вы можете обрабатывать два исключения отдельно с помощью такого кода:</li>\r\n                <pre class=\"highlight\"><code>try:\r\n    ...\r\nexcept ValueError:\r\n    ...\r\nexcept ZeroDivisionError:\r\n    ...</code></pre>\r\n                <span>Или вы можете обрабатывать два исключения вместе, например:</span>\r\n                <pre class=\"highlight\"><code>try:\r\n    ...\r\nexcept (ValueError, ZeroDivisionError):\r\n    ...</code></pre>\r\n            </ul>\r\n        </details>\r\n        <h2>Демо</h2>\r\n        <iframe src=\"https://asciinema.org/a/6uEeFIieYqM2tlaKcYxA5jA5n/iframe?autoplay=1&amp;loop=1&amp;cols=80&amp;rows=12\" id=\"asciicast-iframe-6uEeFIieYqM2tlaKcYxA5jA5n\" name=\"asciicast-iframe-6uEeFIieYqM2tlaKcYxA5jA5n\" scrolling=\"no\" allowfullscreen=\"true\" style=\"overflow: hidden; margin: 0px; border: 0px; display: inline-block; width: 100%; float: none; visibility: visible; height: 494px;\"></iframe>\r\n        <h2>Перед тем как приступить к заданию</h2>\r\n        <p>Перейдите по ссылке <a href=\"https://code.cs50.io/\">code.cs50.io</a> и зайдите в свой аккаунт. Выполните команду <code class=\"code\">cd</code> в вашем терминальном окне. Ваше терминальное окно должно выглядить как представлено ниже:</p>\r\n        <pre class=\"highlight\"><code>$</code></pre>\r\n        <p>Следующая команда</p>\r\n        <pre class=\"highlight\"><code>mkdir fuel</code></pre>\r\n        <p>создаст папку <code class=\"code\">fuel</code> в вашем рабочем пространстве.</p>\r\n        <p>Затем выполните</p>\r\n        <pre class=\"highlight\"><code>cd fuel</code></pre>\r\n        <p>чтобы изменить директорию в папке. Вы должны увидеть в терминале <code class=\"code\">fuel/ $</code>. Вы можете сейчас выполнить</p>\r\n        <pre class=\"highlight\"><code>code fuel.py</code> </pre>\r\n        <p>чтобы создать файл с именем , в <code class=\"code\"> fuel.py</code> котором вы будете писать свою программу.</p>\r\n        <h2>Как проверить</h2>\r\n        <p>Вот как протестировать код вручную:</p>\r\n        <ul>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python fuel.py</code>. Введите  <code class=\"code\">3/4</code> и нажмите Enter. Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>75%</code></pre>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python fuel.py</code>. Введите  <code class=\"code\">1/4</code> и нажмите Enter. Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>25%</code></pre>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python fuel.py</code>. Введите  <code class=\"code\">4/4</code> и нажмите Enter. Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>F</code></pre>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python fuel.py</code>. Введите  <code class=\"code\">0/4</code> и нажмите Enter. Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>E</code></pre>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python fuel.py</code>.Введите <code class=\"code\">4/0</code> и нажмите Enter. Ваша программа должна обрабатывать <a href=\"https://docs.python.org/3/library/exceptions.html#ZeroDivisionError\">ZeroDivisionError</a>и снова делать запрос дроби у пользователя.</li>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python fuel.py</code>.Введите <code class=\"code\">three/four</code> и нажмите Enter. Ваша программа должна обрабатывать <a href=\"https://docs.python.org/3/library/exceptions.html#ValueError\">ValueError</a>и снова делать запрос дроби у пользователя.</li>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python fuel.py</code>.Введите <code class=\"code\">1.5/3</code> и нажмите Enter. Ваша программа должна обрабатывать <a href=\"https://docs.python.org/3/library/exceptions.html#ValueError\">ValueError</a>и снова делать запрос дроби у пользователя.</li>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python fuel.py</code>.Введите <code class=\"code\">5/4</code> и нажмите Enter. Ваша программа должна снова делать запрос дроби у пользователя.</li>\r\n        </ul>\r\n        <p>Вы можете выполнить приведенную ниже команду, чтобы проверить свой код с помощью <code>check50</code>,являющейся программой которой CS50 будет проверять ваш код при отправке. Но перед отправкой обязательно протестируйте свой код сами!</p>\r\n        <pre  class=\"highlight\"><code>check50 cs50/problems/2022/python/fuel</code></pre>\r\n        <p>Зеленые смайлики означают, что ваша программа прошла проверку! Красные означают, что ваша программа выводит что-то неожиданное. Посетите URL-адрес, который выводит <code class=\"code\">check50</code>, чтобы увидеть ответ <code class=\"code\">check50</code>, переданный вашей программе, какой вывод она ожидала и какой вывод фактически выдала ваша программа.</p>\r\n        <h2>Как отправить</h2>\r\n        <p> В своем терминале выполните следующее, чтобы отправить свою работу.</p>\r\n        <pre class=\"highlight\"><code>submit50 cs50/problems/2022/python/fuel</code></pre>\r\n    </main>\r\n</template>","import { render } from \"./FuelGauge.vue?vue&type=template&id=3295902f\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ммм\\\\Desktop\\\\cs50-python-ru\\\\cs50-python-ru\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n    <main>\r\n        <h1>Продуктовый список(Grocery List)</h1>\r\n        <p>Предположим, у вас есть привычка составлять список продуктов, которые вам нужны в продуктовом магазине.</p>\r\n        <p>В файле с именем <code class=\"code\">grocery.py</code> реализуйте программу, которая запрашивает у пользователя элементы, по одному в строке, до тех пор, пока пользователь не введет control-d (что является распространенным способом завершения ввода в программу). Затем выведите список продуктов пользователя в верхнем регистре, отсортированный в алфавитном порядке по элементам, с префиксом каждой строки, указывающим, сколько раз пользователь ввел этот элемент. Не нужно ставить элементы во множественное число. Обрабатывайте ввод пользователя без учета регистра.</p>\r\n        <details>\r\n            <summary>Подсказки</summary>\r\n            <ul>\r\n                <li>Обратите внимание, что вы можете определить, когда пользователь ввел control-d, перехватив <a href=\"https://docs.python.org/3/library/exceptions.html#EOFError\">EOFError</a> такой код:</li>\r\n                <pre class=\"highlight\"><code>try:\r\n    item = input()\r\nexcept EOFError:\r\n    ...</code></pre>\r\n                <li>Скорее всего, вы захотите сохранить свой список покупок в виде файла dict.</li>\r\n                <li>Обратите внимание, что у <code class=\"code\">dict</code> есть несколько методов <a href=\"https://docs.python.org/3/library/stdtypes.html#mapping-types-dict\">docs.python.org/3/library/stdtypes.html#mapping-types-dict</a>, среди которых и метод <code class=\"code\">get</code>, а также он поддерживает такие операции, как:</li>\r\n                <pre class=\"highlight\"><code>d[key]</code></pre>\r\n                <span>и</span>\r\n                <pre class=\"highlight\"><code>if key in d:\r\n    ...</code></pre>\r\n                <span>где <code class=\"code\">d</code> это <code class=\"code\">dict</code> и <code class=\"code\">key</code> это <code class=\"code\">str</code>.</span>\r\n                <li>Удостоверьтесь, что избежали или поймали  KeyError.</li>\r\n            </ul>\r\n        </details>\r\n        <h2>Демо</h2>\r\n        <div id=\"asciicast-container-oBVcf1rps4m8egqd3QTZmbwAl\" class=\"asciicast\" style=\"display: block; float: none; overflow: hidden; padding: 0px; margin: 20px 0px;\"><iframe src=\"https://asciinema.org/a/oBVcf1rps4m8egqd3QTZmbwAl/iframe?autoplay=1&amp;loop=1&amp;cols=80&amp;rows=12\" id=\"asciicast-iframe-oBVcf1rps4m8egqd3QTZmbwAl\" name=\"asciicast-iframe-oBVcf1rps4m8egqd3QTZmbwAl\" scrolling=\"no\" allowfullscreen=\"true\" style=\"overflow: hidden; margin: 0px; border: 0px; display: inline-block; width: 100%; float: none; visibility: visible; height: 455px;\"></iframe></div>\r\n        <h2>Перед тем как приступить к заданию</h2>\r\n        <p>Перейдите по ссылке <a href=\"https://code.cs50.io/\">code.cs50.io</a> и зайдите в свой аккаунт. Выполните команду <code class=\"code\">cd</code> в вашем терминальном окне. Ваше терминальное окно должно выглядить как представлено ниже:</p>\r\n        <pre class=\"highlight\"><code>$</code></pre>\r\n        <p>Следующая команда</p>\r\n        <pre class=\"highlight\"><code>mkdir grocery</code></pre>\r\n        <p>создаст папку <code class=\"code\">grocery</code> в вашем рабочем пространстве.</p>\r\n        <p>Затем выполните</p>\r\n        <pre class=\"highlight\"><code>cd grocery</code></pre>\r\n        <p>чтобы изменить директорию в папке. Вы должны увидеть в терминале <code class=\"code\">grocery/ $</code>. Вы можете сейчас выполнить</p>\r\n        <pre class=\"highlight\"><code>code grocery.py</code> </pre>\r\n        <p>чтобы создать файл с именем , в <code class=\"code\"> grocery.py</code> котором вы будете писать свою программу.</p>\r\n        <h2>Как проверить</h2>\r\n        <p>Вот как протестировать код вручную:</p>\r\n        <ul>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python grocery.py</code>. Введите <code class=\"code\">mango</code> и нажмите Enter, затем введите <code class=\"code\">strawberry</code> и нажмите Enter, а затем нажмите Ctrl-d. Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>1 MANGO\r\n1 STRAWBERRY</code></pre>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python grocery.py</code>. Введите <code class=\"code\">milk</code> и нажмите Enter, затем введите <code class=\"code\">milk</code> еще раз и нажмите Enter, а затем нажмите Ctrl-d. Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>2 MILK</code></pre>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python grocery.py</code>.  Введите <code class=\"code\">tortilla</code> и нажмите Enter, затем введите <code class=\"code\">sweet potato</code> и нажмите Enter, а затем нажмите Ctrl-d. Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>1 SWEET POTATO\r\n1 TORTILLA</code></pre>\r\n        </ul>\r\n        <p>Вы можете выполнить приведенную ниже команду, чтобы проверить свой код с помощью <code>check50</code>,являющейся программой которой CS50 будет проверять ваш код при отправке. Но перед отправкой обязательно протестируйте свой код сами!</p>\r\n        <pre  class=\"highlight\"><code>check50 cs50/problems/2022/python/grocery</code></pre>\r\n        <p>Зеленые смайлики означают, что ваша программа прошла проверку! Красные означают, что ваша программа выводит что-то неожиданное. Посетите URL-адрес, который выводит <code class=\"code\">check50</code>, чтобы увидеть ответ <code class=\"code\">check50</code>, переданный вашей программе, какой вывод она ожидала и какой вывод фактически выдала ваша программа.</p>\r\n        <h2>Как отправить</h2>\r\n        <p> В своем терминале выполните следующее, чтобы отправить свою работу.</p>\r\n        <pre class=\"highlight\"><code>submit50 cs50/problems/2022/python/grocery</code></pre>\r\n    </main>\r\n</template>","import { render } from \"./GroceryList.vue?vue&type=template&id=27b72c07\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ммм\\\\Desktop\\\\cs50-python-ru\\\\cs50-python-ru\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n    <main>\r\n        <h1>Лекция 0</h1>\r\n        <ul>\r\n            <li><a href=\"#creating-code-with-python\">Написание кода на Python</a></li>\r\n            <li><a href=\"#functions\">Функции</a></li>\r\n            <li><a href=\"#bugs\">Баги</a></li>\r\n            <li><a href=\"#improving-your-first-python-program\">Улучшение вашей первой программы на Python</a></li>\r\n            <ul>\r\n                <li><a href=\"#variables\">Переменные</a></li>\r\n                <li><a href=\"#comments\">Комментарии</a></li>\r\n                <li><a href=\"#pseudocode\">Псевдокод</a></li>\r\n            </ul>\r\n            <li><a href=\"№further-improving-your-first-python-program\">Дальнейшее улучшение вашей первой программы на Python</a></li>\r\n            <li><a href=\"#strings-and-paremeters\">Строки и параметры</a></li>\r\n            <ul><li><a href=\"#a-small-problem-with-quotation-marks\">Небольшая проблема с кавычками</a></li></ul>\r\n            <li><a href=\"#formatting-strings\">Форматирование строк</a></li>\r\n            <li><a href=\"#more-on-strings\">Подробнее о строках</a></li>\r\n            <li><a href=\"#integers-or-int\">Целые числа или int</a></li>\r\n            <li><a href=\"#readability-wins\">Удобочитаемость выигрывает</a></li>\r\n            <li><a href=\"#float-basics\">Основы float</a></li>\r\n            <li><a href=\"#more-on-floats\">Подробнее о float</a></li>\r\n            <li><a href=\"#def\">Def</a></li>\r\n            <li><a href=\"#returning-values\">Возвращаемые значения</a></li>\r\n            <li><a href=\"#summing-up\">Подводя итог</a></li>\r\n        </ul>\r\n        <h2 id=\"creating-code-with-python\">Написание кода на Python</h2>\r\n        <ul>\r\n            <li>VS Code — это особый тип текстового редактора, который называется компилятором. Вверху вы увидите текстовый редактор, а внизу терминал, где вы можете выполнять команды.</li>\r\n            <li>В терминале вы можете выполнить команду <code class=\"code\">code hello.py</code> чтобы создать файл и начать писать код</li>\r\n            <li>В текстовом редакторе выше вы можете ввести <code class=\"code\">print(\"hello, world\")</code>. Это известная каноническая программа, которую почти все программисты пишут в процессе обучения.</li>\r\n            <li>В окне терминала вы можете выполнять команды. Чтобы запустить программу, вам нужно переместить курсор в нижнюю часть экрана, щелкнуть в окне терминала. Теперь вы можете ввести вторую команду в окне терминала. Рядом со знаком доллара введите <code class=\"code\">python hello.py</code>  и нажмите клавишу Enter на клавиатуре.</li>\r\n            <li>Напомним, что компьютеры понимают только нули и единицы. Поэтому когда вы выполняете команду <code class=\"code\">python hello.py </code> интерпретатор python будет  созданный вами файл <code class=\"code\">hello.py</code> переводить в нули и единицы, понятные компьютеру.</li>\r\n            <li>Результатом работы программы <code class=\"code\">python hello.py</code>, является вывод в терминал строки - <code class=\"code\">hello, world</code>.</li>\r\n            <li>Поздравляю! Вы только что создали свою первую программу.</li>\r\n        </ul>\r\n        <h2 id=\"functions\">Функции</h2>\r\n        <ul>\r\n            <li>Функции — это глаголы или действия, которые компьютер или компьютерный язык уже знают, как выполнять.</li>\r\n            <li>В вашей программе <code class=\"code\">hello.py</code> функция <code class=\"code\">print</code> умеет делать вывод каких либо данных в окно терминала.</li>\r\n            <li>Функция <code class=\"code\">print</code> принимает аргументы. В данном случае <code class=\"code\">\"hello, world\"</code>  это аргументы, которые принимает функция <code class=\"code\">print</code>.</li>\r\n        </ul>\r\n        <h2 id=\"bugs\">Баги</h2> \r\n        <ul>\r\n            <li>Ошибки являются естественной частью программирования. Ошибки - это проблемы, которые вы можете решать! Не расстраивайтесь! Это часть процесса становления великим программистом.</li>\r\n            <li>Представим в нашей программе <code class=\"code\">hello.py</code> случайно набранное <code class=\"code\">print(\"hello, world\"</code>  - заметьте, что мы пропустили <code class=\"code\">)</code> требуемый компилятором финал. Если я намеренно допущу эту ошибку, то компилятор выведет ошибку в окно терминала!</li>\r\n            <li>Часто сообщения об ошибках информируют вас о вашей ошибке и дают подсказки о том, как ее исправить. Однако в некоторых случаях компилятор не даст вам ответ в чем ваша ошибка.</li>\r\n        </ul>\r\n        <h2 id=\"improving-your-first-python-program\">Улучшение вашей первой программы на Python</h2>\r\n        <ul>\r\n            <li>Мы можем персонализировать вашу первую программу на Python.</li>\r\n            <li>В нашем текстовом редакторе в <code class=\"code\">hello.py</code> мы можем добавить еще одну функцию. input - это функция, которая принимает подсказку в качестве аргумента. Мы можем отредактировать наш код, как показано ниже: </li>\r\n            <pre class=\"highlight\"><code>input(\"What's your name? \")\r\nprint(\"hello, world\")</code></pre>\r\n            <li>Однако само по себе это редактирование не позволит вашей программе выводить то, что вводит ваш пользователь. Для этого нам нужно будет познакомить вас с переменными</li>\r\n        </ul>\r\n        <h3 id=\"variables\">Переменные</h3>\r\n        <ul>\r\n            <li>Переменная — это просто контейнер для значений в вашей программе.</li>\r\n            <li>В вашей программе вы можете ввести свою собственную переменную, отредактировав ее так:</li>\r\n            <pre class=\"highlight\"><code>name = input(\"What's your name? \")\r\nprint(\"hello, world\")</code></pre>\r\n            <p>Обратите внимание, что этот <code class=\"code\">= </code>знак равенства в середине <code class=\"code\">name = input(\"What's your name? \")</code> играет особую роль в программировании. Этот знак равенства буквально присваивает то, что справа, тому, что слева. Поэтому возвращаемое значение <code class=\"code\">input(\"What's your name? \")</code> присваивается <code class=\"code\">name</code>.</p>\r\n            <li>Если вы отредактируете свой код следующим образом, вы заметите ошибку</li>\r\n            <pre class=\"highlight\"><code>name = input(\"What's your name? \")\r\nprint(\"hello, name\")</code></pre>\r\n            <li>Программа вернется <code class=\"code\">hello, name</code> в окно терминала независимо от того, что вводит пользователь.</li>\r\n            <li>Дальнейшее редактирование нашего кода, может выглядить так:</li>\r\n            <pre class=\"highlight\"><code>name = input(\"What's your name? \")\r\nprint(\"hello,\")\r\nprint(name)</code></pre>\r\n            <li>Результат в окне терминала будет</li>\r\n            <pre class=\"highlight\"><code>What's your name? David\r\nhello\r\nDavid</code></pre>\r\n            <li>Мы стали ближе к желаемому результату!</li>\r\n            <li>Вы можете подробнее узнать о <a href=\"https://docs.python.org/3/library/datatypes.html\">типах данных</a> в документации Python</li>\r\n        </ul>\r\n        <h3 id=\"comments\">Комментарии</h3>\r\n        <ul>\r\n            <li>Комментарии — это способ для программистов отслеживать, что они делают в своих программах, и даже информировать других о своих намерениях относительно блока кода. Короче говоря, это заметки для вас и других, которые увидят ваш код!</li>\r\n            <li>Вы можете добавлять комментарии к своей программе, чтобы видеть, что она делает. Вы можете отредактировать свой код следующим образом:</li>\r\n            <pre class=\"highlight\"><code># Ask the user for their name(Спросить у пользователя его имя)\r\nname = input(\"What's your name? \")\r\nprint(\"hello,\")\r\nprint(name)</code></pre>\r\n            <li>Комментарии также могут служить для вас списком то что еще надо сделать в программе.</li>\r\n        </ul>\r\n        <h3 id=\"pseudocode\">Псевдокод</h3>\r\n        <ul>\r\n            <li>Псевдокод — это важный тип комментариев, который становится особым типом списка то что еще надо сделать, особенно когда вы не понимаете, как выполнить задачу. Например, вы можете отредактировать свой код, подобным образом:</li>\r\n            <pre class=\"highlight\"><code># Ask the user for their name(Спросить у пользователя его имя)\r\nname = input(\"What's your name? \")\r\n\r\n# Print hello(Вывести hello)\r\nprint(\"hello,\")\r\n\r\n# Print the name inputted(Вывести введенное имя)\r\nprint(name)</code></pre>\r\n        </ul>\r\n        <h2 id=\"further-improving-your-first-python-program\">Дальнейшее улучшение вашей первой программы на Python</h2>\r\n        <ul>\r\n            <li>Мы можем дополнительно отредактировать наш код следующим образом:</li>\r\n            <pre class=\"highlight\"><code># Ask the user for their name(Спросить у пользователя его имя)\r\nname = input(\"What's your name? \")\r\n\r\n# Print hello and the inputted name(Вывести hello и введенное имя)\r\nprint(\"hello, \" + name)</code></pre>\r\n            <li>Оказывается, некоторые функции принимают множество аргументов.</li>\r\n            <li>Мы можем использовать запятую <code class=\"code\">,</code> для передачи нескольких аргументов, отредактировав наш код следующим образом:</li>\r\n            <pre class=\"highlight\"><code># Ask the user for their name(Спросить у пользователя его имя)\r\nname = input(\"What's your name? \")\r\n\r\n# Print hello and the inputted name(Вывести hello и введенное имя)\r\nprint(\"hello,\", name)</code></pre>\r\n        <p>Если бы мы набрали «Дэвид», мы бы получили вывод в терминале <code class=\"code\">hello, David</code>. Ура.</p>\r\n        </ul>\r\n        <h2 id=\"strings-and-paremeters\">Строки и параметры</h2>\r\n        <ul>\r\n            <li>Строка, известная как str в Python, представляет собой последовательность текста.</li>\r\n            <li>Немного вернув наш код обратно к следующему, мы обнаружили визуальный побочный эффект, заключающийся в отображении результата на нескольких строках:</li>\r\n            <pre class=\"highlight\"><code># Ask the user for their name(Спросить у пользователя его имя)\r\nname = input(\"What's your name? \")\r\nprint(\"hello,\")\r\nprint(name)</code></pre>\r\n            <li>Функции принимают аргументы, влияющие на их поведение. Если мы посмотрим на документацию <a href=\"https://docs.python.org/3/library/functions.html#print\">print</a>, вы заметите, что мы можем многое узнать об аргументах, которые принимает функция печати.</li>\r\n            <li>Глядя на эту документацию, вы узнаете, что функция печати автоматически включает фрагмент кода <code class=\"code\">end='\\n'</code>. Этот индекатор <code class=\"code\">\\n </code>указывает, что функция печати автоматически создаст разрыв строки при запуске. Функция печати принимает аргумент с именем и по умолчанию создается новая строка.</li>\r\n            <li>Однако технически мы можем предоставить аргумент для end, чтобы новая строка не создавалась!</li>\r\n            <li>Мы можем изменить наш код следующим образом:</li>\r\n            <pre class=\"highlight\"><code># Ask the user for their name(Спросить у пользователя его имя)\r\nname = input(\"What's your name? \")\r\nprint(\"hello,\", end=\"\")\r\nprint(name)</code></pre>\r\n            <span>Предоставляя <code class=\"code\">end=\"\"</code>, мы перезаписываем значение по умолчанию <code class=\"code\">end</code>, так что оно не создает новую строку после первого оператора печати. Указав имя David, вывод в окне терминала будет <code class=\"code\">hello, David</code>.</span>\r\n            <li>Таким образом, параметры — это аргументы, которые может принимать функция.</li>\r\n            <li>Вы можете узнать больше в документации Python по <code class=\"code\"><a href=\"https://docs.python.org/3/library/functions.html#print\">print</a></code>.</li>\r\n        </ul>\r\n        <h3 id=\"a-small-problem-with-quotation-marks\">Небольшая проблема с кавычками</h3>\r\n        <ul>\r\n            <li>Обратите внимание, как сложно добавить кавычки в строку.</li>\r\n            <li><code class=\"code\">print(\"hello,\"friend\"\")</code>работать не будет и компилятор выдаст ошибку.</li>\r\n            <li>Как правило, есть два подхода к исправлению этого. Во-первых, вы можете просто изменить кавычки на одинарные кавычки.</li>\r\n            <li>Другим, более часто используемым подходом будет использование кода <code class=\"code\">print(\"hello, \\\"friend\\\"\")</code>. Обратная косая черта сообщает компилятору, что следующий символ следует рассматривать как кавычку в строке, чтобы избежать ошибки компилятора.</li>\r\n        </ul>\r\n        <h2 id=\"formatting-strings\">Форматирование строк</h2>\r\n        <ul>\r\n            <li>Вероятно, наиболее элегантным способом использования строк будет следующий:</li>\r\n            <pre class=\"highlight\"><code># Ask the user for their name(Спросить у пользователя его имя)\r\nname = input(\"What's your name? \")\r\nprint(f\"hello, {name}\")</code></pre>\r\n            <span>Обратите внимание на <code class=\"code\">f</code> в <code class=\"code\">print(f\"hello, {name}\")</code>. <code class=\"code\">f</code>-это специальный индикатор Python для обработки этой строки особым образом, отличным от предыдущих подходов, которые мы проиллюстрировали в этой лекции. Ожидайте, что вы будете использовать этот стиль строк довольно часто в этом курсе.</span>\r\n        </ul>\r\n        <h2 id=\"more-on-strings\">Подробнее о строках</h2>\r\n        <ul>\r\n            <li>Вы не должны ждать, что пользователь будет вести себя, как ожидалось. Следовательно, вам нужно будет убедиться, что ввод вашего пользователя исправлен или проверен.</li>\r\n            <li>Оказывается, в строки встроена возможность удалять пробелы из строки.</li>\r\n            <li>Применяя метод <code class=\"code\">strip</code> к переменной <code class=\"code\">name</code>,как это сделать: <code class=\"cide\">name = name.strip()</code>это удалит все пробелы слева и справа от пользовательского ввода. Вы можете изменить свой код, вот так:</li>\r\n            <pre class=\"highlight\"><code># Ask the user for their name(Спросить у пользователя его имя)\r\nname = input(\"What's your name? \")\r\n\r\n# Remove whitespace from the str(Удалить пробелы из строки(str))\r\nname = name.strip()\r\n\r\n# Print the output(Распечатать вывод)\r\nprint(f\"hello, {name}\")</code></pre>\r\n            <span>При повторном запуске этой программы, независимо от того, сколько пробелов вы наберете до или после name, она удалит все пробелы.</span>\r\n            <li>Используйте метод <code class=\"code\">title</code>, чтобы перевести в верхний регистр первую букву в имени:</li>\r\n            <pre class=\"highlight\"><code># Ask the user for their name(Спросить у пользователя его имя)\r\nname = input(\"What's your name? \")\r\n# Remove whitespace from the str(Удалить пробелы из строки(str))\r\nname = name.strip()\r\n# Capitalize the first letter of each word(Перевести в верхний регистр первую букву в слове)\r\nname = name.title()\r\n# Print the output(Распечатать вывод)\r\nprint(f\"hello, {name}\")\r\n</code></pre>\r\n            <li>К этому моменту вы, возможно, очень устали от многократного ввода <code class=\"code\">python</code> в окне терминала. Вы можете использовтаь стрелки вверх и вниз на вашей клавиатуре, чтобы увидеть самые последние команды терминала, которые вы вводили.</li>\r\n            <li>Обратите внимание, что вы можете изменить свой код, чтобы сделать его более эффективным:</li>\r\n            <pre class=\"highlight\"><code># Ask the user for their name(Спросить у пользователя его имя)\r\nname = input(\"What's your name? \")\r\n# Remove whitespace from the str and capitalize the first letter of each word(Удалить пробелы из строки(str) и перевести в верхний регистр первую букву в слове)\r\nname = name.strip().title()\r\n# Print the output(Распечатать вывод)\r\nprint(f\"hello, {name}\")</code></pre>\r\n            <span>Вывод будет тот же, что и в предыдущем коде.</span>\r\n            <li>Мы могли бы пойти еще дальше!</li>\r\n            <pre class=\"highlight\"><code># Ask the user for their name, remove whitespace from the str and capitalize the first letter of each word\r\nname = input(\"What's your name? \").strip().title()\r\n# Print the output\r\nprint(f\"hello, {name}\")</code></pre>\r\n        <li>Вы можете узнать больше о строках в документации Python <code class=\"code\"><a href=\"https://docs.python.org/3/library/stdtypes.html#str\">str</a></code></li>\r\n        </ul>\r\n        <h2 id=\"integers-or-int\">Целые числа или int</h2>\r\n        <ul>\r\n            <li>В Python целое число называется int.</li>\r\n            <li>В мире математики мы знакомы с операторами +, -, *, / и %. Этот последний оператор % или оператор по модулю может быть вам не очень знаком.</li>\r\n            <li>Вам не нужно использовать окно текстового редактора в компиляторе для запуска кода Python. В своем терминале вы можете написать <code class=\"code\">python</code>.И в окне терминала вы увидите >>>. Затем вы можете запустить живой интерактивный код. Вы можете ввести 1+1, и он запустит этот расчет. Этот режим будет использоваться во время этого курса.</li>\r\n            <li>Снова открыв VS Code, мы можем ввести <code class=\"code\">code calculator.py</code> в терминал. Это создаст новый файл, в котором мы создадим наш собственный калькулятор.</li>\r\n            <li>Во-первых, мы можем объявить несколько переменных.</li>\r\n            <pre class=\"highlight\"><code>x = 1\r\ny = 2\r\nz = x + y\r\nprint(z)</code></pre>\r\n            <span>Естественно при запуске <code class=\"code\">python calculator.py</code> мы получаем результат в окне терминала <code class=\"code\">3</code>. Мы можем сделать это более интерактивным, используя функцию <code class=\"code\">input</code>.</span>\r\n            <pre class=\"highlight\"><code>x = input(\"What's x? \")\r\ny = input(\"What's y? \")\r\nz = x + y\r\nprint(z)</code></pre>\r\n            <li>Запустив эту программу, мы обнаруживаем, что вывод неверен, так как вывод <code class=\"code\">12</code>. В чем может быть причина?</li>\r\n            <li>Ранее мы видели, как знак <code class=\"code\">+</code> объединяет две строки. Поскольку ваш ввод с клавиатуры на вашем компьютере поступает в компилятор в виде текста, он обрабатывается как строка. Поэтому нам нужно преобразовать этот ввод из строки в целое число. Мы можем сделать это следующим образом:</li>\r\n            <pre class=\"highlight\"><code>x = input(\"What's x? \")\r\ny = input(\"What's y? \")\r\nz = int(x) + int(y)\r\nprint(z)</code></pre>\r\n            <span>Теперь результат правильный. Использование int(x), называется «приведением», когда значение временно изменяется с одного типа переменной (в данном случае строки) на другой (здесь — целое число).</span>\r\n            <li>Мы можем улучшить нашу программу следующим образом:</li>\r\n            <pre class=\"highlight\"><code>x = int(input(\"What's x? \"))\r\ny = int(input(\"What's y? \"))\r\nprint(x + y)</code></pre>\r\n            <span>Это показывает, что вы можете запускать функции в функциях. Сначала запускается самая внутренняя функция, а затем запускается внешняя. Сначала функция <code class=\"code\">input</code> запускается. Затем функция <code class=\"code\">int</code>.</span>\r\n            <li>Вы можете узнать больше об <code class=\"code\"><a href=\"https://docs.python.org/3/library/functions.html?highlight=float#int\">int</a></code> из документации Python</li>\r\n        </ul>\r\n        <h2 id=\"readability-wins\">Удобочитаемость выигрывает</h2>\r\n        <li>Принимая решение о своем подходе к задачам программирования, помните, что можно привести разумные аргументы в пользу многих подходов к одной и той же проблеме.</li>\r\n        <li>Независимо от того, какой подход вы примете к задаче программирования, помните, что ваш код должен быть читабельным. Вы должны использовать комментарии, чтобы дать себе и другим подсказки о том, что делает ваш код. Кроме того, вы должны создавать код таким образом, чтобы он был удобочитаемым.</li>\r\n        <h2 id=\"float-basics\">Основы float</h2>\r\n        <li>Значение с плавающей запятой — это действительное число, содержащее десятичную точку, например <code class=\"code\">0.52</code>.</li>\r\n        <li>Вы можете изменить свой код чтобы он поддерживал float следующим образом:</li>\r\n        <pre class=\"highlight\"><code>x = float(input(\"What's x? \"))\r\ny = float(input(\"What's y? \"))\r\nprint(x + y)</code></pre>\r\n        <li>Это изменение позволяет вашему пользователю вводить <code class=\"code\">1.2</code> и <code class=\"code\">3.4</code> отображать их сумму <code class=\"code\">4.6</code>.</li>\r\n        <li>Однако давайте представим, что вы хотите округлить сумму до ближайшего целого числа. Посмотрев в документации Python на <code class=\"code\">round</code>, вы увидите, что доступны аргументы <code class=\"code\">round(number[n, ndigits])</code>. Эти квадратные скобки указывают на то, что программист может указать что-то необязательное. Следовательно, вы можете округлить цифру до ближайшего целого числа  <code class=\"code\">round(n)</code>. В качестве альтернативы ваш код может выглядить следующим образом:</li>\r\n        <pre class=\"highlight\"><code># Get the user's input\r\nx = float(input(\"What's x? \"))\r\ny = float(input(\"What's y? \"))\r\n# Create a rounded result\r\nz = round(x + y)\r\n# Print the result\r\nprint(z)</code></pre>\r\n        <span>Вывод будет округлен до ближайшего целого числа.</span>\r\n        <li>Что, если бы мы захотели отформатировать вывод длинных чисел? Например, вместо того, чтобы видеть <code class=\"code\">1000</code>, вы можете захотеть увидеть <code class=\"code\">1,000</code>. Вы можете изменить свой код следующим образом:</li>\r\n        <pre class=\"highlight\"><code># Get the user's input\r\nx = float(input(\"What's x? \"))\r\ny = float(input(\"What's y? \"))\r\n# Create a rounded result\r\nz = round(x + y)\r\n# Print the formatted result\r\nprint(f\"{z:,}\")</code></pre>\r\n        <span>Хотя это довольно загадочно, <code class=\"code\">print(f\"{z:,}\")</code> создает сценарий, в котором вывод <code class=\"code\">z</code> будет включать запятые, где результат может выглядеть как <code class=\"code\">1,000</code> или <code class=\"code\">2,500</code>.</span>\r\n        <h2 id=\"more-on-floats\">Подробнее о float</h2>\r\n        <li>Как мы можем округлить значения с плавающей запятой? Сначала измените код следующим образом:</li>\r\n        <pre class=\"highlight\"><code># Get the user's input\r\nx = float(input(\"What's x? \"))\r\ny = float(input(\"What's y? \"))\r\n\r\n# Calculate the result\r\nz = x / y\r\n\r\n# Print the result\r\nprint(z)\r\n</code></pre>\r\n        <li>При вводе x, как <code class=\"code\">2</code> и y, как <code class=\"code\">3</code>, результат z будет <code class=\"code\">0.6666666666</code> по-видимому, продолжается до бесконечности, как мы могли бы ожидать.</li>\r\n        <li>Давайте представим, что мы хотим округлить это значение в меньшую сторону, мы могли бы изменить наш код следующим образом:</li>\r\n        <pre class=\"highlight\"><code># Get the user's input\r\nx = float(input(\"What's x? \"))\r\ny = float(input(\"What's y? \"))\r\n\r\n# Calculate the result and round\r\nz = round(x / y, 2)\r\n\r\n# Print the result\r\nprint(z)</code></pre>\r\n        <span>Как и следовало ожидать, это округлит результат до ближайших двух знаков после запятой.</span>\r\n        <li>Мы также можем использовать <code class=\"code\">fstring</code> для форматирования вывода следующим образом:</li>\r\n        <pre class=\"highlight\"><code># Get the user's input\r\nx = float(input(\"What's x? \"))\r\ny = float(input(\"What's y? \"))\r\n\r\n# Calculate the result\r\nz = x / y\r\n\r\n# Print the result\r\nprint(f\"{z:.2f}\")</code></pre>\r\n        <span>Этот загадочный код <code class=\"code\">fstring</code> отображает то же самое, что и наша предыдущая стратегия округления.</span>\r\n        <li>Вы можете узнать больше о <a href=\"https://docs.python.org/3/library/functions.html?highlight=float#float\"><code class=\"code\">float</code></a> в документации Python</li>\r\n        <h2 id=\"def\">Def</h2>\r\n        <li>Было бы неплохо создать свои собственные функции?</li>\r\n        <li>Давайте вернем наш посдедний код <code class=\"code\">hello.py</code>, введя <code class=\"code\">code hello.py</code> в окно терминала. Ваш начальный код должен выглядеть следующим образом:</li>\r\n        <pre class=\"highlight\"><code># Ask the user for their name, remove whitespace from the str and capitalize the first letter of each word\r\nname = input(\"What's your name? \").strip().title()\r\n\r\n# Print the output\r\nprint(f\"hello, {name}\")</code></pre>\r\n        <span>Мы можем улучшить наш код, чтобы создать собственную специальную функцию, которая говорит нам \"hello!\"</span>\r\n        <li>Сотрите весь код в текстовом редакторе, и давайте начнем с нуля:</li>\r\n        <pre class=\"highlight\"><code>name = input(\"What's your name? \")\r\nhello()\r\nprint(name)</code></pre>\r\n        <span>При попытке запустить этот код ваш компилятор выдаст ошибку. В конце концов, не была создана функция <code class=\"code\">hello</code>.</span>\r\n        <li>Мы можем создать нашу собственную функцию с именем <code class=\"cd\">hello</code> следующим образом:</li>\r\n        <pre class=\"highlight\"><code>def hello():\r\n    print(\"hello\")\r\n\r\n\r\nname = input(\"What's your name? \")\r\nhello()\r\nprint(name)</code></pre>\r\n        <span>Обратите внимание, что все, что ниже <code class=\"code\">def hello()</code>, имеет отступ. Python — это язык с отступами. Он использует отступ, чтобы понять, что является частью вышеуказанной функции. Поэтому все в функции <code class=\"code\">hello</code> должно быть с отступом. Когда что-то не имеет отступа, оно обрабатывается так, как будто оно не находится внутри функции <code class=\"code\">hello</code>. Запустив <code class=\"code\">python hello.py</code> в окне терминала, вы увидите, что ваш вывод не совсем такой, как вам хотелось бы.</span>\r\n        <li>Мы можем еще улучшить наш код:</li>\r\n        <pre class=\"highlight\"><code># Create our own function\r\ndef hello(to):\r\n    print(\"hello,\", to)\r\n\r\n\r\n# Output using our own function\r\nname = input(\"What's your name? \")\r\nhello(name)</code></pre>\r\n        <span>Здесь, в первых строках, вы создаете свою функцию <code class=\"code\">hello</code>. Однако на этот раз вы сообщаете компилятору, что эта функция принимает единственный параметр: переменную с именем <code class=\"code\">to</code>. Поэтому при вызове <code class=\"code\">hello(name)</code> компьютер передает name в  функцию <code class=\"code\">hello</code> как <code class=\"code\">to</code>. Вот как мы передаем значения в функции. Очень полезно! Запустив <code class=\"code\">python hello.py</code> в окне терминала, вы увидите, что результат намного ближе к нашему идеалу, представленному ранее в этой лекции.</span>\r\n        <li>Мы можем изменить наш код, чтобы добавить значение по умолчанию для <code class=\"code\">hello</code>:</li>\r\n        <pre class=\"highlight\"><code># Create our own function\r\ndef hello(to=\"world\"):\r\n    print(\"hello,\", to)\r\n\r\n\r\n# Output using our own function\r\nname = input(\"What's your name? \")\r\nhello(name)\r\n\r\n# Output without passing the expected arguments\r\nhello()</code></pre>\r\n        <span>Проверьте свой код самостоятельно. Обратите внимание, как первое <code class=\"code\">hello</code> будет вести себя так, как вы ожидаете, а второе hello, которому не передано значение, по умолчанию будет выводить hello, world.</span>\r\n        <li>Нам не обязательно писать нашу функцию в начале нашей программы. Мы можем сдвинуть ее вниз, но нам нужно сообщить компилятору, что у нас есть функция <code class=\"code\">main</code> и отдельная функция <code class=\"code\">hello</code>.</li>\r\n        <pre class=\"highlight\"><code>def main():\r\n\r\n# Output using our own function\r\nname = input(\"What's your name? \")\r\nhello(name)\r\n\r\n# Output without passing the expected arguments\r\nhello()\r\n\r\n\r\n# Create our own function\r\ndef hello(to=\"world\"):\r\nprint(\"hello,\", to)</code></pre>\r\n        <span>Однако одно это создаст своего рода ошибку. Если мы запустим <code class=\"code\">python hello.py</code>, ничего не произойдет! Причина этого в том, что ничто в этом коде на самом деле не вызывает основную функцию и не оживляет нашу программу.</span>\r\n        <li>Следующая очень маленькая модификация вызовет функцию <code class=\"cide\">main</code> и наша программа начнет работать:</li>\r\n        <pre class=\"highlight\"><code>def main():\r\n\r\n# Output using our own function\r\nname = input(\"What's your name? \")\r\nhello(name)\r\n\r\n# Output without passing the expected arguments\r\nhello()\r\n\r\n\r\n# Create our own function\r\ndef hello(to=\"world\"):\r\nprint(\"hello,\", to)\r\n\r\n\r\nmain()</code></pre>\r\n        <h2 id=\"returning-values\">Возвращаемые значения</h2>\r\n        <li>Вы можете представить множество сценариев, в которых вы хотите, чтобы функция не только выполняла действие, но и возвращала значение обратно в основную функцию. Например, вместо того, чтобы просто печатать вычисление x + y, вы можете захотеть, чтобы функция возвращала значение этого вычисления обратно в другую часть вашей программы. Эту «возвращаемое значение» значения мы называем return.</li>\r\n        <li>Вернемся к нашему коду в <code class=\"code\">calculator.py</code>, набрав <code class=\"code\">code calculator.py</code>. Сотрите там весь код. Переработайте код следующим образом:</li>\r\n        <pre class=\"highlight\"><code>def main():\r\n    x = int(input(\"What's x? \"))\r\n    print(\"x squared is\", square(x))\r\n\r\n\r\ndef square(n):\r\n    return n * n\r\n\r\n\r\nmain()</code></pre>\r\n        <span><code class=\"code\">x</code> передается в <code class=\"code\">square</code>. Затем вычисление <code class=\"code\">x * x</code> возвращается обратно в функцию main.</span>\r\n        <h2 id=\"summing-up\">Подводя итог</h2>\r\n        <p>Благодаря работе на этой единственной лекции вы узнали способности, которые будете использовать бесчисленное количество раз в своих собственных программах. Вы узнали о…</p>\r\n        <ul>\r\n            <li>Написание кода на Python;</li>\r\n            <li>Функции;</li>\r\n            <li>Баги;</li>\r\n            <li>Переменные;</li>\r\n            <li>Комментарии;</li>\r\n            <li>Псевдокод;</li>\r\n            <li>Строки;</li>\r\n            <li>Параметры;</li>\r\n            <li>Форматирование строк;</li>\r\n            <li>Целые числа;</li>\r\n            <li>Принципы удобочитаемости;</li>\r\n            <li>float;</li>\r\n            <li>Создание собственных функций;</li>\r\n            <li>Возвращаемые значения.</li>\r\n        </ul>\r\n    </main>\r\n</template>\r\n\r\n\r\n","import { render } from \"./Notes3View.vue?vue&type=template&id=8208911a\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ммм\\\\Desktop\\\\cs50-python-ru\\\\cs50-python-ru\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n    <main>\r\n        <h1>Набор проблем 3</h1>\r\n        <h2>Что нужно делать</h2>\r\n        <ol>\r\n            <li>Войдите в <a href=\"https://code.cs50.io/\"> code.cs50.io</a>, облачную версию Visual Studio Code (VS Code), которая предоставляет собственное  кодовое пространство(Codespace) со всем что нужно для прохождения курса . Не нужно скачивать и устанавливать VS Code или Python на свой Mac или ПК!</li>\r\n            <li>Выполните update50 в окне терминала вашего Codespace, чтобы убедиться, что ваше пространство кода обновлено, при появлении запроса нажмите <b>Rebuild now</b>.</li>\r\n            <li>\r\n                <span>Отправьте все проблемы приведенные ниже:</span>\r\n                <ul>\r\n                    <li><router-link to=\"/3/fuel/\">Fuel Gauge</router-link> </li>\r\n                    <li><router-link to=\"/3/taqueria/\">Felipe's Taqueria</router-link> </li>\r\n                    <li><router-link to=\"/3/grocery/\">Grocery List</router-link> </li>\r\n                    <li><router-link to=\"/3/outdated/\">Outdated</router-link></li>\r\n                </ul>\r\n            </li>\r\n        </ol>\r\n    </main>\r\n</template>\r\n<style scoped>\r\nmain {\r\n    height: 100vh;\r\n}\r\n</style>","import { render } from \"./Psets3View.vue?vue&type=template&id=0946b266&scoped=true\"\nconst script = {}\n\nimport \"./Psets3View.vue?vue&type=style&index=0&id=0946b266&scoped=true&lang=css\"\n\nimport exportComponent from \"C:\\\\Users\\\\ммм\\\\Desktop\\\\cs50-python-ru\\\\cs50-python-ru\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-0946b266\"]])\n\nexport default __exports__","<template>\r\n    <main>\r\n        <h1>Outdated</h1>\r\n        <p>В Соединенных Штатах даты обычно форматируются в порядке <a href=\"https://en.wikipedia.org/wiki/Date_and_time_notation_in_the_United_States\">месяц-день-год (ММ/ДД/ГГГГ)</a>, также известном как <a href=\"https://en.wikipedia.org/wiki/Endianness#Middle-endian\">смешанный порядок байтов</a>, который, возможно, является плохим дизайном. Даты в этом формате не могут быть легко отсортированы, потому что год идет последним, а не первым числом. Попробуйте отсортировать, например, 2/2/1800, 3/3/1900, и 1/1/2000 в хронологическом порядке в любой программе (например, электронной таблице). Даты в этом формате также неоднозначны. Гарвард был <a href=\"https://www.harvard.edu/about/history/\">основан</a> 8 сентября 1636 года, но 9/8/1636 также можно интерпретировать как 9 августа 1636 года!</p>\r\n        <p>К счастью, компьютеры, как правило, используют <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a>, международный стандарт, который предписывает, что даты должны быть отформатированы в порядке год-месяц-день (ГГГГ-ММ-ДД), независимо от страны, форматируя годы с четырьмя цифрами, месяцы с двумя цифрами, и дни с двумя цифрами, «дополняя» каждую начальными нулями по мере необходимости.</p>\r\n        <p>В файле с именем <code class=\"code\">outdated.py</code> реализуйте программу, которая запрашивает у пользователя дату,<a href=\"https://en.wikipedia.org/wiki/Anno_Domini\">anno Domini</a>, в порядке месяц-день-год, отформатированном как <code class=\"code\">9/8/1636</code> или <code class=\"code\">September 8, 1636</code>, где месяц в последнем может быть любым из следующих значений <code class=\"code\">list</code>:</p>\r\n        <pre class=\"highlight\"><code>[\r\n    \"January\",\r\n    \"February\",\r\n    \"March\",\r\n    \"April\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"August\",\r\n    \"September\",\r\n    \"October\",\r\n    \"November\",\r\n    \"December\"\r\n]</code></pre>\r\n        <p>Затем выведите ту же дату в формате <code class=\"code\">YYYY-MM-DD</code>. Если ввод пользователя не является допустимой датой ни в одном из форматов, запросите дату у пользователя еще раз. Предположим, что в каждом месяце не более 31 дня; нет необходимости проверять, имеет ли месяц 28, 29, 30 или 31 день.</p>\r\n        <details>\r\n            <summary>Подсказки</summary>\r\n            <ul>\r\n                <li>Напомним, что <code class=\"code\">str</code>поставляется с несколькими методами, согласно <a href=\"https://docs.python.org/3/library/stdtypes.html#string-methods\">docs.python.org/3/library/stdtypes.html#string-methods</a>, включая метод <code class=\"code\">split</code></li>\r\n                <li>Напомним, что у list есть несколько методов, согласно <a href=\"https://docs.python.org/3/tutorial/datastructures.html#more-on-lists\">docs.python.org/3/tutorial/datastructures.html#more-on-lists</a>, среди которых есть метод index.</li>\r\n                <li>Обратите внимание, что вы можете отформатировать начальные нули int с помощью подобного кода:</li>\r\n                <pre class=\"highlight\"><code>print(f\"{n:02}\")</code></pre>\r\n                <span>при этом, если n это одна цифра, перед ней будет стоять один 0 согласно <a href=\"https://docs.python.org/3/library/string.html#format-string-syntax\">docs.python.org/3/library/string.html#format-string-syntax</a> .</span>\r\n            </ul>\r\n        </details>\r\n        <h2>Демо</h2>\r\n        <div id=\"asciicast-container-iPkyZlnBAjrPTE75LLhJVenUd\" class=\"asciicast\" style=\"display: block; float: none; overflow: hidden; padding: 0px; margin: 20px 0px;\"><iframe src=\"https://asciinema.org/a/iPkyZlnBAjrPTE75LLhJVenUd/iframe?autoplay=1&amp;loop=1&amp;cols=80&amp;rows=12\" id=\"asciicast-iframe-iPkyZlnBAjrPTE75LLhJVenUd\" name=\"asciicast-iframe-iPkyZlnBAjrPTE75LLhJVenUd\" scrolling=\"no\" allowfullscreen=\"true\" style=\"overflow: hidden; margin: 0px; border: 0px; display: inline-block; width: 100%; float: none; visibility: visible; height: 465px;\"></iframe></div>\r\n        <h2>Перед тем как приступить к заданию</h2>\r\n        <p>Перейдите по ссылке <a href=\"https://code.cs50.io/\">code.cs50.io</a> и зайдите в свой аккаунт. Выполните команду <code class=\"code\">cd</code> в вашем терминальном окне. Ваше терминальное окно должно выглядить как представлено ниже:</p>\r\n        <pre class=\"highlight\"><code>$</code></pre>\r\n        <p>Следующая команда</p>\r\n        <pre class=\"highlight\"><code>mkdir outdated</code></pre>\r\n        <p>создаст папку <code class=\"code\">outdated</code> в вашем рабочем пространстве.</p>\r\n        <p>Затем выполните</p>\r\n        <pre class=\"highlight\"><code>cd outdated</code></pre>\r\n        <p>чтобы изменить директорию в папке. Вы должны увидеть в терминале <code class=\"code\">outdated/ $</code>. Вы можете сейчас выполнить</p>\r\n        <pre class=\"highlight\"><code>code outdated.py</code> </pre>\r\n        <p>чтобы создать файл с именем , в <code class=\"code\"> outdated.py</code> котором вы будете писать свою программу.</p>\r\n        <h2>Как проверить</h2>\r\n        <p>Вот как протестировать код вручную:</p>\r\n        <ul>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python outdated.py</code>. Введите <code class=\"code\">9/8/1636</code> и нажмите Enter. Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>1636-09-08</code></pre>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python outdated.py</code>. Введите <code class=\"code\">September 8, 1636</code> и нажмите Enter. Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>1636-09-08</code></pre>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python outdated.py</code>.  Введите 23/6/1912и нажмите Enter. Ваша программа должна повторно запросить дату у пользователя.</li>\r\n            <li>Запустите вашу программу с помощью <code class=\"code\">python outdated.py</code>. Введите <code class=\"code\">December 80, 1980</code> и нажмите Enter. Ваша программа должна повторно запросить дату у пользователя.</li>\r\n        </ul>\r\n        <p>Вы можете выполнить приведенную ниже команду, чтобы проверить свой код с помощью <code>check50</code>,являющейся программой которой CS50 будет проверять ваш код при отправке. Но перед отправкой обязательно протестируйте свой код сами!</p>\r\n        <pre  class=\"highlight\"><code>check50 cs50/problems/2022/python/outdated</code></pre>\r\n        <p>Зеленые смайлики означают, что ваша программа прошла проверку! Красные означают, что ваша программа выводит что-то неожиданное. Посетите URL-адрес, который выводит <code class=\"code\">check50</code>, чтобы увидеть ответ <code class=\"code\">check50</code>, переданный вашей программе, какой вывод она ожидала и какой вывод фактически выдала ваша программа.</p>\r\n        <h2>Как отправить</h2>\r\n        <p> В своем терминале выполните следующее, чтобы отправить свою работу.</p>\r\n        <pre class=\"highlight\"><code>submit50 cs50/problems/2022/python/outdated</code></pre>\r\n    </main>\r\n</template>","import { render } from \"./PsetsOutdated.vue?vue&type=template&id=31dc2517\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ммм\\\\Desktop\\\\cs50-python-ru\\\\cs50-python-ru\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n    <main>\r\n        <h1>Продуктовый список(Grocery List)</h1>\r\n        <p>Предположим, у вас есть привычка составлять список продуктов, которые вам нужны в продуктовом магазине.</p>\r\n        <p>В файле с именем <code class=\"code\">grocery.py</code> реализуйте программу, которая запрашивает у пользователя элементы, по одному в строке, до тех пор, пока пользователь не введет control-d (что является распространенным способом завершения ввода в программу). Затем выведите список продуктов пользователя в верхнем регистре, отсортированный в алфавитном порядке по элементам, с префиксом каждой строки, указывающим, сколько раз пользователь ввел этот элемент. Не нужно ставить элементы во множественное число. Обрабатывайте ввод пользователя без учета регистра.</p>\r\n        <details>\r\n            <summary>Подсказки</summary>\r\n            <ul>\r\n                <li>Обратите внимание, что вы можете определить, когда пользователь ввел control-d, перехватив <a href=\"https://docs.python.org/3/library/exceptions.html#EOFError\">EOFError</a> такой код:</li>\r\n                <pre class=\"highlight\"><code>try:\r\n    item = input()\r\nexcept EOFError:\r\n    ...</code></pre>\r\n                <li>Скорее всего, вы захотите сохранить свой список покупок в виде файла dict.</li>\r\n                <li>Обратите внимание, что у <code class=\"code\">dict</code> есть несколько методов <a href=\"https://docs.python.org/3/library/stdtypes.html#mapping-types-dict\">docs.python.org/3/library/stdtypes.html#mapping-types-dict</a>, среди которых и метод <code class=\"code\">get</code>, а также он поддерживает такие операции, как:</li>\r\n                <pre class=\"highlight\"><code>d[key]</code></pre>\r\n                <span>и</span>\r\n                <pre class=\"highlight\"><code>if key in d:\r\n    ...</code></pre>\r\n                <span>где <code class=\"code\">d</code> это <code class=\"code\">dict</code> и <code class=\"code\">key</code> это <code class=\"code\">str</code>.</span>\r\n                <li>Удостоверьтесь, что избежали или поймали  KeyError.</li>\r\n            </ul>\r\n        </details>\r\n        <h2>Демо</h2>\r\n        <div id=\"asciicast-container-oBVcf1rps4m8egqd3QTZmbwAl\" class=\"asciicast\" style=\"display: block; float: none; overflow: hidden; padding: 0px; margin: 20px 0px;\"><iframe src=\"https://asciinema.org/a/oBVcf1rps4m8egqd3QTZmbwAl/iframe?autoplay=1&amp;loop=1&amp;cols=80&amp;rows=12\" id=\"asciicast-iframe-oBVcf1rps4m8egqd3QTZmbwAl\" name=\"asciicast-iframe-oBVcf1rps4m8egqd3QTZmbwAl\" scrolling=\"no\" allowfullscreen=\"true\" style=\"overflow: hidden; margin: 0px; border: 0px; display: inline-block; width: 100%; float: none; visibility: visible; height: 455px;\"></iframe></div>\r\n        <h2>Перед тем как приступить к заданию</h2>\r\n        <p>Перейдите по ссылке <a href=\"https://code.cs50.io/\">code.cs50.io</a> и зайдите в свой аккаунт. Выполните команду <code class=\"code\">cd</code> в вашем терминальном окне. Ваше терминальное окно должно выглядить как представлено ниже:</p>\r\n        <pre class=\"highlight\"><code>$</code></pre>\r\n        <p>Следующая команда</p>\r\n        <pre class=\"highlight\"><code>mkdir grocery</code></pre>\r\n        <p>создаст папку <code class=\"code\">grocery</code> в вашем рабочем пространстве.</p>\r\n        <p>Затем выполните</p>\r\n        <pre class=\"highlight\"><code>cd grocery</code></pre>\r\n        <p>чтобы изменить директорию в папке. Вы должны увидеть в терминале <code class=\"code\">grocery/ $</code>. Вы можете сейчас выполнить</p>\r\n        <pre class=\"highlight\"><code>code grocery.py</code> </pre>\r\n        <p>чтобы создать файл с именем , в <code class=\"code\"> grocery.py</code> котором вы будете писать свою программу.</p>\r\n        <h2>Как проверить</h2>\r\n        <p>Вот как протестировать код вручную:</p>\r\n        <ul>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python grocery.py</code>. Введите mangoи нажмите Enter, затем введите strawberryи нажмите Enter, а затем Ctrl-d. Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>1 MANGO\r\n1 STRAWBERRY</code></pre>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python grocery.py</code>. Введите milkи нажмите Enter, затем введите milkеще раз и нажмите Enter, а затем Ctrl-d. Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>2 MILK</code></pre>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python grocery.py</code>.  Введите tortillaи нажмите Enter, затем введите sweet potatoи нажмите Enter, а затем Ctrl-d. Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>1 SWEET POTATO\r\n1 TORTILLA</code></pre>\r\n        </ul>\r\n        <p>Вы можете выполнить приведенную ниже команду, чтобы проверить свой код с помощью <code>check50</code>,являющейся программой которой CS50 будет проверять ваш код при отправке. Но перед отправкой обязательно протестируйте свой код сами!</p>\r\n        <pre  class=\"highlight\"><code>check50 cs50/problems/2022/python/grocery</code></pre>\r\n        <p>Зеленые смайлики означают, что ваша программа прошла проверку! Красные означают, что ваша программа выводит что-то неожиданное. Посетите URL-адрес, который выводит <code class=\"code\">check50</code>, чтобы увидеть ответ <code class=\"code\">check50</code>, переданный вашей программе, какой вывод она ожидала и какой вывод фактически выдала ваша программа.</p>\r\n        <h2>Как отправить</h2>\r\n        <p> В своем терминале выполните следующее, чтобы отправить свою работу.</p>\r\n        <pre class=\"highlight\"><code>submit50 cs50/problems/2022/python/grocery</code></pre>\r\n    </main>\r\n</template>","import { render } from \"./AdieuAdieu.vue?vue&type=template&id=65778d45\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ммм\\\\Desktop\\\\cs50-python-ru\\\\cs50-python-ru\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n    <main>\r\n        <h1>Emojize</h1>\r\n        <p>Поскольку смайлики не так легко набирать, как текст, по крайней мере, на ноутбуках и настольных компьютерах, некоторые программы поддерживают «коды», с помощью которых вы можете ввести, например, , который будет автоматически преобразован <code class=\"code\">:thumbs_up:</code> в 👍. Некоторые программы дополнительно поддерживают псевдонимы, благодаря чему вы можете более лаконично набирать, например, <code class=\"code\">:thumbsup:</code>, который также будет автоматически преобразован в 👍.</p>\r\n        <p>См. <a href=\"https://carpedm20.github.io/emoji/all.html?enableList=enable_list_alias\">carpedm20.github.io/emoji/all.html?enableList=enable_list_alias</a> для списка кодов с псевдонимами.</p>\r\n        <p>В файле с именем <code class=\"code\">emojize.py</code> реализуйте программу, которая запрашивает у пользователя a <code class=\"code\">str</code> на английском языке, а затем выводит «смайликовую» версию этого <code class=\"code\">str</code>, преобразуя любые коды (или псевдонимы) в них в соответствующие смайлики.</p>\r\n        <details>\r\n            <summary>Подсказки</summary>\r\n            <ul>\r\n                <li>Не забывайте, что <code class=\"code\">str</code> имеет несколько методов, согласно <a href=\"https://docs.python.org/3/library/stdtypes.html#string-methods\">docs.python.org/3/library/stdtypes.html#string-methods</a>, включая метод split.</li>\r\n                <li>Обратите внимание, что вы можете обрабатывать два исключения отдельно с помощью такого кода:</li>\r\n                <pre class=\"highlight\"><code>try:\r\n    ...\r\nexcept ValueError:\r\n    ...\r\nexcept ZeroDivisionError:\r\n    ...</code></pre>\r\n                <span>Или вы можете обрабатывать два исключения вместе, например:</span>\r\n                <pre class=\"highlight\"><code>try:\r\n    ...\r\nexcept (ValueError, ZeroDivisionError):\r\n    ...</code></pre>\r\n            </ul>\r\n        </details>\r\n        <h2>Демо</h2>\r\n        <iframe src=\"https://asciinema.org/a/6uEeFIieYqM2tlaKcYxA5jA5n/iframe?autoplay=1&amp;loop=1&amp;cols=80&amp;rows=12\" id=\"asciicast-iframe-6uEeFIieYqM2tlaKcYxA5jA5n\" name=\"asciicast-iframe-6uEeFIieYqM2tlaKcYxA5jA5n\" scrolling=\"no\" allowfullscreen=\"true\" style=\"overflow: hidden; margin: 0px; border: 0px; display: inline-block; width: 100%; float: none; visibility: visible; height: 494px;\"></iframe>\r\n        <h2>Перед тем как приступить к заданию</h2>\r\n        <p>Перейдите по ссылке <a href=\"https://code.cs50.io/\">code.cs50.io</a> и зайдите в свой аккаунт. Выполните команду <code class=\"code\">cd</code> в вашем терминальном окне. Ваше терминальное окно должно выглядить как представлено ниже:</p>\r\n        <pre class=\"highlight\"><code>$</code></pre>\r\n        <p>Следующая команда</p>\r\n        <pre class=\"highlight\"><code>mkdir fuel</code></pre>\r\n        <p>создаст папку <code class=\"code\">fuel</code> в вашем рабочем пространстве.</p>\r\n        <p>Затем выполните</p>\r\n        <pre class=\"highlight\"><code>cd fuel</code></pre>\r\n        <p>чтобы изменить директорию в папке. Вы должны увидеть в терминале <code class=\"code\">fuel/ $</code>. Вы можете сейчас выполнить</p>\r\n        <pre class=\"highlight\"><code>code fuel.py</code> </pre>\r\n        <p>чтобы создать файл с именем , в <code class=\"code\"> fuel.py</code> котором вы будете писать свою программу.</p>\r\n        <h2>Как проверить</h2>\r\n        <p>Вот как протестировать код вручную:</p>\r\n        <ul>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python fuel.py</code>. Введите  <code class=\"code\">3/4</code> и нажмите Enter. Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>75%</code></pre>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python fuel.py</code>. Введите  <code class=\"code\">1/4</code> и нажмите Enter. Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>25%</code></pre>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python fuel.py</code>. Введите  <code class=\"code\">4/4</code> и нажмите Enter. Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>F</code></pre>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python fuel.py</code>. Введите  <code class=\"code\">0/4</code> и нажмите Enter. Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>E</code></pre>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python fuel.py</code>.Введите <code class=\"code\">4/0</code> и нажмите Enter. Ваша программа должна обрабатывать <a href=\"https://docs.python.org/3/library/exceptions.html#ZeroDivisionError\">ZeroDivisionError</a>и снова делать запрос дроби у пользователя.</li>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python fuel.py</code>.Введите <code class=\"code\">three/four</code> и нажмите Enter. Ваша программа должна обрабатывать <a href=\"https://docs.python.org/3/library/exceptions.html#ValueError\">ValueError</a>и снова делать запрос дроби у пользователя.</li>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python fuel.py</code>.Введите <code class=\"code\">1.5/3</code> и нажмите Enter. Ваша программа должна обрабатывать <a href=\"https://docs.python.org/3/library/exceptions.html#ValueError\">ValueError</a>и снова делать запрос дроби у пользователя.</li>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python fuel.py</code>.Введите <code class=\"code\">5/4</code> и нажмите Enter. Ваша программа должна снова делать запрос дроби у пользователя.</li>\r\n        </ul>\r\n        <p>Вы можете выполнить приведенную ниже команду, чтобы проверить свой код с помощью <code>check50</code>,являющейся программой которой CS50 будет проверять ваш код при отправке. Но перед отправкой обязательно протестируйте свой код сами!</p>\r\n        <pre  class=\"highlight\"><code>check50 cs50/problems/2022/python/fuel</code></pre>\r\n        <p>Зеленые смайлики означают, что ваша программа прошла проверку! Красные означают, что ваша программа выводит что-то неожиданное. Посетите URL-адрес, который выводит <code class=\"code\">check50</code>, чтобы увидеть ответ <code class=\"code\">check50</code>, переданный вашей программе, какой вывод она ожидала и какой вывод фактически выдала ваша программа.</p>\r\n        <h2>Как отправить</h2>\r\n        <p> В своем терминале выполните следующее, чтобы отправить свою работу.</p>\r\n        <pre class=\"highlight\"><code>submit50 cs50/problems/2022/python/fuel</code></pre>\r\n    </main>\r\n</template>","import { render } from \"./BitcoinPriceIndex.vue?vue&type=template&id=ac0668e0\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ммм\\\\Desktop\\\\cs50-python-ru\\\\cs50-python-ru\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n    <main>\r\n        <h1>Felipe's Taqueria</h1>\r\n        <p>Одним из самых популярных мест, где можно поесть на <a href=\"https://en.wikipedia.org/wiki/Harvard_Square\">Гарвардской площади</a>, является Felipe's Taqueria, где предлагается <a href=\"https://www.felipesboston.com/menu\">меню</a> основных блюд, как показано в <code class=\"code\">dict</code> ниже, где значение каждого ключа это цена в долларах:</p>\r\n        <pre class=\"highlight\"><code>{\r\n    \"Baja Taco\": 4.00,\r\n    \"Burrito\": 7.50,\r\n    \"Bowl\": 8.50,\r\n    \"Nachos\": 11.00,\r\n    \"Quesadilla\": 8.50,\r\n    \"Super Burrito\": 8.50,\r\n    \"Super Quesadilla\": 9.50,\r\n    \"Taco\": 3.00,\r\n    \"Tortilla Salad\": 8.00\r\n}</code></pre>\r\n        <p>В файле с именем <code class=\"code\">taqueria.py</code> реализуйте программу, которая позволяет пользователю размещать заказ, предлагая ему ввести по одному блюду в строке, до тех пор, пока пользователь не введет control-d (что является распространенным способом завершения ввода в программу). После каждого введенного элемента отобразите общую стоимость всех введенных элементов со знаком доллара <code class=\"code\">($)</code> в начале и отформатируйте до двух знаков после запятой. Не обращайте внимание на регистр ввода пользователя. Игнорируйте любой ввод, который не является элементом из словаря. Предположим, что каждый пункт меню будет иметь <a href=\"https://docs.python.org/3/library/stdtypes.html#str.title\">заглавную букву</a>.</p>\r\n        <details>\r\n            <summary>Подсказки</summary>\r\n            <ul>\r\n                <li>Обратите внимание, что вы можете определить, когда пользователь ввел control-d, перехватив <a href=\"https://docs.python.org/3/library/exceptions.html#EOFError\">EOFError</a> такой код:</li>\r\n                <pre class=\"highlight\"><code>try:\r\n    item = input()\r\nexcept EOFError:\r\n    ...</code></pre>\r\n                <span>Возможно, вы захотите напечатать новую строку, чтобы курсор пользователя (и последующее приглашение) не оставался на той же строке, что и собственное приглашение вашей программы.</span>\r\n                <li>Ввод control-d также не требует ввода Enter, поэтому курсор пользователя (и последующий запрос) может оставаться на той же строке, на которой ваша программа делает запрос. Вы можете переместить курсор пользователя на новую строку, напечатав \\n!</li>\r\n                <li>Обратите внимание, что у <code class=\"code\">dict</code> есть несколько методов <a href=\"https://docs.python.org/3/library/stdtypes.html#mapping-types-dict\">docs.python.org/3/library/stdtypes.html#mapping-types-dict</a>, среди которых и метод <code class=\"code\">get</code>, а также он поддерживает такие операции, как:</li>\r\n                <pre class=\"highlight\"><code>d[key]</code></pre>\r\n                <span>и</span>\r\n                <pre class=\"highlight\"><code>if key in d:\r\n    ...</code></pre>\r\n                <span>где <code class=\"code\">d</code> это <code class=\"code\">dict</code> и <code class=\"code\">key</code> это <code class=\"code\">str</code>.</span>\r\n                <li>Удостоверьтесь, что избежали или поймали  KeyError.</li>\r\n            </ul>\r\n        </details>\r\n        <h2>Демо</h2>\r\n        <div id=\"asciicast-container-J20VZsCKXRPoavI0nFwCreRmr\" class=\"asciicast\" style=\"display: block; float: none; overflow: hidden; padding: 0px; margin: 20px 0px;\"><iframe src=\"https://asciinema.org/a/J20VZsCKXRPoavI0nFwCreRmr/iframe?autoplay=1&amp;loop=1&amp;cols=80&amp;rows=12\" id=\"asciicast-iframe-J20VZsCKXRPoavI0nFwCreRmr\" name=\"asciicast-iframe-J20VZsCKXRPoavI0nFwCreRmr\" scrolling=\"no\" allowfullscreen=\"true\" style=\"overflow: hidden; margin: 0px; border: 0px; display: inline-block; width: 100%; float: none; visibility: visible; height: 162px;\"></iframe></div>\r\n        <h2>Перед тем как приступить к заданию</h2>\r\n        <p>Перейдите по ссылке <a href=\"https://code.cs50.io/\">code.cs50.io</a> и зайдите в свой аккаунт. Выполните команду <code class=\"code\">cd</code> в вашем терминальном окне. Ваше терминальное окно должно выглядить как представлено ниже:</p>\r\n        <pre class=\"highlight\"><code>$</code></pre>\r\n        <p>Следующая команда</p>\r\n        <pre class=\"highlight\"><code>mkdir taqueria</code></pre>\r\n        <p>создаст папку <code class=\"code\">taqueria</code> в вашем рабочем пространстве.</p>\r\n        <p>Затем выполните</p>\r\n        <pre class=\"highlight\"><code>cd taqueria</code></pre>\r\n        <p>чтобы изменить директорию в папке. Вы должны увидеть в терминале <code class=\"code\">taqueria/ $</code>. Вы можете сейчас выполнить</p>\r\n        <pre class=\"highlight\"><code>code taqueria.py</code> </pre>\r\n        <p>чтобы создать файл с именем , в <code class=\"code\"> taqueria.py</code> котором вы будете писать свою программу.</p>\r\n        <h2>Как проверить</h2>\r\n        <p>Вот как протестировать код вручную:</p>\r\n        <ul>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python taqueria.py</code>. Введите  <code class=\"code\">Taco</code> и нажмите Enter, затем введите Taco. Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>Total: $6.00</code></pre>\r\n            <span>и продолжайте предлагать ввод пользователю, пока он не нажмет control-d.</span>\r\n            <li>Запустите вашу программу с помощью <code>python taqueria.py</code>. Введите <code class=\"code\">Baja Taco</code> и нажмите Enter, затем введите <code class=\"code\">Tortilla Salad</code> и нажмите Enter. Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>Total: $12.00</code></pre>\r\n           <span>и продолжайте предлагать пользователю ввод, пока он не нажмет control-d.</span>\r\n           <li>Запустите вашу программу с помощью <code>python taqueria.py</code>. Введите <code class=\"code\">Burger</code> и нажмите Enter. Ваша программа должна повторно сделать запрос у пользователя.</li>\r\n        </ul>\r\n        <p>Обязательно попробуйте другие продукты и измените регистр вашего ввода. Ваша программа должна вести себя так, как ожидалось, без учета регистра.</p>\r\n        <p>Вы можете выполнить приведенную ниже команду, чтобы проверить свой код с помощью <code>check50</code>,являющейся программой которой CS50 будет проверять ваш код при отправке. Но перед отправкой обязательно протестируйте свой код сами!</p>\r\n        <pre  class=\"highlight\"><code>check50 cs50/problems/2022/python/taqueria</code></pre>\r\n        <p>Зеленые смайлики означают, что ваша программа прошла проверку! Красные означают, что ваша программа выводит что-то неожиданное. Посетите URL-адрес, который выводит <code class=\"code\">check50</code>, чтобы увидеть ответ <code class=\"code\">check50</code>, переданный вашей программе, какой вывод она ожидала и какой вывод фактически выдала ваша программа.</p>\r\n        <h2>Как отправить</h2>\r\n        <p> В своем терминале выполните следующее, чтобы отправить свою работу.</p>\r\n        <pre class=\"highlight\"><code>submit50 cs50/problems/2022/python/taqueria</code></pre>\r\n    </main>\r\n</template>","import { render } from \"./FrankIanandGlensLetters.vue?vue&type=template&id=7f6f51c2\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ммм\\\\Desktop\\\\cs50-python-ru\\\\cs50-python-ru\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n    <main>\r\n        <h1>Outdated</h1>\r\n        <p>В Соединенных Штатах даты обычно форматируются в порядке <a href=\"https://en.wikipedia.org/wiki/Date_and_time_notation_in_the_United_States\">месяц-день-год (ММ/ДД/ГГГГ)</a>, также известном как <a href=\"https://en.wikipedia.org/wiki/Endianness#Middle-endian\">средний</a> порядок байтов, который, возможно, является плохим дизайном. Даты в этом формате не могут быть легко отсортированы, потому что год даты идет последним, а не первым. Попробуйте отсортировать, например, 2/2/1800, 3/3/1900, и в 1/1/2000хронологическом порядке в любой программе (например, электронной таблице). Даты в этом формате также неоднозначны. Гарвард был <a href=\"https://www.harvard.edu/about/history/\">основан</a> 8 сентября 1636 года, но 9/8/1636 также можно интерпретировать как 9 августа 1636 года!</p>\r\n        <p>К счастью, компьютеры, как правило, используют <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a>, международный стандарт, который предписывает, что даты должны быть отформатированы в порядке год-месяц-день (ГГГГ-ММ-ДД), независимо от страны, форматируя годы с четырьмя цифрами, месяцы с двумя цифрами, и дни с двумя цифрами, «дополняя» каждую начальными нулями по мере необходимости.</p>\r\n        <p>В файле с именем <code class=\"code\">outdated.py</code> реализуйте программу, которая запрашивает у пользователя дату,<a href=\"https://en.wikipedia.org/wiki/Anno_Domini\">anno Domini</a>, в порядке месяц-день-год, отформатированном как <code class=\"code\">9/8/1636</code> или <code class=\"code\">September 8, 1636</code>, где месяц в последнем может быть любым из следующих значений <code class=\"code\">list</code>:</p>\r\n        <pre class=\"highlight\"><code>[\r\n    \"January\",\r\n    \"February\",\r\n    \"March\",\r\n    \"April\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"August\",\r\n    \"September\",\r\n    \"October\",\r\n    \"November\",\r\n    \"December\"\r\n]</code></pre>\r\n        <p>Затем выведите ту же дату в формате <code class=\"code\">YYYY-MM-DD</code>. Если ввод пользователя не является допустимой датой ни в одном из форматов, запросите пользователя еще раз. Предположим, что в каждом месяце не более 31 дня; нет необходимости проверять, имеет ли месяц 28, 29, 30 или 31 день.</p>\r\n        <details>\r\n            <summary>Подсказки</summary>\r\n            <ul>\r\n                <li>Напомним, что a <code class=\"code\">str</code>поставляется с несколькими методами, согласно <a href=\"https://docs.python.org/3/library/stdtypes.html#string-methods\">docs.python.org/3/library/stdtypes.html#string-methods</a>, включая <code class=\"code\">split</code></li>\r\n                <li>Напомним, что a listпоставляется с несколькими методами, согласно <a href=\"https://docs.python.org/3/tutorial/datastructures.html#more-on-lists\">docs.python.org/3/tutorial/datastructures.html#more-on-lists</a> , среди которых есть index.</li>\r\n                <li>Обратите внимание, что вы можете отформатировать int начальные нули с помощью кода, подобного</li>\r\n                <pre class=\"highlight\"><code>print(f\"{n:02}\")</code></pre>\r\n                <span>при этом, если n это одна цифра, перед ней будет стоять единица 0 согласно <a href=\"https://docs.python.org/3/library/string.html#format-string-syntax\">docs.python.org/3/library/string.html#format-string-syntax</a> .</span>\r\n            </ul>\r\n        </details>\r\n        <h2>Демо</h2>\r\n        <div id=\"asciicast-container-iPkyZlnBAjrPTE75LLhJVenUd\" class=\"asciicast\" style=\"display: block; float: none; overflow: hidden; padding: 0px; margin: 20px 0px;\"><iframe src=\"https://asciinema.org/a/iPkyZlnBAjrPTE75LLhJVenUd/iframe?autoplay=1&amp;loop=1&amp;cols=80&amp;rows=12\" id=\"asciicast-iframe-iPkyZlnBAjrPTE75LLhJVenUd\" name=\"asciicast-iframe-iPkyZlnBAjrPTE75LLhJVenUd\" scrolling=\"no\" allowfullscreen=\"true\" style=\"overflow: hidden; margin: 0px; border: 0px; display: inline-block; width: 100%; float: none; visibility: visible; height: 465px;\"></iframe></div>\r\n        <h2>Перед тем как приступить к заданию</h2>\r\n        <p>Перейдите по ссылке <a href=\"https://code.cs50.io/\">code.cs50.io</a> и зайдите в свой аккаунт. Выполните команду <code class=\"code\">cd</code> в вашем терминальном окне. Ваше терминальное окно должно выглядить как представлено ниже:</p>\r\n        <pre class=\"highlight\"><code>$</code></pre>\r\n        <p>Следующая команда</p>\r\n        <pre class=\"highlight\"><code>mkdir outdated</code></pre>\r\n        <p>создаст папку <code class=\"code\">outdated</code> в вашем рабочем пространстве.</p>\r\n        <p>Затем выполните</p>\r\n        <pre class=\"highlight\"><code>cd outdated</code></pre>\r\n        <p>чтобы изменить директорию в папке. Вы должны увидеть в терминале <code class=\"code\">outdated/ $</code>. Вы можете сейчас выполнить</p>\r\n        <pre class=\"highlight\"><code>code outdated.py</code> </pre>\r\n        <p>чтобы создать файл с именем , в <code class=\"code\"> outdated.py</code> котором вы будете писать свою программу.</p>\r\n        <h2>Как проверить</h2>\r\n        <p>Вот как протестировать код вручную:</p>\r\n        <ul>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python outdated.py</code>. Введите <code class=\"code\">9/8/1636</code> и нажмите Enter. Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>1636-09-08</code></pre>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python outdated.py</code>. Введите <code class=\"code\">September 8, 1636</code> и нажмите Enter. Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>1636-09-08</code></pre>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python outdated.py</code>.  Введите 23/6/1912и нажмите Enter. Ваша программа должна повторно подсказывать пользователю.</li>\r\n            <li>Запустите вашу программу с помощью <code class=\"code\">python outdated.py</code>. Введите <code class=\"code\">December 80, 1980</code> и нажмите Enter. Ваша программа должна повторно подсказывать пользователю.</li>\r\n        </ul>\r\n        <p>Вы можете выполнить приведенную ниже команду, чтобы проверить свой код с помощью <code>check50</code>,являющейся программой которой CS50 будет проверять ваш код при отправке. Но перед отправкой обязательно протестируйте свой код сами!</p>\r\n        <pre  class=\"highlight\"><code>check50 cs50/problems/2022/python/outdated</code></pre>\r\n        <p>Зеленые смайлики означают, что ваша программа прошла проверку! Красные означают, что ваша программа выводит что-то неожиданное. Посетите URL-адрес, который выводит <code class=\"code\">check50</code>, чтобы увидеть ответ <code class=\"code\">check50</code>, переданный вашей программе, какой вывод она ожидала и какой вывод фактически выдала ваша программа.</p>\r\n        <h2>Как отправить</h2>\r\n        <p> В своем терминале выполните следующее, чтобы отправить свою работу.</p>\r\n        <pre class=\"highlight\"><code>submit50 cs50/problems/2022/python/outdated</code></pre>\r\n    </main>\r\n</template>","import { render } from \"./GuessingGame.vue?vue&type=template&id=2896039a\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ммм\\\\Desktop\\\\cs50-python-ru\\\\cs50-python-ru\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n    <main>\r\n        <h1>Emojize</h1>\r\n        <p>Поскольку смайлики не так легко набирать, как текст, по крайней мере, на ноутбуках и настольных компьютерах, некоторые программы поддерживают «коды», с помощью которых вы можете ввести, например, , который будет автоматически преобразован <code class=\"code\">:thumbs_up:</code> в 👍. Некоторые программы дополнительно поддерживают псевдонимы, благодаря чему вы можете более лаконично набирать, например, <code class=\"code\">:thumbsup:</code>, который также будет автоматически преобразован в 👍.</p>\r\n        <p>См. <a href=\"https://carpedm20.github.io/emoji/all.html?enableList=enable_list_alias\">carpedm20.github.io/emoji/all.html?enableList=enable_list_alias</a> для списка кодов с псевдонимами.</p>\r\n        <p>В файле с именем <code class=\"code\">emojize.py</code> реализуйте программу, которая запрашивает у пользователя a <code class=\"code\">str</code> на английском языке, а затем выводит «смайликовую» версию этого <code class=\"code\">str</code>, преобразуя любые коды (или псевдонимы) в них в соответствующие смайлики.</p>\r\n        <details>\r\n            <summary>Подсказки</summary>\r\n            <ul>\r\n                <li>Не забывайте, что <code class=\"code\">str</code> имеет несколько методов, согласно <a href=\"https://docs.python.org/3/library/stdtypes.html#string-methods\">docs.python.org/3/library/stdtypes.html#string-methods</a>, включая метод split.</li>\r\n                <li>Обратите внимание, что вы можете обрабатывать два исключения отдельно с помощью такого кода:</li>\r\n                <pre class=\"highlight\"><code>try:\r\n    ...\r\nexcept ValueError:\r\n    ...\r\nexcept ZeroDivisionError:\r\n    ...</code></pre>\r\n                <span>Или вы можете обрабатывать два исключения вместе, например:</span>\r\n                <pre class=\"highlight\"><code>try:\r\n    ...\r\nexcept (ValueError, ZeroDivisionError):\r\n    ...</code></pre>\r\n            </ul>\r\n        </details>\r\n        <h2>Демо</h2>\r\n        <iframe src=\"https://asciinema.org/a/6uEeFIieYqM2tlaKcYxA5jA5n/iframe?autoplay=1&amp;loop=1&amp;cols=80&amp;rows=12\" id=\"asciicast-iframe-6uEeFIieYqM2tlaKcYxA5jA5n\" name=\"asciicast-iframe-6uEeFIieYqM2tlaKcYxA5jA5n\" scrolling=\"no\" allowfullscreen=\"true\" style=\"overflow: hidden; margin: 0px; border: 0px; display: inline-block; width: 100%; float: none; visibility: visible; height: 494px;\"></iframe>\r\n        <h2>Перед тем как приступить к заданию</h2>\r\n        <p>Перейдите по ссылке <a href=\"https://code.cs50.io/\">code.cs50.io</a> и зайдите в свой аккаунт. Выполните команду <code class=\"code\">cd</code> в вашем терминальном окне. Ваше терминальное окно должно выглядить как представлено ниже:</p>\r\n        <pre class=\"highlight\"><code>$</code></pre>\r\n        <p>Следующая команда</p>\r\n        <pre class=\"highlight\"><code>mkdir fuel</code></pre>\r\n        <p>создаст папку <code class=\"code\">fuel</code> в вашем рабочем пространстве.</p>\r\n        <p>Затем выполните</p>\r\n        <pre class=\"highlight\"><code>cd fuel</code></pre>\r\n        <p>чтобы изменить директорию в папке. Вы должны увидеть в терминале <code class=\"code\">fuel/ $</code>. Вы можете сейчас выполнить</p>\r\n        <pre class=\"highlight\"><code>code fuel.py</code> </pre>\r\n        <p>чтобы создать файл с именем , в <code class=\"code\"> fuel.py</code> котором вы будете писать свою программу.</p>\r\n        <h2>Как проверить</h2>\r\n        <p>Вот как протестировать код вручную:</p>\r\n        <ul>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python fuel.py</code>. Введите  <code class=\"code\">3/4</code> и нажмите Enter. Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>75%</code></pre>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python fuel.py</code>. Введите  <code class=\"code\">1/4</code> и нажмите Enter. Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>25%</code></pre>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python fuel.py</code>. Введите  <code class=\"code\">4/4</code> и нажмите Enter. Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>F</code></pre>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python fuel.py</code>. Введите  <code class=\"code\">0/4</code> и нажмите Enter. Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>E</code></pre>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python fuel.py</code>.Введите <code class=\"code\">4/0</code> и нажмите Enter. Ваша программа должна обрабатывать <a href=\"https://docs.python.org/3/library/exceptions.html#ZeroDivisionError\">ZeroDivisionError</a>и снова делать запрос дроби у пользователя.</li>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python fuel.py</code>.Введите <code class=\"code\">three/four</code> и нажмите Enter. Ваша программа должна обрабатывать <a href=\"https://docs.python.org/3/library/exceptions.html#ValueError\">ValueError</a>и снова делать запрос дроби у пользователя.</li>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python fuel.py</code>.Введите <code class=\"code\">1.5/3</code> и нажмите Enter. Ваша программа должна обрабатывать <a href=\"https://docs.python.org/3/library/exceptions.html#ValueError\">ValueError</a>и снова делать запрос дроби у пользователя.</li>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python fuel.py</code>.Введите <code class=\"code\">5/4</code> и нажмите Enter. Ваша программа должна снова делать запрос дроби у пользователя.</li>\r\n        </ul>\r\n        <p>Вы можете выполнить приведенную ниже команду, чтобы проверить свой код с помощью <code>check50</code>,являющейся программой которой CS50 будет проверять ваш код при отправке. Но перед отправкой обязательно протестируйте свой код сами!</p>\r\n        <pre  class=\"highlight\"><code>check50 cs50/problems/2022/python/fuel</code></pre>\r\n        <p>Зеленые смайлики означают, что ваша программа прошла проверку! Красные означают, что ваша программа выводит что-то неожиданное. Посетите URL-адрес, который выводит <code class=\"code\">check50</code>, чтобы увидеть ответ <code class=\"code\">check50</code>, переданный вашей программе, какой вывод она ожидала и какой вывод фактически выдала ваша программа.</p>\r\n        <h2>Как отправить</h2>\r\n        <p> В своем терминале выполните следующее, чтобы отправить свою работу.</p>\r\n        <pre class=\"highlight\"><code>submit50 cs50/problems/2022/python/fuel</code></pre>\r\n    </main>\r\n</template>","import { render } from \"./LittleProfessor.vue?vue&type=template&id=7bf9a0be\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ммм\\\\Desktop\\\\cs50-python-ru\\\\cs50-python-ru\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n    <main>\r\n        <h1>Лекция 0</h1>\r\n        <ul>\r\n            <li><a href=\"#creating-code-with-python\">Написание кода на Python</a></li>\r\n            <li><a href=\"#functions\">Функции</a></li>\r\n            <li><a href=\"#bugs\">Баги</a></li>\r\n            <li><a href=\"#improving-your-first-python-program\">Улучшение вашей первой программы на Python</a></li>\r\n            <ul>\r\n                <li><a href=\"#variables\">Переменные</a></li>\r\n                <li><a href=\"#comments\">Комментарии</a></li>\r\n                <li><a href=\"#pseudocode\">Псевдокод</a></li>\r\n            </ul>\r\n            <li><a href=\"№further-improving-your-first-python-program\">Дальнейшее улучшение вашей первой программы на Python</a></li>\r\n            <li><a href=\"#strings-and-paremeters\">Строки и параметры</a></li>\r\n            <ul><li><a href=\"#a-small-problem-with-quotation-marks\">Небольшая проблема с кавычками</a></li></ul>\r\n            <li><a href=\"#formatting-strings\">Форматирование строк</a></li>\r\n            <li><a href=\"#more-on-strings\">Подробнее о строках</a></li>\r\n            <li><a href=\"#integers-or-int\">Целые числа или int</a></li>\r\n            <li><a href=\"#readability-wins\">Удобочитаемость выигрывает</a></li>\r\n            <li><a href=\"#float-basics\">Основы float</a></li>\r\n            <li><a href=\"#more-on-floats\">Подробнее о float</a></li>\r\n            <li><a href=\"#def\">Def</a></li>\r\n            <li><a href=\"#returning-values\">Возвращаемые значения</a></li>\r\n            <li><a href=\"#summing-up\">Подводя итог</a></li>\r\n        </ul>\r\n        <h2 id=\"creating-code-with-python\">Написание кода на Python</h2>\r\n        <ul>\r\n            <li>VS Code — это особый тип текстового редактора, который называется компилятором. Вверху вы увидите текстовый редактор, а внизу терминал, где вы можете выполнять команды.</li>\r\n            <li>В терминале вы можете выполнить команду <code class=\"code\">code hello.py</code> чтобы создать файл и начать писать код</li>\r\n            <li>В текстовом редакторе выше вы можете ввести <code class=\"code\">print(\"hello, world\")</code>. Это известная каноническая программа, которую почти все программисты пишут в процессе обучения.</li>\r\n            <li>В окне терминала вы можете выполнять команды. Чтобы запустить программу, вам нужно переместить курсор в нижнюю часть экрана, щелкнуть в окне терминала. Теперь вы можете ввести вторую команду в окне терминала. Рядом со знаком доллара введите <code class=\"code\">python hello.py</code>  и нажмите клавишу Enter на клавиатуре.</li>\r\n            <li>Напомним, что компьютеры понимают только нули и единицы. Поэтому когда вы выполняете команду <code class=\"code\">python hello.py </code> интерпретатор python будет  созданный вами файл <code class=\"code\">hello.py</code> переводить в нули и единицы, понятные компьютеру.</li>\r\n            <li>Результатом работы программы <code class=\"code\">python hello.py</code>, является вывод в терминал строки - <code class=\"code\">hello, world</code>.</li>\r\n            <li>Поздравляю! Вы только что создали свою первую программу.</li>\r\n        </ul>\r\n        <h2 id=\"functions\">Функции</h2>\r\n        <ul>\r\n            <li>Функции — это глаголы или действия, которые компьютер или компьютерный язык уже знают, как выполнять.</li>\r\n            <li>В вашей программе <code class=\"code\">hello.py</code> функция <code class=\"code\">print</code> умеет делать вывод каких либо данных в окно терминала.</li>\r\n            <li>Функция <code class=\"code\">print</code> принимает аргументы. В данном случае <code class=\"code\">\"hello, world\"</code>  это аргументы, которые принимает функция <code class=\"code\">print</code>.</li>\r\n        </ul>\r\n        <h2 id=\"bugs\">Баги</h2> \r\n        <ul>\r\n            <li>Ошибки являются естественной частью программирования. Ошибки - это проблемы, которые вы можете решать! Не расстраивайтесь! Это часть процесса становления великим программистом.</li>\r\n            <li>Представим в нашей программе <code class=\"code\">hello.py</code> случайно набранное <code class=\"code\">print(\"hello, world\"</code>  - заметьте, что мы пропустили <code class=\"code\">)</code> требуемый компилятором финал. Если я намеренно допущу эту ошибку, то компилятор выведет ошибку в окно терминала!</li>\r\n            <li>Часто сообщения об ошибках информируют вас о вашей ошибке и дают подсказки о том, как ее исправить. Однако в некоторых случаях компилятор не даст вам ответ в чем ваша ошибка.</li>\r\n        </ul>\r\n        <h2 id=\"improving-your-first-python-program\">Улучшение вашей первой программы на Python</h2>\r\n        <ul>\r\n            <li>Мы можем персонализировать вашу первую программу на Python.</li>\r\n            <li>В нашем текстовом редакторе в <code class=\"code\">hello.py</code> мы можем добавить еще одну функцию. input - это функция, которая принимает подсказку в качестве аргумента. Мы можем отредактировать наш код, как показано ниже: </li>\r\n            <pre class=\"highlight\"><code>input(\"What's your name? \")\r\nprint(\"hello, world\")</code></pre>\r\n            <li>Однако само по себе это редактирование не позволит вашей программе выводить то, что вводит ваш пользователь. Для этого нам нужно будет познакомить вас с переменными</li>\r\n        </ul>\r\n        <h3 id=\"variables\">Переменные</h3>\r\n        <ul>\r\n            <li>Переменная — это просто контейнер для значений в вашей программе.</li>\r\n            <li>В вашей программе вы можете ввести свою собственную переменную, отредактировав ее так:</li>\r\n            <pre class=\"highlight\"><code>name = input(\"What's your name? \")\r\nprint(\"hello, world\")</code></pre>\r\n            <p>Обратите внимание, что этот <code class=\"code\">= </code>знак равенства в середине <code class=\"code\">name = input(\"What's your name? \")</code> играет особую роль в программировании. Этот знак равенства буквально присваивает то, что справа, тому, что слева. Поэтому возвращаемое значение <code class=\"code\">input(\"What's your name? \")</code> присваивается <code class=\"code\">name</code>.</p>\r\n            <li>Если вы отредактируете свой код следующим образом, вы заметите ошибку</li>\r\n            <pre class=\"highlight\"><code>name = input(\"What's your name? \")\r\nprint(\"hello, name\")</code></pre>\r\n            <li>Программа вернется <code class=\"code\">hello, name</code> в окно терминала независимо от того, что вводит пользователь.</li>\r\n            <li>Дальнейшее редактирование нашего кода, может выглядить так:</li>\r\n            <pre class=\"highlight\"><code>name = input(\"What's your name? \")\r\nprint(\"hello,\")\r\nprint(name)</code></pre>\r\n            <li>Результат в окне терминала будет</li>\r\n            <pre class=\"highlight\"><code>What's your name? David\r\nhello\r\nDavid</code></pre>\r\n            <li>Мы стали ближе к желаемому результату!</li>\r\n            <li>Вы можете подробнее узнать о <a href=\"https://docs.python.org/3/library/datatypes.html\">типах данных</a> в документации Python</li>\r\n        </ul>\r\n        <h3 id=\"comments\">Комментарии</h3>\r\n        <ul>\r\n            <li>Комментарии — это способ для программистов отслеживать, что они делают в своих программах, и даже информировать других о своих намерениях относительно блока кода. Короче говоря, это заметки для вас и других, которые увидят ваш код!</li>\r\n            <li>Вы можете добавлять комментарии к своей программе, чтобы видеть, что она делает. Вы можете отредактировать свой код следующим образом:</li>\r\n            <pre class=\"highlight\"><code># Ask the user for their name(Спросить у пользователя его имя)\r\nname = input(\"What's your name? \")\r\nprint(\"hello,\")\r\nprint(name)</code></pre>\r\n            <li>Комментарии также могут служить для вас списком то что еще надо сделать в программе.</li>\r\n        </ul>\r\n        <h3 id=\"pseudocode\">Псевдокод</h3>\r\n        <ul>\r\n            <li>Псевдокод — это важный тип комментариев, который становится особым типом списка то что еще надо сделать, особенно когда вы не понимаете, как выполнить задачу. Например, вы можете отредактировать свой код, подобным образом:</li>\r\n            <pre class=\"highlight\"><code># Ask the user for their name(Спросить у пользователя его имя)\r\nname = input(\"What's your name? \")\r\n\r\n# Print hello(Вывести hello)\r\nprint(\"hello,\")\r\n\r\n# Print the name inputted(Вывести введенное имя)\r\nprint(name)</code></pre>\r\n        </ul>\r\n        <h2 id=\"further-improving-your-first-python-program\">Дальнейшее улучшение вашей первой программы на Python</h2>\r\n        <ul>\r\n            <li>Мы можем дополнительно отредактировать наш код следующим образом:</li>\r\n            <pre class=\"highlight\"><code># Ask the user for their name(Спросить у пользователя его имя)\r\nname = input(\"What's your name? \")\r\n\r\n# Print hello and the inputted name(Вывести hello и введенное имя)\r\nprint(\"hello, \" + name)</code></pre>\r\n            <li>Оказывается, некоторые функции принимают множество аргументов.</li>\r\n            <li>Мы можем использовать запятую <code class=\"code\">,</code> для передачи нескольких аргументов, отредактировав наш код следующим образом:</li>\r\n            <pre class=\"highlight\"><code># Ask the user for their name(Спросить у пользователя его имя)\r\nname = input(\"What's your name? \")\r\n\r\n# Print hello and the inputted name(Вывести hello и введенное имя)\r\nprint(\"hello,\", name)</code></pre>\r\n        <p>Если бы мы набрали «Дэвид», мы бы получили вывод в терминале <code class=\"code\">hello, David</code>. Ура.</p>\r\n        </ul>\r\n        <h2 id=\"strings-and-paremeters\">Строки и параметры</h2>\r\n        <ul>\r\n            <li>Строка, известная как str в Python, представляет собой последовательность текста.</li>\r\n            <li>Немного вернув наш код обратно к следующему, мы обнаружили визуальный побочный эффект, заключающийся в отображении результата на нескольких строках:</li>\r\n            <pre class=\"highlight\"><code># Ask the user for their name(Спросить у пользователя его имя)\r\nname = input(\"What's your name? \")\r\nprint(\"hello,\")\r\nprint(name)</code></pre>\r\n            <li>Функции принимают аргументы, влияющие на их поведение. Если мы посмотрим на документацию <a href=\"https://docs.python.org/3/library/functions.html#print\">print</a>, вы заметите, что мы можем многое узнать об аргументах, которые принимает функция печати.</li>\r\n            <li>Глядя на эту документацию, вы узнаете, что функция печати автоматически включает фрагмент кода <code class=\"code\">end='\\n'</code>. Этот индекатор <code class=\"code\">\\n </code>указывает, что функция печати автоматически создаст разрыв строки при запуске. Функция печати принимает аргумент с именем и по умолчанию создается новая строка.</li>\r\n            <li>Однако технически мы можем предоставить аргумент для end, чтобы новая строка не создавалась!</li>\r\n            <li>Мы можем изменить наш код следующим образом:</li>\r\n            <pre class=\"highlight\"><code># Ask the user for their name(Спросить у пользователя его имя)\r\nname = input(\"What's your name? \")\r\nprint(\"hello,\", end=\"\")\r\nprint(name)</code></pre>\r\n            <span>Предоставляя <code class=\"code\">end=\"\"</code>, мы перезаписываем значение по умолчанию <code class=\"code\">end</code>, так что оно не создает новую строку после первого оператора печати. Указав имя David, вывод в окне терминала будет <code class=\"code\">hello, David</code>.</span>\r\n            <li>Таким образом, параметры — это аргументы, которые может принимать функция.</li>\r\n            <li>Вы можете узнать больше в документации Python по <code class=\"code\"><a href=\"https://docs.python.org/3/library/functions.html#print\">print</a></code>.</li>\r\n        </ul>\r\n        <h3 id=\"a-small-problem-with-quotation-marks\">Небольшая проблема с кавычками</h3>\r\n        <ul>\r\n            <li>Обратите внимание, как сложно добавить кавычки в строку.</li>\r\n            <li><code class=\"code\">print(\"hello,\"friend\"\")</code>работать не будет и компилятор выдаст ошибку.</li>\r\n            <li>Как правило, есть два подхода к исправлению этого. Во-первых, вы можете просто изменить кавычки на одинарные кавычки.</li>\r\n            <li>Другим, более часто используемым подходом будет использование кода <code class=\"code\">print(\"hello, \\\"friend\\\"\")</code>. Обратная косая черта сообщает компилятору, что следующий символ следует рассматривать как кавычку в строке, чтобы избежать ошибки компилятора.</li>\r\n        </ul>\r\n        <h2 id=\"formatting-strings\">Форматирование строк</h2>\r\n        <ul>\r\n            <li>Вероятно, наиболее элегантным способом использования строк будет следующий:</li>\r\n            <pre class=\"highlight\"><code># Ask the user for their name(Спросить у пользователя его имя)\r\nname = input(\"What's your name? \")\r\nprint(f\"hello, {name}\")</code></pre>\r\n            <span>Обратите внимание на <code class=\"code\">f</code> в <code class=\"code\">print(f\"hello, {name}\")</code>. <code class=\"code\">f</code>-это специальный индикатор Python для обработки этой строки особым образом, отличным от предыдущих подходов, которые мы проиллюстрировали в этой лекции. Ожидайте, что вы будете использовать этот стиль строк довольно часто в этом курсе.</span>\r\n        </ul>\r\n        <h2 id=\"more-on-strings\">Подробнее о строках</h2>\r\n        <ul>\r\n            <li>Вы не должны ждать, что пользователь будет вести себя, как ожидалось. Следовательно, вам нужно будет убедиться, что ввод вашего пользователя исправлен или проверен.</li>\r\n            <li>Оказывается, в строки встроена возможность удалять пробелы из строки.</li>\r\n            <li>Применяя метод <code class=\"code\">strip</code> к переменной <code class=\"code\">name</code>,как это сделать: <code class=\"cide\">name = name.strip()</code>это удалит все пробелы слева и справа от пользовательского ввода. Вы можете изменить свой код, вот так:</li>\r\n            <pre class=\"highlight\"><code># Ask the user for their name(Спросить у пользователя его имя)\r\nname = input(\"What's your name? \")\r\n\r\n# Remove whitespace from the str(Удалить пробелы из строки(str))\r\nname = name.strip()\r\n\r\n# Print the output(Распечатать вывод)\r\nprint(f\"hello, {name}\")</code></pre>\r\n            <span>При повторном запуске этой программы, независимо от того, сколько пробелов вы наберете до или после name, она удалит все пробелы.</span>\r\n            <li>Используйте метод <code class=\"code\">title</code>, чтобы перевести в верхний регистр первую букву в имени:</li>\r\n            <pre class=\"highlight\"><code># Ask the user for their name(Спросить у пользователя его имя)\r\nname = input(\"What's your name? \")\r\n# Remove whitespace from the str(Удалить пробелы из строки(str))\r\nname = name.strip()\r\n# Capitalize the first letter of each word(Перевести в верхний регистр первую букву в слове)\r\nname = name.title()\r\n# Print the output(Распечатать вывод)\r\nprint(f\"hello, {name}\")\r\n</code></pre>\r\n            <li>К этому моменту вы, возможно, очень устали от многократного ввода <code class=\"code\">python</code> в окне терминала. Вы можете использовтаь стрелки вверх и вниз на вашей клавиатуре, чтобы увидеть самые последние команды терминала, которые вы вводили.</li>\r\n            <li>Обратите внимание, что вы можете изменить свой код, чтобы сделать его более эффективным:</li>\r\n            <pre class=\"highlight\"><code># Ask the user for their name(Спросить у пользователя его имя)\r\nname = input(\"What's your name? \")\r\n# Remove whitespace from the str and capitalize the first letter of each word(Удалить пробелы из строки(str) и перевести в верхний регистр первую букву в слове)\r\nname = name.strip().title()\r\n# Print the output(Распечатать вывод)\r\nprint(f\"hello, {name}\")</code></pre>\r\n            <span>Вывод будет тот же, что и в предыдущем коде.</span>\r\n            <li>Мы могли бы пойти еще дальше!</li>\r\n            <pre class=\"highlight\"><code># Ask the user for their name, remove whitespace from the str and capitalize the first letter of each word\r\nname = input(\"What's your name? \").strip().title()\r\n# Print the output\r\nprint(f\"hello, {name}\")</code></pre>\r\n        <li>Вы можете узнать больше о строках в документации Python <code class=\"code\"><a href=\"https://docs.python.org/3/library/stdtypes.html#str\">str</a></code></li>\r\n        </ul>\r\n        <h2 id=\"integers-or-int\">Целые числа или int</h2>\r\n        <ul>\r\n            <li>В Python целое число называется int.</li>\r\n            <li>В мире математики мы знакомы с операторами +, -, *, / и %. Этот последний оператор % или оператор по модулю может быть вам не очень знаком.</li>\r\n            <li>Вам не нужно использовать окно текстового редактора в компиляторе для запуска кода Python. В своем терминале вы можете написать <code class=\"code\">python</code>.И в окне терминала вы увидите >>>. Затем вы можете запустить живой интерактивный код. Вы можете ввести 1+1, и он запустит этот расчет. Этот режим будет использоваться во время этого курса.</li>\r\n            <li>Снова открыв VS Code, мы можем ввести <code class=\"code\">code calculator.py</code> в терминал. Это создаст новый файл, в котором мы создадим наш собственный калькулятор.</li>\r\n            <li>Во-первых, мы можем объявить несколько переменных.</li>\r\n            <pre class=\"highlight\"><code>x = 1\r\ny = 2\r\nz = x + y\r\nprint(z)</code></pre>\r\n            <span>Естественно при запуске <code class=\"code\">python calculator.py</code> мы получаем результат в окне терминала <code class=\"code\">3</code>. Мы можем сделать это более интерактивным, используя функцию <code class=\"code\">input</code>.</span>\r\n            <pre class=\"highlight\"><code>x = input(\"What's x? \")\r\ny = input(\"What's y? \")\r\nz = x + y\r\nprint(z)</code></pre>\r\n            <li>Запустив эту программу, мы обнаруживаем, что вывод неверен, так как вывод <code class=\"code\">12</code>. В чем может быть причина?</li>\r\n            <li>Ранее мы видели, как знак <code class=\"code\">+</code> объединяет две строки. Поскольку ваш ввод с клавиатуры на вашем компьютере поступает в компилятор в виде текста, он обрабатывается как строка. Поэтому нам нужно преобразовать этот ввод из строки в целое число. Мы можем сделать это следующим образом:</li>\r\n            <pre class=\"highlight\"><code>x = input(\"What's x? \")\r\ny = input(\"What's y? \")\r\nz = int(x) + int(y)\r\nprint(z)</code></pre>\r\n            <span>Теперь результат правильный. Использование int(x), называется «приведением», когда значение временно изменяется с одного типа переменной (в данном случае строки) на другой (здесь — целое число).</span>\r\n            <li>Мы можем улучшить нашу программу следующим образом:</li>\r\n            <pre class=\"highlight\"><code>x = int(input(\"What's x? \"))\r\ny = int(input(\"What's y? \"))\r\nprint(x + y)</code></pre>\r\n            <span>Это показывает, что вы можете запускать функции в функциях. Сначала запускается самая внутренняя функция, а затем запускается внешняя. Сначала функция <code class=\"code\">input</code> запускается. Затем функция <code class=\"code\">int</code>.</span>\r\n            <li>Вы можете узнать больше об <code class=\"code\"><a href=\"https://docs.python.org/3/library/functions.html?highlight=float#int\">int</a></code> из документации Python</li>\r\n        </ul>\r\n        <h2 id=\"readability-wins\">Удобочитаемость выигрывает</h2>\r\n        <li>Принимая решение о своем подходе к задачам программирования, помните, что можно привести разумные аргументы в пользу многих подходов к одной и той же проблеме.</li>\r\n        <li>Независимо от того, какой подход вы примете к задаче программирования, помните, что ваш код должен быть читабельным. Вы должны использовать комментарии, чтобы дать себе и другим подсказки о том, что делает ваш код. Кроме того, вы должны создавать код таким образом, чтобы он был удобочитаемым.</li>\r\n        <h2 id=\"float-basics\">Основы float</h2>\r\n        <li>Значение с плавающей запятой — это действительное число, содержащее десятичную точку, например <code class=\"code\">0.52</code>.</li>\r\n        <li>Вы можете изменить свой код чтобы он поддерживал float следующим образом:</li>\r\n        <pre class=\"highlight\"><code>x = float(input(\"What's x? \"))\r\ny = float(input(\"What's y? \"))\r\nprint(x + y)</code></pre>\r\n        <li>Это изменение позволяет вашему пользователю вводить <code class=\"code\">1.2</code> и <code class=\"code\">3.4</code> отображать их сумму <code class=\"code\">4.6</code>.</li>\r\n        <li>Однако давайте представим, что вы хотите округлить сумму до ближайшего целого числа. Посмотрев в документации Python на <code class=\"code\">round</code>, вы увидите, что доступны аргументы <code class=\"code\">round(number[n, ndigits])</code>. Эти квадратные скобки указывают на то, что программист может указать что-то необязательное. Следовательно, вы можете округлить цифру до ближайшего целого числа  <code class=\"code\">round(n)</code>. В качестве альтернативы ваш код может выглядить следующим образом:</li>\r\n        <pre class=\"highlight\"><code># Get the user's input\r\nx = float(input(\"What's x? \"))\r\ny = float(input(\"What's y? \"))\r\n# Create a rounded result\r\nz = round(x + y)\r\n# Print the result\r\nprint(z)</code></pre>\r\n        <span>Вывод будет округлен до ближайшего целого числа.</span>\r\n        <li>Что, если бы мы захотели отформатировать вывод длинных чисел? Например, вместо того, чтобы видеть <code class=\"code\">1000</code>, вы можете захотеть увидеть <code class=\"code\">1,000</code>. Вы можете изменить свой код следующим образом:</li>\r\n        <pre class=\"highlight\"><code># Get the user's input\r\nx = float(input(\"What's x? \"))\r\ny = float(input(\"What's y? \"))\r\n# Create a rounded result\r\nz = round(x + y)\r\n# Print the formatted result\r\nprint(f\"{z:,}\")</code></pre>\r\n        <span>Хотя это довольно загадочно, <code class=\"code\">print(f\"{z:,}\")</code> создает сценарий, в котором вывод <code class=\"code\">z</code> будет включать запятые, где результат может выглядеть как <code class=\"code\">1,000</code> или <code class=\"code\">2,500</code>.</span>\r\n        <h2 id=\"more-on-floats\">Подробнее о float</h2>\r\n        <li>Как мы можем округлить значения с плавающей запятой? Сначала измените код следующим образом:</li>\r\n        <pre class=\"highlight\"><code># Get the user's input\r\nx = float(input(\"What's x? \"))\r\ny = float(input(\"What's y? \"))\r\n\r\n# Calculate the result\r\nz = x / y\r\n\r\n# Print the result\r\nprint(z)\r\n</code></pre>\r\n        <li>При вводе x, как <code class=\"code\">2</code> и y, как <code class=\"code\">3</code>, результат z будет <code class=\"code\">0.6666666666</code> по-видимому, продолжается до бесконечности, как мы могли бы ожидать.</li>\r\n        <li>Давайте представим, что мы хотим округлить это значение в меньшую сторону, мы могли бы изменить наш код следующим образом:</li>\r\n        <pre class=\"highlight\"><code># Get the user's input\r\nx = float(input(\"What's x? \"))\r\ny = float(input(\"What's y? \"))\r\n\r\n# Calculate the result and round\r\nz = round(x / y, 2)\r\n\r\n# Print the result\r\nprint(z)</code></pre>\r\n        <span>Как и следовало ожидать, это округлит результат до ближайших двух знаков после запятой.</span>\r\n        <li>Мы также можем использовать <code class=\"code\">fstring</code> для форматирования вывода следующим образом:</li>\r\n        <pre class=\"highlight\"><code># Get the user's input\r\nx = float(input(\"What's x? \"))\r\ny = float(input(\"What's y? \"))\r\n\r\n# Calculate the result\r\nz = x / y\r\n\r\n# Print the result\r\nprint(f\"{z:.2f}\")</code></pre>\r\n        <span>Этот загадочный код <code class=\"code\">fstring</code> отображает то же самое, что и наша предыдущая стратегия округления.</span>\r\n        <li>Вы можете узнать больше о <a href=\"https://docs.python.org/3/library/functions.html?highlight=float#float\"><code class=\"code\">float</code></a> в документации Python</li>\r\n        <h2 id=\"def\">Def</h2>\r\n        <li>Было бы неплохо создать свои собственные функции?</li>\r\n        <li>Давайте вернем наш посдедний код <code class=\"code\">hello.py</code>, введя <code class=\"code\">code hello.py</code> в окно терминала. Ваш начальный код должен выглядеть следующим образом:</li>\r\n        <pre class=\"highlight\"><code># Ask the user for their name, remove whitespace from the str and capitalize the first letter of each word\r\nname = input(\"What's your name? \").strip().title()\r\n\r\n# Print the output\r\nprint(f\"hello, {name}\")</code></pre>\r\n        <span>Мы можем улучшить наш код, чтобы создать собственную специальную функцию, которая говорит нам \"hello!\"</span>\r\n        <li>Сотрите весь код в текстовом редакторе, и давайте начнем с нуля:</li>\r\n        <pre class=\"highlight\"><code>name = input(\"What's your name? \")\r\nhello()\r\nprint(name)</code></pre>\r\n        <span>При попытке запустить этот код ваш компилятор выдаст ошибку. В конце концов, не была создана функция <code class=\"code\">hello</code>.</span>\r\n        <li>Мы можем создать нашу собственную функцию с именем <code class=\"cd\">hello</code> следующим образом:</li>\r\n        <pre class=\"highlight\"><code>def hello():\r\n    print(\"hello\")\r\n\r\n\r\nname = input(\"What's your name? \")\r\nhello()\r\nprint(name)</code></pre>\r\n        <span>Обратите внимание, что все, что ниже <code class=\"code\">def hello()</code>, имеет отступ. Python — это язык с отступами. Он использует отступ, чтобы понять, что является частью вышеуказанной функции. Поэтому все в функции <code class=\"code\">hello</code> должно быть с отступом. Когда что-то не имеет отступа, оно обрабатывается так, как будто оно не находится внутри функции <code class=\"code\">hello</code>. Запустив <code class=\"code\">python hello.py</code> в окне терминала, вы увидите, что ваш вывод не совсем такой, как вам хотелось бы.</span>\r\n        <li>Мы можем еще улучшить наш код:</li>\r\n        <pre class=\"highlight\"><code># Create our own function\r\ndef hello(to):\r\n    print(\"hello,\", to)\r\n\r\n\r\n# Output using our own function\r\nname = input(\"What's your name? \")\r\nhello(name)</code></pre>\r\n        <span>Здесь, в первых строках, вы создаете свою функцию <code class=\"code\">hello</code>. Однако на этот раз вы сообщаете компилятору, что эта функция принимает единственный параметр: переменную с именем <code class=\"code\">to</code>. Поэтому при вызове <code class=\"code\">hello(name)</code> компьютер передает name в  функцию <code class=\"code\">hello</code> как <code class=\"code\">to</code>. Вот как мы передаем значения в функции. Очень полезно! Запустив <code class=\"code\">python hello.py</code> в окне терминала, вы увидите, что результат намного ближе к нашему идеалу, представленному ранее в этой лекции.</span>\r\n        <li>Мы можем изменить наш код, чтобы добавить значение по умолчанию для <code class=\"code\">hello</code>:</li>\r\n        <pre class=\"highlight\"><code># Create our own function\r\ndef hello(to=\"world\"):\r\n    print(\"hello,\", to)\r\n\r\n\r\n# Output using our own function\r\nname = input(\"What's your name? \")\r\nhello(name)\r\n\r\n# Output without passing the expected arguments\r\nhello()</code></pre>\r\n        <span>Проверьте свой код самостоятельно. Обратите внимание, как первое <code class=\"code\">hello</code> будет вести себя так, как вы ожидаете, а второе hello, которому не передано значение, по умолчанию будет выводить hello, world.</span>\r\n        <li>Нам не обязательно писать нашу функцию в начале нашей программы. Мы можем сдвинуть ее вниз, но нам нужно сообщить компилятору, что у нас есть функция <code class=\"code\">main</code> и отдельная функция <code class=\"code\">hello</code>.</li>\r\n        <pre class=\"highlight\"><code>def main():\r\n\r\n# Output using our own function\r\nname = input(\"What's your name? \")\r\nhello(name)\r\n\r\n# Output without passing the expected arguments\r\nhello()\r\n\r\n\r\n# Create our own function\r\ndef hello(to=\"world\"):\r\nprint(\"hello,\", to)</code></pre>\r\n        <span>Однако одно это создаст своего рода ошибку. Если мы запустим <code class=\"code\">python hello.py</code>, ничего не произойдет! Причина этого в том, что ничто в этом коде на самом деле не вызывает основную функцию и не оживляет нашу программу.</span>\r\n        <li>Следующая очень маленькая модификация вызовет функцию <code class=\"cide\">main</code> и наша программа начнет работать:</li>\r\n        <pre class=\"highlight\"><code>def main():\r\n\r\n# Output using our own function\r\nname = input(\"What's your name? \")\r\nhello(name)\r\n\r\n# Output without passing the expected arguments\r\nhello()\r\n\r\n\r\n# Create our own function\r\ndef hello(to=\"world\"):\r\nprint(\"hello,\", to)\r\n\r\n\r\nmain()</code></pre>\r\n        <h2 id=\"returning-values\">Возвращаемые значения</h2>\r\n        <li>Вы можете представить множество сценариев, в которых вы хотите, чтобы функция не только выполняла действие, но и возвращала значение обратно в основную функцию. Например, вместо того, чтобы просто печатать вычисление x + y, вы можете захотеть, чтобы функция возвращала значение этого вычисления обратно в другую часть вашей программы. Эту «возвращаемое значение» значения мы называем return.</li>\r\n        <li>Вернемся к нашему коду в <code class=\"code\">calculator.py</code>, набрав <code class=\"code\">code calculator.py</code>. Сотрите там весь код. Переработайте код следующим образом:</li>\r\n        <pre class=\"highlight\"><code>def main():\r\n    x = int(input(\"What's x? \"))\r\n    print(\"x squared is\", square(x))\r\n\r\n\r\ndef square(n):\r\n    return n * n\r\n\r\n\r\nmain()</code></pre>\r\n        <span><code class=\"code\">x</code> передается в <code class=\"code\">square</code>. Затем вычисление <code class=\"code\">x * x</code> возвращается обратно в функцию main.</span>\r\n        <h2 id=\"summing-up\">Подводя итог</h2>\r\n        <p>Благодаря работе на этой единственной лекции вы узнали способности, которые будете использовать бесчисленное количество раз в своих собственных программах. Вы узнали о…</p>\r\n        <ul>\r\n            <li>Написание кода на Python;</li>\r\n            <li>Функции;</li>\r\n            <li>Баги;</li>\r\n            <li>Переменные;</li>\r\n            <li>Комментарии;</li>\r\n            <li>Псевдокод;</li>\r\n            <li>Строки;</li>\r\n            <li>Параметры;</li>\r\n            <li>Форматирование строк;</li>\r\n            <li>Целые числа;</li>\r\n            <li>Принципы удобочитаемости;</li>\r\n            <li>float;</li>\r\n            <li>Создание собственных функций;</li>\r\n            <li>Возвращаемые значения.</li>\r\n        </ul>\r\n    </main>\r\n</template>\r\n\r\n\r\n","import { render } from \"./Notes4View.vue?vue&type=template&id=24e762da\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ммм\\\\Desktop\\\\cs50-python-ru\\\\cs50-python-ru\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n    <main>\r\n        <h1>Набор проблем 3</h1>\r\n        <h2>Что нужно делать</h2>\r\n        <ol>\r\n            <li>Войдите в <a href=\"https://code.cs50.io/\"> code.cs50.io</a>, облачную версию Visual Studio Code (VS Code), которая предоставляет собственное  кодовое пространство(Codespace) со всем что нужно для прохождения курса . Не нужно скачивать и устанавливать VS Code или Python на свой Mac или ПК!</li>\r\n            <li>Выполните update50 в окне терминала вашего Codespace, чтобы убедиться, что ваше пространство кода обновлено, при появлении запроса нажмите <b>Rebuild now</b>.</li>\r\n            <li>\r\n                <span>Отправьте все проблемы приведенные ниже:</span>\r\n                <ul>\r\n                    <li><router-link to=\"/4/emojize\">Emojize</router-link> </li>\r\n                    <li><router-link to=\"/4/figlet\">Frank, Ian and Glen's Letters</router-link> </li>\r\n                    <li><router-link to=\"/4/adieu\">Adieu, Adieu</router-link> </li>\r\n                    <li><router-link to=\"/4/game\">Guessing Game</router-link></li>\r\n                    <li><router-link to=\"/4/professor\">Little Professor</router-link></li>\r\n                    <li><router-link to=\"/4/bitcoin\">Bitcoin Price Index</router-link></li>\r\n                </ul>\r\n            </li>\r\n        </ol>\r\n    </main>\r\n</template>\r\n<style scoped>\r\nmain {\r\n    height: 100vh;\r\n}\r\n</style>","import { render } from \"./Psets4View.vue?vue&type=template&id=db6e76a2&scoped=true\"\nconst script = {}\n\nimport \"./Psets4View.vue?vue&type=style&index=0&id=db6e76a2&scoped=true&lang=css\"\n\nimport exportComponent from \"C:\\\\Users\\\\ммм\\\\Desktop\\\\cs50-python-ru\\\\cs50-python-ru\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-db6e76a2\"]])\n\nexport default __exports__","<template>\r\n    <main>\r\n        <h1>Emojize</h1>\r\n        <p>Поскольку смайлики не так легко набирать, как текст, по крайней мере, на ноутбуках и настольных компьютерах, некоторые программы поддерживают «коды», с помощью которых вы можете ввести смайлики, например,<code class=\"code\">:thumbs_up:</code>, который будет автоматически преобразован в 👍. Некоторые программы дополнительно поддерживают псевдонимы, благодаря чему вы можете быть более лаконичны, например, <code class=\"code\">:thumbsup:</code>, который также будет автоматически преобразован в 👍.</p>\r\n        <p>См. <a href=\"https://carpedm20.github.io/emoji/all.html?enableList=enable_list_alias\">carpedm20.github.io/emoji/all.html?enableList=enable_list_alias</a> - список кодов с псевдонимами.</p>\r\n        <p>В файле с именем <code class=\"code\">emojize.py</code> реализуйте программу, которая запрашивает у пользователя <code class=\"code\">str</code> на английском языке, а затем выводит «смайликовую» версию этого <code class=\"code\">str</code>, преобразуя любые коды (или псевдонимы) в них в соответствующие смайлики.</p>\r\n        <details>\r\n            <summary>Подсказки</summary>\r\n            <ul>\r\n                <li>Обратите внимание, что <code class=\"code\">emoji</code> модуль поставляется с двумя функциями, согласно <a href=\"https://pypi.org/project/emoji/\">pypi.org/project/emoji</a>, одна из которых — <code class=\"code\">emojize</code>, которая принимает необязательный именованный параметр с именем <code class=\"code\">language</code>. Вы можете установить его с помощью:</li>\r\n                <pre class=\"highlight\"><code>pip install emoji</code></pre>\r\n            </ul>\r\n        </details>\r\n        <h2>Демо</h2>\r\n        <div id=\"asciicast-container-04rf7dFZ6igDKrLWIYTonN4N1\" class=\"asciicast\" style=\"display: block; float: none; overflow: hidden; padding: 0px; margin: 20px 0px;\"><iframe src=\"https://asciinema.org/a/04rf7dFZ6igDKrLWIYTonN4N1/iframe?autoplay=1&amp;loop=1&amp;cols=80&amp;rows=12\" id=\"asciicast-iframe-04rf7dFZ6igDKrLWIYTonN4N1\" name=\"asciicast-iframe-04rf7dFZ6igDKrLWIYTonN4N1\" scrolling=\"no\" allowfullscreen=\"true\" style=\"overflow: hidden; margin: 0px; border: 0px; display: inline-block; width: 100%; float: none; visibility: visible; height: 465px;\"></iframe></div>\r\n        <h2>Перед тем как приступить к заданию</h2>\r\n        <p>Перейдите по ссылке <a href=\"https://code.cs50.io/\">code.cs50.io</a> и зайдите в свой аккаунт. Выполните команду <code class=\"code\">cd</code> в вашем терминальном окне. Ваше терминальное окно должно выглядить как представлено ниже:</p>\r\n        <pre class=\"highlight\"><code>$</code></pre>\r\n        <p>Следующая команда</p>\r\n        <pre class=\"highlight\"><code>mkdir emojize</code></pre>\r\n        <p>создаст папку <code class=\"code\">emojize</code> в вашем рабочем пространстве.</p>\r\n        <p>Затем выполните</p>\r\n        <pre class=\"highlight\"><code>cd emojize</code></pre>\r\n        <p>чтобы изменить директорию в папке. Вы должны увидеть в терминале <code class=\"code\">emojize/ $</code>. Вы можете сейчас выполнить</p>\r\n        <pre class=\"highlight\"><code>code emojize.py</code> </pre>\r\n        <p>чтобы создать файл с именем , в <code class=\"code\"> emojize.py</code> котором вы будете писать свою программу.</p>\r\n        <h2>Как проверить</h2>\r\n        <p>Вот как протестировать код вручную:</p>\r\n        <ul>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python emojize.py</code>. Введите <code class=\"code\">:1st_place_medal:</code> и нажмите Enter. Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>Output: 🥇</code></pre>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python emojize.py</code>.  Введите <code class=\"code\">:money_bag:</code> и нажмите Enter. Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>Output: 💰</code></pre>\r\n            <li>Запустите вашу программу с помощью команды <code class=\"code\">python emojize.py</code>.  Введите <code class=\"code\">:smile_cat:</code> и нажмите Enter. Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>Output: 😸</code></pre>\r\n        </ul>\r\n        <p>Вы можете выполнить приведенную ниже команду, чтобы проверить свой код с помощью <code>check50</code>,являющейся программой которой CS50 будет проверять ваш код при отправке. Но перед отправкой обязательно протестируйте свой код сами!</p>\r\n        <pre  class=\"highlight\"><code>check50 cs50/problems/2022/python/emojize</code></pre>\r\n        <p>Зеленые смайлики означают, что ваша программа прошла проверку! Красные означают, что ваша программа выводит что-то неожиданное. Посетите URL-адрес, который выводит <code class=\"code\">check50</code>, чтобы увидеть ответ <code class=\"code\">check50</code>, переданный вашей программе, какой вывод она ожидала и какой вывод фактически выдала ваша программа.</p>\r\n        <h2>Как отправить</h2>\r\n        <p> В своем терминале выполните следующее, чтобы отправить свою работу.</p>\r\n        <pre class=\"highlight\"><code>submit50 cs50/problems/2022/python/emojize</code></pre>\r\n    </main>\r\n</template>","import { render } from \"./PsetsEmojize.vue?vue&type=template&id=71bd50e3\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ммм\\\\Desktop\\\\cs50-python-ru\\\\cs50-python-ru\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["class","style","_createElementVNode","id","href","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_createVNode","_component_font","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","script","__exports__","render","width","height","src","title","frameborder","allow","allowfullscreen","_component_router_link","to","name","scrolling","alt"],"sourceRoot":""}