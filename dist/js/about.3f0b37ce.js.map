{"version":3,"file":"js/about.3f0b37ce.js","mappings":"qLACUA,MAAM,SAASC,MAAA,8C,GAEzBC,EAAAA,EAAAA,GAAiD,KAA9C,UAAQ,GAAGC,GAAG,UAAUF,MAAA,a,YAA6B,UAAQ,GAAGG,KAAK,Y,GAE6EA,KAAK,sD,GAAgZA,KAAK,+D,GAAsXA,KAAK,yE,GAEv6BJ,MAAM,oB,GAELA,MAAM,S,GASPA,MAAM,oB,GACLA,MAAM,S,GAEVE,EAAAA,EAAAA,GAAsD,QAAhDF,MAAM,oCAAkC,S,GAI9CE,EAAAA,EAAAA,GAAsD,QAAhDF,MAAM,oCAAkC,S,GAI9CE,EAAAA,EAAAA,GAAsD,QAAhDF,MAAM,oCAAkC,S,GAG1CA,MAAM,Q,2DA/BNK,EAAAA,EAAAA,IAoCG,OApCHC,EAoCG,CAlCPC,GAAiD,OAA+I,YAA3IL,EAAAA,EAAAA,GAAsI,IAAtIM,EAAsI,EAAxGC,EAAAA,EAAAA,IAAoGC,EAAAA,CAA9FT,MAAA,8BAAgC,C,kBAAC,IAAsD,EAAtDQ,EAAAA,EAAAA,IAAsDC,EAAAA,CAAhDT,MAAA,8BAAgC,C,kBAAC,IAAQ,UAAR,e,oBAEjKC,EAAAA,EAAAA,GAAisC,WAA9rCO,EAAAA,EAAAA,IAA+IC,EAAAA,CAAzIT,MAAA,8BAAgC,C,kBAAC,IAAiG,EAAjGQ,EAAAA,EAAAA,IAAiGC,EAAAA,CAA3FT,MAAA,8BAAgC,C,kBAAC,IAAmD,UAAnD,0D,gBAAiEC,EAAAA,EAAAA,GAAmN,IAAnNS,EAAmN,EAAtJF,EAAAA,EAAAA,IAAkJC,EAAAA,CAA5IT,MAAA,8BAAgC,C,kBAAC,IAAoG,EAApGQ,EAAAA,EAAAA,IAAoGC,EAAAA,CAA9FT,MAAA,8BAAgC,C,kBAAC,IAAsD,UAAtD,6D,kBAAwEQ,EAAAA,EAAAA,IAAkMC,EAAAA,CAA5LT,MAAA,8BAAgC,C,kBAAC,IAAkE,EAAlEQ,EAAAA,EAAAA,IAAkEC,EAAAA,CAA5DT,MAAA,8BAAgC,C,kBAAC,IAAoB,UAApB,2B,OAA2BQ,EAAAA,EAAAA,IAAkFC,EAAAA,CAA5ET,MAAA,8BAAgC,C,kBAAC,IAAoC,UAApC,2C,gBAAkDC,EAAAA,EAAAA,GAA8K,IAA9KU,EAA8K,EAAxGH,EAAAA,EAAAA,IAAoGC,EAAAA,CAA9FT,MAAA,8BAAgC,C,kBAAC,IAAsD,EAAtDQ,EAAAA,EAAAA,IAAsDC,EAAAA,CAAhDT,MAAA,8BAAgC,C,kBAAC,IAAQ,UAAR,e,kBAA0BQ,EAAAA,EAAAA,IAA6MC,EAAAA,CAAvMT,MAAA,8BAAgC,C,kBAAC,IAAkE,EAAlEQ,EAAAA,EAAAA,IAAkEC,EAAAA,CAA5DT,MAAA,8BAAgC,C,kBAAC,IAAoB,UAApB,2B,OAA2BQ,EAAAA,EAAAA,IAA6FC,EAAAA,CAAvFT,MAAA,8BAAgC,C,kBAAC,IAA+C,UAA/C,sD,gBAA6DC,EAAAA,EAAAA,GAA6L,IAA7LW,EAA6L,EAA7GJ,EAAAA,EAAAA,IAAyGC,EAAAA,CAAnGT,MAAA,8BAAgC,C,kBAAC,IAA2D,EAA3DQ,EAAAA,EAAAA,IAA2DC,EAAAA,CAArDT,MAAA,8BAAgC,C,kBAAC,IAAa,UAAb,oB,kBAA+BQ,EAAAA,EAAAA,IAA8FC,EAAAA,CAAxFT,MAAA,8BAAgC,C,kBAAC,IAAgD,EAAhDQ,EAAAA,EAAAA,IAAgDC,EAAAA,CAA1CT,MAAA,8BAAgC,C,kBAAC,IAAE,UAAF,S,kBAE7qCC,EAAAA,EAAAA,GAAsI,IAAtIY,EAAsI,EAA1GL,EAAAA,EAAAA,IAAsGC,EAAAA,CAAhGT,MAAA,8BAAgC,C,kBAAC,IAAwD,EAAxDQ,EAAAA,EAAAA,IAAwDC,EAAAA,CAAlDT,MAAA,8BAAgC,C,kBAAC,IAAU,UAAV,iB,kBAE1GC,EAAAA,EAAAA,GAOK,KAPLa,EAOK,EANLb,EAAAA,EAAAA,GAEmB,YADnBA,EAAAA,EAAAA,GAAqH,gBAA7GO,EAAAA,EAAAA,IAAoGC,EAAAA,CAA9FT,MAAA,8BAAgC,C,kBAAC,IAAsD,EAAtDQ,EAAAA,EAAAA,IAAsDC,EAAAA,CAAhDT,MAAA,8BAAgC,C,kBAAC,IAAQ,UAAR,e,kBAA+BQ,EAAAA,EAAAA,IACvGC,EAAAA,CAD6GT,MAAA,8BAAgC,C,kBAAC,IACrJ,EADqJQ,EAAAA,EAAAA,IACrJC,EAAAA,CAD2JT,MAAA,8BAAgC,C,kBAAC,IACnM,UADmM,oF,kBAEnMC,EAAAA,EAAAA,GAEmB,YADnBA,EAAAA,EAAAA,GAA0H,gBAAlHO,EAAAA,EAAAA,IAAyGC,EAAAA,CAAnGT,MAAA,8BAAgC,C,kBAAC,IAA2D,EAA3DQ,EAAAA,EAAAA,IAA2DC,EAAAA,CAArDT,MAAA,8BAAgC,C,kBAAC,IAAa,UAAb,oB,kBAAoCQ,EAAAA,EAAAA,IAC5GC,EAAAA,CADkHT,MAAA,8BAAgC,C,kBAAC,IAC1J,EAD0JQ,EAAAA,EAAAA,IAC1JC,EAAAA,CADgKT,MAAA,8BAAgC,C,kBAAC,IACxM,UADwM,iE,oBAIxMC,EAAAA,EAAAA,GAAkJ,IAAlJc,EAAkJ,EAAtHP,EAAAA,EAAAA,IAAkHC,EAAAA,CAA5GT,MAAA,8BAAgC,C,kBAAC,IAAoE,EAApEQ,EAAAA,EAAAA,IAAoEC,EAAAA,CAA9DT,MAAA,8BAAgC,C,kBAAC,IAAsB,UAAtB,6B,kBAC1GC,EAAAA,EAAAA,GAgBK,KAhBLe,EAgBK,EAfLf,EAAAA,EAAAA,GAGK,WAFLgB,GACAhB,EAAAA,EAAAA,GAAygB,aAApgBA,EAAAA,EAAAA,GAAsH,gBAA9GO,EAAAA,EAAAA,IAAqGC,EAAAA,CAA/FT,MAAA,8BAAgC,C,kBAAC,IAAuD,EAAvDQ,EAAAA,EAAAA,IAAuDC,EAAAA,CAAjDT,MAAA,8BAAgC,C,kBAAC,IAAS,UAAT,gB,kBAAgCQ,EAAAA,EAAAA,IAAwYC,EAAAA,CAAlYT,MAAA,8BAAgC,C,kBAAC,IAAsK,EAAtKQ,EAAAA,EAAAA,IAAsKC,EAAAA,CAAhKT,MAAA,8BAAgC,C,kBAAC,IAAwH,UAAxH,+H,OAA+HQ,EAAAA,EAAAA,IAAoLC,EAAAA,CAA9KT,MAAA,8BAAgC,C,kBAAC,IAAsI,UAAtI,6I,oBAE/WC,EAAAA,EAAAA,GAGK,WAFLiB,GACAjB,EAAAA,EAAAA,GAA6R,aAAxRA,EAAAA,EAAAA,GAA2H,gBAAnHO,EAAAA,EAAAA,IAA0GC,EAAAA,CAApGT,MAAA,8BAAgC,C,kBAAC,IAA4D,EAA5DQ,EAAAA,EAAAA,IAA4DC,EAAAA,CAAtDT,MAAA,8BAAgC,C,kBAAC,IAAc,UAAd,qB,kBAAqCQ,EAAAA,EAAAA,IAAuJC,EAAAA,CAAjJT,MAAA,8BAAgC,C,kBAAC,IAAyG,EAAzGQ,EAAAA,EAAAA,IAAyGC,EAAAA,CAAnGT,MAAA,8BAAgC,C,kBAAC,IAA2D,UAA3D,kE,oBAE9MC,EAAAA,EAAAA,GAGK,WAFLkB,GACAlB,EAAAA,EAAAA,GAA2W,aAAtWA,EAAAA,EAAAA,GAAuH,gBAA/GO,EAAAA,EAAAA,IAAsGC,EAAAA,CAAhGT,MAAA,8BAAgC,C,kBAAC,IAAwD,EAAxDQ,EAAAA,EAAAA,IAAwDC,EAAAA,CAAlDT,MAAA,8BAAgC,C,kBAAC,IAAU,UAAV,iB,kBAAiCQ,EAAAA,EAAAA,IAAyOC,EAAAA,CAAnOT,MAAA,8BAAgC,C,kBAAC,IAA2L,EAA3LQ,EAAAA,EAAAA,IAA2LC,EAAAA,CAArLT,MAAA,8BAAgC,C,kBAAC,IAA6I,UAA7I,oJ,oBAE1MC,EAAAA,EAAAA,GAEK,KAFLmB,EAEK,EADLnB,EAAAA,EAAAA,GAAqZ,aAAhZA,EAAAA,EAAAA,GAA+I,gBAAvIO,EAAAA,EAAAA,IAA8HC,EAAAA,CAAxHT,MAAA,8BAAgC,C,kBAAC,IAAgF,EAAhFQ,EAAAA,EAAAA,IAAgFC,EAAAA,CAA1ET,MAAA,8BAAgC,C,kBAAC,IAAkC,UAAlC,yC,kBAAyDQ,EAAAA,EAAAA,IAA2PC,EAAAA,CAArPT,MAAA,8BAAgC,C,kBAAC,IAA6M,EAA7MQ,EAAAA,EAAAA,IAA6MC,EAAAA,CAAvMT,MAAA,8BAAgC,C,kBAAC,IAA+J,UAA/J,sK,mCChClO,MAAMqB,EAAS,CAAC,EAGVC,GAA2B,OAAgBD,EAAQ,CAAC,CAAC,SAASE,KAEpE,O,2FCLOxB,MAAM,S,GACTE,EAAAA,EAAAA,GAAyB,UAArB,oBAAgB,G,GACpBA,EAAAA,EAAAA,GAAwR,UAAhRuB,MAAM,OAAOC,OAAO,MAAMC,IAAI,4CAA4CC,MAAM,2CAA2CC,YAAY,IAAIC,MAAM,sGAAsGC,gBAAA,I,muDAD/PxB,EACAC,EACAG,G,kCAHFN,EAAAA,EAAAA,IA4DM,MA5DNC,EA4DM,E,aC5DR,MAAMgB,EAAS,CAAC,EAGVC,GAA2B,OAAgBD,EAAQ,CAAC,CAAC,SAASE,KAEpE,O,2FCLSxB,MAAM,S,GACTE,EAAAA,EAAAA,GAAoC,UAAhC,+BAA2B,G,GAC/BA,EAAAA,EAAAA,GAAgR,UAAxQuB,MAAM,OAAOC,OAAO,MAAMC,IAAI,4CAA4CC,MAAM,mCAAmCC,YAAY,IAAIC,MAAM,sGAAsGC,gBAAA,I,0tDADvPxB,EACAC,EACAG,G,kCAHFN,EAAAA,EAAAA,IA2DM,MA3DNC,EA2DM,E,aC3DV,MAAMgB,EAAS,CAAC,EAGVC,GAA2B,OAAgBD,EAAQ,CAAC,CAAC,SAASE,KAEpE,O,2FCLSxB,MAAM,S,GACTE,EAAAA,EAAAA,GAAuB,UAAnB,kBAAc,G,GAClBA,EAAAA,EAAAA,GAAyQ,UAAjQuB,MAAM,OAAOC,OAAO,MAAMC,IAAI,4CAA4CC,MAAM,4BAA4BC,YAAY,IAAIC,MAAM,sGAAsGC,gBAAA,I,inBADhPxB,EACAC,EACAG,G,kCAHFN,EAAAA,EAAAA,IA2DM,MA3DNC,EA2DM,E,aC3DV,MAAMgB,EAAS,CAAC,EAGVC,GAA2B,OAAgBD,EAAQ,CAAC,CAAC,SAASE,KAEpE,O,oHCLInB,EAAAA,EAAAA,IAAa,O,aCAjB,MAAMiB,EAAS,CAAC,EAGVC,GAA2B,OAAgBD,EAAQ,CAAC,CAAC,SAASE,KAEpE,O,oHCLInB,EAAAA,EAAAA,IAAa,O,aCAjB,MAAMiB,EAAS,CAAC,EAGVC,GAA2B,OAAgBD,EAAQ,CAAC,CAAC,SAASE,KAEpE,O,oHCLInB,EAAAA,EAAAA,IAAa,O,aCAjB,MAAMiB,EAAS,CAAC,EAGVC,GAA2B,OAAgBD,EAAQ,CAAC,CAAC,SAASE,KAEpE,O,oHCLInB,EAAAA,EAAAA,IAAa,O,aCAjB,MAAMiB,EAAS,CAAC,EAGVC,GAA2B,OAAgBD,EAAQ,CAAC,CAAC,SAASE,KAEpE,O,oHCLInB,EAAAA,EAAAA,IAAa,O,aCAjB,MAAMiB,EAAS,CAAC,EAGVC,GAA2B,OAAgBD,EAAQ,CAAC,CAAC,SAASE,KAEpE,O,mHCLInB,EAAAA,EAAAA,IAAa,O,aCAjB,MAAMiB,EAAS,CAAC,EAGVC,GAA2B,OAAgBD,EAAQ,CAAC,CAAC,SAASE,KAEpE,O,mHCLInB,EAAAA,EAAAA,IAAa,O,aCAjB,MAAMiB,EAAS,CAAC,EAGVC,GAA2B,OAAgBD,EAAQ,CAAC,CAAC,SAASE,KAEpE,O,6h3BCJQlB,G,kCADJD,EAAAA,EAAAA,IA2YO,c,aC3YX,MAAMiB,EAAS,CAAC,EAGVC,GAA2B,OAAgBD,EAAQ,CAAC,CAAC,SAASE,KAEpE,O,wJCJQtB,EAAAA,EAAAA,GAAwB,UAApB,mBAAe,K,UACnBA,EAAAA,EAAAA,GAAyB,UAArB,oBAAgB,K,m9CAUZA,EAAAA,EAAAA,GAAqD,YAA/C,4CAAwC,K,kEAZ1DG,EAAAA,EAAAA,IAsBO,aArBHC,EACAC,GACAL,EAAAA,EAAAA,GAkBK,WAjBDM,GAOAN,EAAAA,EAAAA,GASK,WARDe,GACAf,EAAAA,EAAAA,GAMK,YALDA,EAAAA,EAAAA,GAA2D,YAAvDO,EAAAA,EAAAA,IAAiDuB,EAAAA,CAApCC,GAAG,cAAY,C,kBAAC,IAAM,UAAN,a,SACjC/B,EAAAA,EAAAA,GAAqE,YAAjEO,EAAAA,EAAAA,IAA2DuB,EAAAA,CAA9CC,GAAG,gBAAc,C,kBAAC,IAAc,UAAd,qB,SACnC/B,EAAAA,EAAAA,GAAgE,YAA5DO,EAAAA,EAAAA,IAAsDuB,EAAAA,CAAzCC,GAAG,cAAY,C,kBAAC,IAAW,UAAX,kB,SACjC/B,EAAAA,EAAAA,GAA+D,YAA3DO,EAAAA,EAAAA,IAAqDuB,EAAAA,CAAxCC,GAAG,gBAAc,C,kBAAC,IAAQ,UAAR,e,SACnC/B,EAAAA,EAAAA,GAAuE,YAAnEO,EAAAA,EAAAA,IAA6DuB,EAAAA,CAAhDC,GAAG,kBAAgB,C,kBAAC,IAAc,UAAd,qB,4BClBzD,MAAMX,EAAS,CAAC,EAKVC,GAA2B,OAAgBD,EAAQ,CAAC,CAAC,SAASE,GAAQ,CAAC,YAAY,qBAEzF,O,8oICNQlB,G,kCADJD,EAAAA,EAAAA,IA8CO,c,aC9CX,MAAMiB,EAAS,CAAC,EAGVC,GAA2B,OAAgBD,EAAQ,CAAC,CAAC,SAASE,KAEpE,O,qrFCkBQtB,EAAAA,EAAAA,GAAsjB,OAAjjBC,GAAG,gDAAgDH,MAAM,YAAYC,MAAA,kF,EAAuFC,EAAAA,EAAAA,GAA+Y,UAAvYyB,IAAI,6FAAyGxB,GAAG,6CAA6C+B,KAAK,6CAA6CC,UAAU,KAAKJ,gBAAgB,OAAO9B,MAAA,uI,kjFAtB9ZK,EAsBAW,EACAC,G,kCAxBJb,EAAAA,EAAAA,IAkDO,c,aClDX,MAAMiB,EAAS,CAAC,EAGVC,GAA2B,OAAgBD,EAAQ,CAAC,CAAC,SAASE,KAEpE,O,wlDCOQtB,EAAAA,EAAAA,GAAsjB,OAAjjBC,GAAG,gDAAgDH,MAAM,YAAYC,MAAA,kF,EAAuFC,EAAAA,EAAAA,GAA+Y,UAAvYyB,IAAI,6FAAyGxB,GAAG,6CAA6C+B,KAAK,6CAA6CC,UAAU,KAAKJ,gBAAgB,OAAO9B,MAAA,uI,gsFAX9ZK,EAWAO,EACAC,G,kCAbJT,EAAAA,EAAAA,IA0CO,c,aC1CX,MAAMiB,EAAS,CAAC,EAGVC,GAA2B,OAAgBD,EAAQ,CAAC,CAAC,SAASE,KAEpE,O,2gECcQtB,EAAAA,EAAAA,GAAsjB,OAAjjBC,GAAG,gDAAgDH,MAAM,YAAYC,MAAA,kF,EAAuFC,EAAAA,EAAAA,GAA+Y,UAAvYyB,IAAI,6FAAyGxB,GAAG,6CAA6C+B,KAAK,6CAA6CC,UAAU,KAAKJ,gBAAgB,OAAO9B,MAAA,uI,svFAlB9ZK,EAkBAS,EACAC,G,kCApBJX,EAAAA,EAAAA,IAiDO,c,aCjDX,MAAMiB,EAAS,CAAC,EAGVC,GAA2B,OAAgBD,EAAQ,CAAC,CAAC,SAASE,KAEpE,O,oHCLInB,EAAAA,EAAAA,IAAa,O,aCAjB,MAAMiB,EAAS,CAAC,EAGVC,GAA2B,OAAgBD,EAAQ,CAAC,CAAC,SAASE,KAEpE,O,mggBCJQlB,G,kCADJD,EAAAA,EAAAA,IAsSO,c,aCtSX,MAAMiB,EAAS,CAAC,EAGVC,GAA2B,OAAgBD,EAAQ,CAAC,CAAC,SAASE,KAEpE,O,wJCJQtB,EAAAA,EAAAA,GAAwB,UAApB,mBAAe,K,UACnBA,EAAAA,EAAAA,GAAyB,UAArB,oBAAgB,K,UAEhBA,EAAAA,EAAAA,GAA0S,oBAAtS,eAAU,OAAiD,KAA9CE,KAAK,yBAAwB,kBAAa,QAAI,2OAAsO,K,UACrSF,EAAAA,EAAAA,GAAuK,oBAAnK,gJAA2I,OAAkB,SAAf,gBAAW,QAAI,OAAC,K,UAE9JA,EAAAA,EAAAA,GAAqD,YAA/C,4CAAwC,K,kEAP1DG,EAAAA,EAAAA,IAiBO,aAhBHC,EACAC,GACAL,EAAAA,EAAAA,GAaK,WAZDM,EACAG,GACAT,EAAAA,EAAAA,GASK,WARDU,GACAV,EAAAA,EAAAA,GAMK,YALDA,EAAAA,EAAAA,GAA+D,YAA3DO,EAAAA,EAAAA,IAAqDuB,EAAAA,CAAxCC,GAAG,YAAU,C,kBAAC,IAAY,UAAZ,mB,SAC/B/B,EAAAA,EAAAA,GAA4E,YAAxEO,EAAAA,EAAAA,IAAkEuB,EAAAA,CAArDC,GAAG,YAAU,C,kBAAC,IAAyB,UAAzB,gC,SAC/B/B,EAAAA,EAAAA,GAAwE,YAApEO,EAAAA,EAAAA,IAA8DuB,EAAAA,CAAjDC,GAAG,kBAAgB,C,kBAAC,IAAe,UAAf,sB,SACrC/B,EAAAA,EAAAA,GAA0E,YAAtEO,EAAAA,EAAAA,IAAgEuB,EAAAA,CAAnDC,GAAG,mBAAiB,C,kBAAC,IAAgB,UAAhB,uB,SACtC/B,EAAAA,EAAAA,GAA4D,YAAxDO,EAAAA,EAAAA,IAAkDuB,EAAAA,CAArCC,GAAG,YAAU,C,kBAAC,IAAS,UAAT,gB,4BCbnD,MAAMX,EAAS,CAAC,EAKVC,GAA2B,OAAgBD,EAAQ,CAAC,CAAC,SAASE,GAAQ,CAAC,YAAY,qBAEzF,O","sources":["webpack://cs50-site/./src/components/LicenseNav.vue","webpack://cs50-site/./src/components/LicenseNav.vue?f126","webpack://cs50-site/./src/components/Week0Nav.vue","webpack://cs50-site/./src/components/Week0Nav.vue?e57e","webpack://cs50-site/./src/components/Week1Nav.vue","webpack://cs50-site/./src/components/Week1Nav.vue?9d14","webpack://cs50-site/./src/components/Week2Nav.vue","webpack://cs50-site/./src/components/Week2Nav.vue?9d33","webpack://cs50-site/./src/components/Week3Nav.vue","webpack://cs50-site/./src/components/Week3Nav.vue?2c3b","webpack://cs50-site/./src/components/Week4Nav.vue","webpack://cs50-site/./src/components/Week4Nav.vue?b300","webpack://cs50-site/./src/components/Week5Nav.vue","webpack://cs50-site/./src/components/Week5Nav.vue?5cc0","webpack://cs50-site/./src/components/Week6Nav.vue","webpack://cs50-site/./src/components/Week6Nav.vue?504e","webpack://cs50-site/./src/components/Week7Nav.vue","webpack://cs50-site/./src/components/Week7Nav.vue?b1d7","webpack://cs50-site/./src/components/Week8Nav.vue","webpack://cs50-site/./src/components/Week8Nav.vue?474c","webpack://cs50-site/./src/components/Week9Nav.vue","webpack://cs50-site/./src/components/Week9Nav.vue?56eb","webpack://cs50-site/./src/views/week0/Notes0View.vue","webpack://cs50-site/./src/views/week0/Notes0View.vue?aca9","webpack://cs50-site/./src/views/week0/Psets0View.vue","webpack://cs50-site/./src/views/week0/Psets0View.vue?d8b7","webpack://cs50-site/./src/views/week1/DeepThought.vue","webpack://cs50-site/./src/views/week1/DeepThought.vue?cc95","webpack://cs50-site/./src/views/week1/FileExtensions.vue","webpack://cs50-site/./src/views/week1/FileExtensions.vue?85a5","webpack://cs50-site/./src/views/week1/HomeBank.vue","webpack://cs50-site/./src/views/week1/HomeBank.vue?0d6f","webpack://cs50-site/./src/views/week1/MathInterpreter.vue","webpack://cs50-site/./src/views/week1/MathInterpreter.vue?db05","webpack://cs50-site/./src/views/week1/MealTime.vue","webpack://cs50-site/./src/views/week1/MealTime.vue?435c","webpack://cs50-site/./src/views/week1/Notes1View.vue","webpack://cs50-site/./src/views/week1/Notes1View.vue?3e9d","webpack://cs50-site/./src/views/week1/Psets1View.vue","webpack://cs50-site/./src/views/week1/Psets1View.vue?419f"],"sourcesContent":["<template>\r\n    <main class=\"col-md\" style=\"margin-bottom: 100px; margin-top: 0px;\">\r\n\r\n<a data-id=\"\" id=\"license\" style=\"top: 0px;\"></a><h1><a data-id=\"\" href=\"#license\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Лицензия</font></font></a></h1>\r\n\r\n<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Этот курс находится под лицензией Creative Commons </font></font><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Attribution-NonCommercial-ShareAlike 4.0 International</font></font></a><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\"> (CC BY-NC-SA 4.0). </font><font style=\"vertical-align: inherit;\">Это удобочитаемое краткое изложение </font></font><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/legalcode\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">лицензии</font></font></a><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\"> (а не ее замена) . </font><font style=\"vertical-align: inherit;\">Официальные переводы этой лицензии доступны на </font></font><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/legalcode#languages\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">других языках</font></font></a><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\"> .</font></font></p>\r\n\r\n<p class=\"font-weight-bold\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Вы можете:</font></font></p>\r\n\r\n<ul class=\"fa-ul\">\r\n<li>\r\n<strong><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Делитесь</font></font></strong><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\"> — копируйте и распространяйте материал на любом носителе и в любом формате.\r\n</font></font></li>\r\n<li>\r\n<strong><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Адаптируйтесь</font></font></strong><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\"> — делайте ремиксы, трансформируйте и развивайте материал\r\n</font></font></li>\r\n</ul>\r\n\r\n<p class=\"font-weight-bold\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">На следующих условиях:</font></font></p>\r\n<ul class=\"fa-ul\">\r\n<li>\r\n<span class=\"fa-li fab fa-creative-commons-by\"></span>\r\n<div><strong><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Атрибуция</font></font></strong><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\"> — вы должны предоставить соответствующий кредит, предоставить ссылку на лицензию и указать, были ли внесены изменения. </font><font style=\"vertical-align: inherit;\">Вы можете сделать это любым разумным способом, но никоим образом не предполагающим, что лицензиар одобряет вас или ваше использование.</font></font></div>\r\n</li>\r\n<li>\r\n<span class=\"fa-li fab fa-creative-commons-nc\"></span>\r\n<div><strong><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Некоммерческий</font></font></strong><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\"> — вы не можете использовать материал в коммерческих целях.</font></font></div>\r\n</li>\r\n<li>\r\n<span class=\"fa-li fab fa-creative-commons-sa\"></span>\r\n<div><strong><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">ShareAlike</font></font></strong><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\"> — Если вы микшируете, трансформируете или развиваете материал, вы должны распространять свои материалы под той же лицензией, что и оригинал.</font></font></div>\r\n</li>\r\n<li class=\"mt-3\">\r\n<div><strong><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Никаких дополнительных ограничений</font></font></strong><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\"> . Вы не можете применять юридические условия или технологические меры, которые на законных основаниях запрещают другим делать что-либо, разрешенное лицензией.</font></font></div>\r\n</li>\r\n</ul>\r\n\r\n</main>\r\n</template>","import { render } from \"./LicenseNav.vue?vue&type=template&id=3858d509\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ммм\\\\Desktop\\\\cs50-python-ru\\\\cs50-python-ru\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <div class=\"about\">\n    <h1>Неделя 0 Функции</h1>\n    <iframe width=\"1214\" height=\"683\" src=\"https://www.youtube.com/embed/JP7ITIXGpHk\" title=\"CS50P - Lecture 0 - Functions, Variables\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n    <ul>\n      <li>\n          <span>Лекция</span>\n          <ul>\n              <li>\n                <span>Аудио</span>\n                <ul>\n                  <li><a href=\"http://cdn.cs50.net/python/2022/x/lectures/0/lecture0.mp3\">MP3</a></li>\n                </ul>\n              </li>\n              <li><a href=\"../../notes/0\">Заметки</a></li>\n              <li><span>Слайды</span>\n                <ul>\n                  <li><a href=\"https://docs.google.com/presentation/d/1yPirrSP2qRjnKiIFW39HJV2cmhwqAkooQkv9jZz2Hqs/edit?usp=sharing\">Google Слайды</a></li>\n                  <li><a href=\"https://cdn.cs50.net/python/2022/x/lectures/0/lecture0.pdf\">PDF</a></li>\n                </ul>\n              </li>\n              <li>\n                <span>Исходный код</span>\n                <ul>\n                  <li><a href=\"https://cdn.cs50.net/python/2022/x/lectures/0/src0/\">Index</a></li>\n                  <li><a href=\"https://cdn.cs50.net/python/2022/x/lectures/0/src0.pdf\">PDF</a></li>\n                  <li><a href=\"https://cdn.cs50.net/python/2022/x/lectures/0/src0.zip\">Zip</a></li>\n                </ul>\n              </li>\n              <li><a href=\"http://cdn.cs50.net/python/2022/x/lectures/0/lang/en/lecture0.srt\">Субтитры</a></li>\n              <li><a href=\"http://cdn.cs50.net/python/2022/x/lectures/0/lang/en/lecture0.txt\">Стенограмма видео</a></li>\n              <li>\n                <span>Видео</span>\n                <ul>\n                  <li><a href=\"https://video.cs50.io/JP7ITIXGpHk\">CS50 Видео плейер</a></li>\n                  <li>\n                    <span>MP4</span>\n                    <ul>\n                      <li>\n                        <span>HDR</span>\n                        <ul><li><a href=\"http://cdn.cs50.net/python/2022/x/lectures/0/lecture0-4k-hdr.mp4\">4K</a></li></ul>\n                      </li>\n                      <li>\n                        <span>SDR</span>\n                        <ul>\n                          <li><a href=\"http://cdn.cs50.net/python/2022/x/lectures/0/lecture0-360p.mp4\">360p</a></li>\n                          <li><a href=\"http://cdn.cs50.net/python/2022/x/lectures/0/lecture0-720p.mp4\">720p</a></li>\n                          <li><a href=\"http://cdn.cs50.net/python/2022/x/lectures/0/lecture0-1080p.mp4\">1080p</a></li>\n                          <li><a href=\"http://cdn.cs50.net/python/2022/x/lectures/0/lecture0-4k.mp4\">4K</a></li>\n                        </ul>\n                      </li>\n                    </ul>\n                  </li>\n                  <li><a href=\"https://youtu.be/JP7ITIXGpHk\">YouTube</a></li>\n                </ul>\n              </li>\n          </ul>\n      </li>\n      <li></li>\n      <li><a href=\"../psets/0\">Набор проблем 0</a></li>\n    </ul>\n  </div>\n</template>\n<style>\n\n</style>","import { render } from \"./Week0Nav.vue?vue&type=template&id=6b157414\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ммм\\\\Desktop\\\\cs50-python-ru\\\\cs50-python-ru\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n    <div class=\"about\">\r\n      <h1>Неделя 1 Условные выражения</h1>\r\n      <iframe width=\"1214\" height=\"683\" src=\"https://www.youtube.com/embed/_b6NgY_pMdw\" title=\"CS50P - Lecture 1 - Conditionals\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\r\n      <ul>\r\n        <li>\r\n            <span>Лекция</span>\r\n            <ul>\r\n                <li>\r\n                  <span>Аудио</span>\r\n                  <ul>\r\n                    <li><a href=\"http://cdn.cs50.net/python/2022/x/lectures/0/lecture0.mp3\">MP3</a></li>\r\n                  </ul>\r\n                </li>\r\n                <li><a href=\"../../notes/1\">Заметки</a></li>\r\n                <li><span>Слайды</span>\r\n                  <ul>\r\n                    <li><a href=\"https://docs.google.com/presentation/d/1iagFk7-WnjrWA4fxeHzbYG1MkaO9GYk1DCuRnrFWOQQ/edit?usp=sharing\">Google Слайды</a> </li>\r\n                    <li><a href=\"https://cdn.cs50.net/python/2022/x/lectures/1/lecture1.pdf\">PDF</a> </li>\r\n                  </ul>\r\n                </li>\r\n                <li>\r\n                  <span>Исходный код</span>\r\n                  <ul>\r\n                    <li><a href=\"https://cdn.cs50.net/python/2022/x/lectures/1/src1/\">Index</a> </li>\r\n                    <li><a href=\"https://cdn.cs50.net/python/2022/x/lectures/1/src1.pdf\">PDF</a> </li>\r\n                    <li><a href=\"https://cdn.cs50.net/python/2022/x/lectures/1/src1.zip\">Zip</a> </li>\r\n                  </ul>\r\n                </li>\r\n                <li><a href=\"http://cdn.cs50.net/python/2022/x/lectures/1/lang/en/lecture1.srt\">Субтитры</a> </li>\r\n                <li><a href=\"http://cdn.cs50.net/python/2022/x/lectures/1/lang/en/lecture1.txt\">Стенограмма видео</a> </li>\r\n                <li>\r\n                  <span>Видео</span>\r\n                  <ul>\r\n                    <li><a href=\"https://video.cs50.io/_b6NgY_pMdw\">CS50 Видео плейер</a> </li>\r\n                    <li>\r\n                      <span>MP4</span>\r\n                      <ul>\r\n                        <li>\r\n                          <span>HDR</span>\r\n                          <ul><li><a href=\"http://cdn.cs50.net/python/2022/x/lectures/1/lecture1-4k-hdr.mp4\">4K</a> </li></ul>\r\n                        </li>\r\n                        <li>\r\n                          <span>SDR</span>\r\n                          <ul>\r\n                            <li><a href=\"http://cdn.cs50.net/python/2022/x/lectures/1/lecture1-360p.mp4\">360p</a> </li>\r\n                            <li><a href=\"http://cdn.cs50.net/python/2022/x/lectures/1/lecture1-720p.mp4\">720p</a> </li>\r\n                            <li><a href=\"http://cdn.cs50.net/python/2022/x/lectures/1/lecture1-1080p.mp4\">1080p</a> </li>\r\n                            <li><a href=\"http://cdn.cs50.net/python/2022/x/lectures/1/lecture1-4k.mp4\">4K</a> </li>\r\n                          </ul>\r\n                        </li>\r\n                      </ul>\r\n                    </li>\r\n                    <li><a href=\"https://youtu.be/_b6NgY_pMdw\">YouTube</a> </li>\r\n                  </ul>\r\n                </li>\r\n            </ul>\r\n        </li>\r\n        <li><a href=\"../psets/1\">Набор проблем 1</a></li>\r\n      </ul>\r\n    </div>\r\n  </template>\r\n  <style>\r\n  \r\n  </style>","import { render } from \"./Week1Nav.vue?vue&type=template&id=3c228374\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ммм\\\\Desktop\\\\cs50-python-ru\\\\cs50-python-ru\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n    <div class=\"about\">\r\n      <h1>Неделя 2 Циклы</h1>\r\n      <iframe width=\"1214\" height=\"683\" src=\"https://www.youtube.com/embed/-7xg8pGcP6w\" title=\"CS50P - Lecture 2 - Loops\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\r\n      <ul>\r\n        <li>\r\n            <span>Лекция</span>\r\n            <ul>\r\n                <li>\r\n                  <span>Аудио</span>\r\n                  <ul>\r\n                    <li>MP3</li>\r\n                  </ul>\r\n                </li>\r\n                <li>Заметки</li>\r\n                <li><span>Слайды</span>\r\n                  <ul>\r\n                    <li>Google Слайды</li>\r\n                    <li>PDF</li>\r\n                  </ul>\r\n                </li>\r\n                <li>\r\n                  <span>Исходный код</span>\r\n                  <ul>\r\n                    <li>Index</li>\r\n                    <li>PDF</li>\r\n                    <li>Zip</li>\r\n                  </ul>\r\n                </li>\r\n                <li>Субтитры</li>\r\n                <li>Стенограмма видео</li>\r\n                <li>\r\n                  <span>Видео</span>\r\n                  <ul>\r\n                    <li>CS50 Видео плейер</li>\r\n                    <li>\r\n                      <span>MP4</span>\r\n                      <ul>\r\n                        <li>\r\n                          <span>HDR</span>\r\n                          <ul><li>4K</li></ul>\r\n                        </li>\r\n                        <li>\r\n                          <span>SDR</span>\r\n                          <ul>\r\n                            <li>360p</li>\r\n                            <li>720p</li>\r\n                            <li>1080p</li>\r\n                            <li>4K</li>\r\n                          </ul>\r\n                        </li>\r\n                      </ul>\r\n                    </li>\r\n                    <li>YouTube</li>\r\n                  </ul>\r\n                </li>\r\n            </ul>\r\n        </li>\r\n        <li><a href=\"../psets/0\">Набор проблем 0</a></li>\r\n      </ul>\r\n    </div>\r\n  </template>\r\n  <style>\r\n  \r\n  </style>","import { render } from \"./Week2Nav.vue?vue&type=template&id=60a4dfce\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ммм\\\\Desktop\\\\cs50-python-ru\\\\cs50-python-ru\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n    <main></main>\r\n</template>","import { render } from \"./Week3Nav.vue?vue&type=template&id=2afa3d24\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ммм\\\\Desktop\\\\cs50-python-ru\\\\cs50-python-ru\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n    <main></main>\r\n</template>","import { render } from \"./Week4Nav.vue?vue&type=template&id=2a83d725\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ммм\\\\Desktop\\\\cs50-python-ru\\\\cs50-python-ru\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n    <main></main>\r\n</template>","import { render } from \"./Week5Nav.vue?vue&type=template&id=2a0d7126\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ммм\\\\Desktop\\\\cs50-python-ru\\\\cs50-python-ru\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n    <main></main>\r\n</template>","import { render } from \"./Week6Nav.vue?vue&type=template&id=29970b27\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ммм\\\\Desktop\\\\cs50-python-ru\\\\cs50-python-ru\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n    <main></main>\r\n</template>","import { render } from \"./Week7Nav.vue?vue&type=template&id=2920a528\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ммм\\\\Desktop\\\\cs50-python-ru\\\\cs50-python-ru\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n    <main></main>\r\n</template>","import { render } from \"./Week8Nav.vue?vue&type=template&id=28aa3f29\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ммм\\\\Desktop\\\\cs50-python-ru\\\\cs50-python-ru\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n    <main></main>\r\n</template>","import { render } from \"./Week9Nav.vue?vue&type=template&id=2833d92a\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ммм\\\\Desktop\\\\cs50-python-ru\\\\cs50-python-ru\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n    <main>\r\n        <h1>Лекция 0</h1>\r\n        <ul>\r\n            <li><a href=\"#creating-code-with-python\">Написание кода на Python</a></li>\r\n            <li><a href=\"#functions\">Функции</a></li>\r\n            <li><a href=\"#bugs\">Баги</a></li>\r\n            <li><a href=\"#improving-your-first-python-program\">Улучшение вашей первой программы на Python</a></li>\r\n            <ul>\r\n                <li><a href=\"#variables\">Переменные</a></li>\r\n                <li><a href=\"#comments\">Комментарии</a></li>\r\n                <li><a href=\"#pseudocode\">Псевдокод</a></li>\r\n            </ul>\r\n            <li><a href=\"№further-improving-your-first-python-program\">Дальнейшее улучшение вашей первой программы на Python</a></li>\r\n            <li><a href=\"#strings-and-paremeters\">Строки и параметры</a></li>\r\n            <ul><li><a href=\"#a-small-problem-with-quotation-marks\">Небольшая проблема с кавычками</a></li></ul>\r\n            <li><a href=\"#formatting-strings\">Форматирование строк</a></li>\r\n            <li><a href=\"#more-on-strings\">Подробнее о строках</a></li>\r\n            <li><a href=\"#integers-or-int\">Целые числа или int</a></li>\r\n            <li><a href=\"#readability-wins\">Удобочитаемость выигрывает</a></li>\r\n            <li><a href=\"#float-basics\">Основы float</a></li>\r\n            <li><a href=\"#more-on-floats\">Подробнее о float</a></li>\r\n            <li><a href=\"#def\">Def</a></li>\r\n            <li><a href=\"#returning-values\">Возвращаемые значения</a></li>\r\n            <li><a href=\"#summing-up\">Подводя итог</a></li>\r\n        </ul>\r\n        <h2 id=\"creating-code-with-python\">Написание кода на Python</h2>\r\n        <ul>\r\n            <li>VS Code — это особый тип текстового редактора, который называется компилятором. Вверху вы увидите текстовый редактор, а внизу терминал, где вы можете выполнять команды.</li>\r\n            <li>В терминале вы можете выполнить команду <code class=\"code\">code hello.py</code> чтобы создать файл и начать писать код</li>\r\n            <li>В текстовом редакторе выше вы можете ввести <code class=\"code\">print(\"hello, world\")</code>. Это известная каноническая программа, которую почти все программисты пишут в процессе обучения.</li>\r\n            <li>В окне терминала вы можете выполнять команды. Чтобы запустить программу, вам нужно переместить курсор в нижнюю часть экрана, щелкнуть в окне терминала. Теперь вы можете ввести вторую команду в окне терминала. Рядом со знаком доллара введите <code class=\"code\">python hello.py</code>  и нажмите клавишу Enter на клавиатуре.</li>\r\n            <li>Напомним, что компьютеры понимают только нули и единицы. Поэтому когда вы выполняете команду <code class=\"code\">python hello.py </code> интерпретатор python будет  созданный вами файл <code class=\"code\">hello.py</code> переводить в нули и единицы, понятные компьютеру.</li>\r\n            <li>Результатом работы программы <code class=\"code\">python hello.py</code>, является вывод в терминал строки - <code class=\"code\">hello, world</code>.</li>\r\n            <li>Поздравляю! Вы только что создали свою первую программу.</li>\r\n        </ul>\r\n        <h2 id=\"functions\">Функции</h2>\r\n        <ul>\r\n            <li>Функции — это глаголы или действия, которые компьютер или компьютерный язык уже знают, как выполнять.</li>\r\n            <li>В вашей программе <code class=\"code\">hello.py</code> функция <code class=\"code\">print</code> умеет делать вывод каких либо данных в окно терминала.</li>\r\n            <li>Функция <code class=\"code\">print</code> принимает аргументы. В данном случае <code class=\"code\">\"hello, world\"</code>  это аргументы, которые принимает функция <code class=\"code\">print</code>.</li>\r\n        </ul>\r\n        <h2 id=\"bugs\">Баги</h2> \r\n        <ul>\r\n            <li>Ошибки являются естественной частью программирования. Ошибки - это проблемы, которые вы можете решать! Не расстраивайтесь! Это часть процесса становления великим программистом.</li>\r\n            <li>Представим в нашей программе <code class=\"code\">hello.py</code> случайно набранное <code class=\"code\">print(\"hello, world\"</code>  - заметьте, что мы пропустили <code class=\"code\">)</code> требуемый компилятором финал. Если я намеренно допущу эту ошибку, то компилятор выведет ошибку в окно терминала!</li>\r\n            <li>Часто сообщения об ошибках информируют вас о вашей ошибке и дают подсказки о том, как ее исправить. Однако в некоторых случаях компилятор не даст вам ответ в чем ваша ошибка.</li>\r\n        </ul>\r\n        <h2 id=\"improving-your-first-python-program\">Улучшение вашей первой программы на Python</h2>\r\n        <ul>\r\n            <li>Мы можем персонализировать вашу первую программу на Python.</li>\r\n            <li>В нашем текстовом редакторе в <code class=\"code\">hello.py</code> мы можем добавить еще одну функцию. input - это функция, которая принимает подсказку в качестве аргумента. Мы можем отредактировать наш код, как показано ниже: </li>\r\n            <pre class=\"highlight\"><code>input(\"What's your name? \")\r\nprint(\"hello, world\")</code></pre>\r\n            <li>Однако само по себе это редактирование не позволит вашей программе выводить то, что вводит ваш пользователь. Для этого нам нужно будет познакомить вас с переменными</li>\r\n        </ul>\r\n        <h3 id=\"variables\">Переменные</h3>\r\n        <ul>\r\n            <li>Переменная — это просто контейнер для значений в вашей программе.</li>\r\n            <li>В вашей программе вы можете ввести свою собственную переменную, отредактировав ее так:</li>\r\n            <pre class=\"highlight\"><code>name = input(\"What's your name? \")\r\nprint(\"hello, world\")</code></pre>\r\n            <p>Обратите внимание, что этот <code class=\"code\">= </code>знак равенства в середине <code class=\"code\">name = input(\"What's your name? \")</code> играет особую роль в программировании. Этот знак равенства буквально присваивает то, что справа, тому, что слева. Поэтому возвращаемое значение <code class=\"code\">input(\"What's your name? \")</code> присваивается <code class=\"code\">name</code>.</p>\r\n            <li>Если вы отредактируете свой код следующим образом, вы заметите ошибку</li>\r\n            <pre class=\"highlight\"><code>name = input(\"What's your name? \")\r\nprint(\"hello, name\")</code></pre>\r\n            <li>Программа вернется <code class=\"code\">hello, name</code> в окно терминала независимо от того, что вводит пользователь.</li>\r\n            <li>Дальнейшее редактирование нашего кода, может выглядить так:</li>\r\n            <pre class=\"highlight\"><code>name = input(\"What's your name? \")\r\nprint(\"hello,\")\r\nprint(name)</code></pre>\r\n            <li>Результат в окне терминала будет</li>\r\n            <pre class=\"highlight\"><code>What's your name? David\r\nhello\r\nDavid</code></pre>\r\n            <li>Мы стали ближе к желаемому результату!</li>\r\n            <li>Вы можете подробнее узнать о <a href=\"https://docs.python.org/3/library/datatypes.html\">типах данных</a> в документации Python</li>\r\n        </ul>\r\n        <h3 id=\"comments\">Комментарии</h3>\r\n        <ul>\r\n            <li>Комментарии — это способ для программистов отслеживать, что они делают в своих программах, и даже информировать других о своих намерениях относительно блока кода. Короче говоря, это заметки для вас и других, которые увидят ваш код!</li>\r\n            <li>Вы можете добавлять комментарии к своей программе, чтобы видеть, что она делает. Вы можете отредактировать свой код следующим образом:</li>\r\n            <pre class=\"highlight\"><code># Ask the user for their name(Спросить у пользователя его имя)\r\nname = input(\"What's your name? \")\r\nprint(\"hello,\")\r\nprint(name)</code></pre>\r\n            <li>Комментарии также могут служить для вас списком то что еще надо сделать в программе.</li>\r\n        </ul>\r\n        <h3 id=\"pseudocode\">Псевдокод</h3>\r\n        <ul>\r\n            <li>Псевдокод — это важный тип комментариев, который становится особым типом списка то что еще надо сделать, особенно когда вы не понимаете, как выполнить задачу. Например, вы можете отредактировать свой код, подобным образом:</li>\r\n            <pre class=\"highlight\"><code># Ask the user for their name(Спросить у пользователя его имя)\r\nname = input(\"What's your name? \")\r\n\r\n# Print hello(Вывести hello)\r\nprint(\"hello,\")\r\n\r\n# Print the name inputted(Вывести введенное имя)\r\nprint(name)</code></pre>\r\n        </ul>\r\n        <h2 id=\"further-improving-your-first-python-program\">Дальнейшее улучшение вашей первой программы на Python</h2>\r\n        <ul>\r\n            <li>Мы можем дополнительно отредактировать наш код следующим образом:</li>\r\n            <pre class=\"highlight\"><code># Ask the user for their name(Спросить у пользователя его имя)\r\nname = input(\"What's your name? \")\r\n\r\n# Print hello and the inputted name(Вывести hello и введенное имя)\r\nprint(\"hello, \" + name)</code></pre>\r\n            <li>Оказывается, некоторые функции принимают множество аргументов.</li>\r\n            <li>Мы можем использовать запятую <code class=\"code\">,</code> для передачи нескольких аргументов, отредактировав наш код следующим образом:</li>\r\n            <pre class=\"highlight\"><code># Ask the user for their name(Спросить у пользователя его имя)\r\nname = input(\"What's your name? \")\r\n\r\n# Print hello and the inputted name(Вывести hello и введенное имя)\r\nprint(\"hello,\", name)</code></pre>\r\n        <p>Если бы мы набрали «Дэвид», мы бы получили вывод в терминале <code class=\"code\">hello, David</code>. Ура.</p>\r\n        </ul>\r\n        <h2 id=\"strings-and-paremeters\">Строки и параметры</h2>\r\n        <ul>\r\n            <li>Строка, известная как str в Python, представляет собой последовательность текста.</li>\r\n            <li>Немного вернув наш код обратно к следующему, мы обнаружили визуальный побочный эффект, заключающийся в отображении результата на нескольких строках:</li>\r\n            <pre class=\"highlight\"><code># Ask the user for their name(Спросить у пользователя его имя)\r\nname = input(\"What's your name? \")\r\nprint(\"hello,\")\r\nprint(name)</code></pre>\r\n            <li>Функции принимают аргументы, влияющие на их поведение. Если мы посмотрим на документацию <a href=\"https://docs.python.org/3/library/functions.html#print\">print</a>, вы заметите, что мы можем многое узнать об аргументах, которые принимает функция печати.</li>\r\n            <li>Глядя на эту документацию, вы узнаете, что функция печати автоматически включает фрагмент кода <code class=\"code\">end='\\n'</code>. Этот индекатор <code class=\"code\">\\n </code>указывает, что функция печати автоматически создаст разрыв строки при запуске. Функция печати принимает аргумент с именем и по умолчанию создается новая строка.</li>\r\n            <li>Однако технически мы можем предоставить аргумент для end, чтобы новая строка не создавалась!</li>\r\n            <li>Мы можем изменить наш код следующим образом:</li>\r\n            <pre class=\"highlight\"><code># Ask the user for their name(Спросить у пользователя его имя)\r\nname = input(\"What's your name? \")\r\nprint(\"hello,\", end=\"\")\r\nprint(name)</code></pre>\r\n            <span>Предоставляя <code class=\"code\">end=\"\"</code>, мы перезаписываем значение по умолчанию <code class=\"code\">end</code>, так что оно не создает новую строку после первого оператора печати. Указав имя David, вывод в окне терминала будет <code class=\"code\">hello, David</code>.</span>\r\n            <li>Таким образом, параметры — это аргументы, которые может принимать функция.</li>\r\n            <li>Вы можете узнать больше в документации Python по <code class=\"code\"><a href=\"https://docs.python.org/3/library/functions.html#print\">print</a></code>.</li>\r\n        </ul>\r\n        <h3 id=\"a-small-problem-with-quotation-marks\">Небольшая проблема с кавычками</h3>\r\n        <ul>\r\n            <li>Обратите внимание, как сложно добавить кавычки в строку.</li>\r\n            <li><code class=\"code\">print(\"hello,\"friend\"\")</code>работать не будет и компилятор выдаст ошибку.</li>\r\n            <li>Как правило, есть два подхода к исправлению этого. Во-первых, вы можете просто изменить кавычки на одинарные кавычки.</li>\r\n            <li>Другим, более часто используемым подходом будет использование кода <code class=\"code\">print(\"hello, \\\"friend\\\"\")</code>. Обратная косая черта сообщает компилятору, что следующий символ следует рассматривать как кавычку в строке, чтобы избежать ошибки компилятора.</li>\r\n        </ul>\r\n        <h2 id=\"formatting-strings\">Форматирование строк</h2>\r\n        <ul>\r\n            <li>Вероятно, наиболее элегантным способом использования строк будет следующий:</li>\r\n            <pre class=\"highlight\"><code># Ask the user for their name(Спросить у пользователя его имя)\r\nname = input(\"What's your name? \")\r\nprint(f\"hello, {name}\")</code></pre>\r\n            <span>Обратите внимание на <code class=\"code\">f</code> в <code class=\"code\">print(f\"hello, {name}\")</code>. <code class=\"code\">f</code>-это специальный индикатор Python для обработки этой строки особым образом, отличным от предыдущих подходов, которые мы проиллюстрировали в этой лекции. Ожидайте, что вы будете использовать этот стиль строк довольно часто в этом курсе.</span>\r\n        </ul>\r\n        <h2 id=\"more-on-strings\">Подробнее о строках</h2>\r\n        <ul>\r\n            <li>Вы не должны ждать, что пользователь будет вести себя, как ожидалось. Следовательно, вам нужно будет убедиться, что ввод вашего пользователя исправлен или проверен.</li>\r\n            <li>Оказывается, в строки встроена возможность удалять пробелы из строки.</li>\r\n            <li>Применяя метод <code class=\"code\">strip</code> к переменной <code class=\"code\">name</code>,как это сделать: <code class=\"cide\">name = name.strip()</code>это удалит все пробелы слева и справа от пользовательского ввода. Вы можете изменить свой код, вот так:</li>\r\n            <pre class=\"highlight\"><code># Ask the user for their name(Спросить у пользователя его имя)\r\nname = input(\"What's your name? \")\r\n\r\n# Remove whitespace from the str(Удалить пробелы из строки(str))\r\nname = name.strip()\r\n\r\n# Print the output(Распечатать вывод)\r\nprint(f\"hello, {name}\")</code></pre>\r\n            <span>При повторном запуске этой программы, независимо от того, сколько пробелов вы наберете до или после name, она удалит все пробелы.</span>\r\n            <li>Используйте метод <code class=\"code\">title</code>, чтобы перевести в верхний регистр первую букву в имени:</li>\r\n            <pre class=\"highlight\"><code># Ask the user for their name(Спросить у пользователя его имя)\r\nname = input(\"What's your name? \")\r\n# Remove whitespace from the str(Удалить пробелы из строки(str))\r\nname = name.strip()\r\n# Capitalize the first letter of each word(Перевести в верхний регистр первую букву в слове)\r\nname = name.title()\r\n# Print the output(Распечатать вывод)\r\nprint(f\"hello, {name}\")\r\n</code></pre>\r\n            <li>К этому моменту вы, возможно, очень устали от многократного ввода <code class=\"code\">python</code> в окне терминала. Вы можете использовтаь стрелки вверх и вниз на вашей клавиатуре, чтобы увидеть самые последние команды терминала, которые вы вводили.</li>\r\n            <li>Обратите внимание, что вы можете изменить свой код, чтобы сделать его более эффективным:</li>\r\n            <pre class=\"highlight\"><code># Ask the user for their name(Спросить у пользователя его имя)\r\nname = input(\"What's your name? \")\r\n# Remove whitespace from the str and capitalize the first letter of each word(Удалить пробелы из строки(str) и перевести в верхний регистр первую букву в слове)\r\nname = name.strip().title()\r\n# Print the output(Распечатать вывод)\r\nprint(f\"hello, {name}\")</code></pre>\r\n            <span>Вывод будет тот же, что и в предыдущем коде.</span>\r\n            <li>Мы могли бы пойти еще дальше!</li>\r\n            <pre class=\"highlight\"><code># Ask the user for their name, remove whitespace from the str and capitalize the first letter of each word\r\nname = input(\"What's your name? \").strip().title()\r\n# Print the output\r\nprint(f\"hello, {name}\")</code></pre>\r\n        <li>Вы можете узнать больше о строках в документации Python <code class=\"code\"><a href=\"https://docs.python.org/3/library/stdtypes.html#str\">str</a></code></li>\r\n        </ul>\r\n        <h2 id=\"integers-or-int\">Целые числа или int</h2>\r\n        <ul>\r\n            <li>В Python целое число называется int.</li>\r\n            <li>В мире математики мы знакомы с операторами +, -, *, / и %. Этот последний оператор % или оператор по модулю может быть вам не очень знаком.</li>\r\n            <li>Вам не нужно использовать окно текстового редактора в компиляторе для запуска кода Python. В своем терминале вы можете написать <code class=\"code\">python</code>.И в окне терминала вы увидите >>>. Затем вы можете запустить живой интерактивный код. Вы можете ввести 1+1, и он запустит этот расчет. Этот режим будет использоваться во время этого курса.</li>\r\n            <li>Снова открыв VS Code, мы можем ввести <code class=\"code\">code calculator.py</code> в терминал. Это создаст новый файл, в котором мы создадим наш собственный калькулятор.</li>\r\n            <li>Во-первых, мы можем объявить несколько переменных.</li>\r\n            <pre class=\"highlight\"><code>x = 1\r\ny = 2\r\nz = x + y\r\nprint(z)</code></pre>\r\n            <span>Естественно при запуске <code class=\"code\">python calculator.py</code> мы получаем результат в окне терминала <code class=\"code\">3</code>. Мы можем сделать это более интерактивным, используя функцию <code class=\"code\">input</code>.</span>\r\n            <pre class=\"highlight\"><code>x = input(\"What's x? \")\r\ny = input(\"What's y? \")\r\nz = x + y\r\nprint(z)</code></pre>\r\n            <li>Запустив эту программу, мы обнаруживаем, что вывод неверен, так как вывод <code class=\"code\">12</code>. В чем может быть причина?</li>\r\n            <li>Ранее мы видели, как знак <code class=\"code\">+</code> объединяет две строки. Поскольку ваш ввод с клавиатуры на вашем компьютере поступает в компилятор в виде текста, он обрабатывается как строка. Поэтому нам нужно преобразовать этот ввод из строки в целое число. Мы можем сделать это следующим образом:</li>\r\n            <pre class=\"highlight\"><code>x = input(\"What's x? \")\r\ny = input(\"What's y? \")\r\nz = int(x) + int(y)\r\nprint(z)</code></pre>\r\n            <span>Теперь результат правильный. Использование int(x), называется «приведением», когда значение временно изменяется с одного типа переменной (в данном случае строки) на другой (здесь — целое число).</span>\r\n            <li>Мы можем улучшить нашу программу следующим образом:</li>\r\n            <pre class=\"highlight\"><code>x = int(input(\"What's x? \"))\r\ny = int(input(\"What's y? \"))\r\nprint(x + y)</code></pre>\r\n            <span>Это показывает, что вы можете запускать функции в функциях. Сначала запускается самая внутренняя функция, а затем запускается внешняя. Сначала функция <code class=\"code\">input</code> запускается. Затем функция <code class=\"code\">int</code>.</span>\r\n            <li>Вы можете узнать больше об <code class=\"code\"><a href=\"https://docs.python.org/3/library/functions.html?highlight=float#int\">int</a></code> из документации Python</li>\r\n        </ul>\r\n        <h2 id=\"readability-wins\">Удобочитаемость выигрывает</h2>\r\n        <li>Принимая решение о своем подходе к задачам программирования, помните, что можно привести разумные аргументы в пользу многих подходов к одной и той же проблеме.</li>\r\n        <li>Независимо от того, какой подход вы примете к задаче программирования, помните, что ваш код должен быть читабельным. Вы должны использовать комментарии, чтобы дать себе и другим подсказки о том, что делает ваш код. Кроме того, вы должны создавать код таким образом, чтобы он был удобочитаемым.</li>\r\n        <h2 id=\"float-basics\">Основы float</h2>\r\n        <li>Значение с плавающей запятой — это действительное число, содержащее десятичную точку, например <code class=\"code\">0.52</code>.</li>\r\n        <li>Вы можете изменить свой код чтобы он поддерживал float следующим образом:</li>\r\n        <pre class=\"highlight\"><code>x = float(input(\"What's x? \"))\r\ny = float(input(\"What's y? \"))\r\nprint(x + y)</code></pre>\r\n        <li>Это изменение позволяет вашему пользователю вводить <code class=\"code\">1.2</code> и <code class=\"code\">3.4</code> отображать их сумму <code class=\"code\">4.6</code>.</li>\r\n        <li>Однако давайте представим, что вы хотите округлить сумму до ближайшего целого числа. Посмотрев в документации Python на <code class=\"code\">round</code>, вы увидите, что доступны аргументы <code class=\"code\">round(number[n, ndigits])</code>. Эти квадратные скобки указывают на то, что программист может указать что-то необязательное. Следовательно, вы можете округлить цифру до ближайшего целого числа  <code class=\"code\">round(n)</code>. В качестве альтернативы ваш код может выглядить следующим образом:</li>\r\n        <pre class=\"highlight\"><code># Get the user's input\r\nx = float(input(\"What's x? \"))\r\ny = float(input(\"What's y? \"))\r\n# Create a rounded result\r\nz = round(x + y)\r\n# Print the result\r\nprint(z)</code></pre>\r\n        <span>Вывод будет округлен до ближайшего целого числа.</span>\r\n        <li>Что, если бы мы захотели отформатировать вывод длинных чисел? Например, вместо того, чтобы видеть <code class=\"code\">1000</code>, вы можете захотеть увидеть <code class=\"code\">1,000</code>. Вы можете изменить свой код следующим образом:</li>\r\n        <pre class=\"highlight\"><code># Get the user's input\r\nx = float(input(\"What's x? \"))\r\ny = float(input(\"What's y? \"))\r\n# Create a rounded result\r\nz = round(x + y)\r\n# Print the formatted result\r\nprint(f\"{z:,}\")</code></pre>\r\n        <span>Хотя это довольно загадочно, <code class=\"code\">print(f\"{z:,}\")</code> создает сценарий, в котором вывод <code class=\"code\">z</code> будет включать запятые, где результат может выглядеть как <code class=\"code\">1,000</code> или <code class=\"code\">2,500</code>.</span>\r\n        <h2 id=\"more-on-floats\">Подробнее о float</h2>\r\n        <li>Как мы можем округлить значения с плавающей запятой? Сначала измените код следующим образом:</li>\r\n        <pre class=\"highlight\"><code># Get the user's input\r\nx = float(input(\"What's x? \"))\r\ny = float(input(\"What's y? \"))\r\n\r\n# Calculate the result\r\nz = x / y\r\n\r\n# Print the result\r\nprint(z)\r\n</code></pre>\r\n        <li>При вводе x, как <code class=\"code\">2</code> и y, как <code class=\"code\">3</code>, результат z будет <code class=\"code\">0.6666666666</code> по-видимому, продолжается до бесконечности, как мы могли бы ожидать.</li>\r\n        <li>Давайте представим, что мы хотим округлить это значение в меньшую сторону, мы могли бы изменить наш код следующим образом:</li>\r\n        <pre class=\"highlight\"><code># Get the user's input\r\nx = float(input(\"What's x? \"))\r\ny = float(input(\"What's y? \"))\r\n\r\n# Calculate the result and round\r\nz = round(x / y, 2)\r\n\r\n# Print the result\r\nprint(z)</code></pre>\r\n        <span>Как и следовало ожидать, это округлит результат до ближайших двух знаков после запятой.</span>\r\n        <li>Мы также можем использовать <code class=\"code\">fstring</code> для форматирования вывода следующим образом:</li>\r\n        <pre class=\"highlight\"><code># Get the user's input\r\nx = float(input(\"What's x? \"))\r\ny = float(input(\"What's y? \"))\r\n\r\n# Calculate the result\r\nz = x / y\r\n\r\n# Print the result\r\nprint(f\"{z:.2f}\")</code></pre>\r\n        <span>Этот загадочный код <code class=\"code\">fstring</code> отображает то же самое, что и наша предыдущая стратегия округления.</span>\r\n        <li>Вы можете узнать больше о <a href=\"https://docs.python.org/3/library/functions.html?highlight=float#float\"><code class=\"code\">float</code></a> в документации Python</li>\r\n        <h2 id=\"def\">Def</h2>\r\n        <li>Было бы неплохо создать свои собственные функции?</li>\r\n        <li>Давайте вернем наш посдедний код <code class=\"code\">hello.py</code>, введя <code class=\"code\">code hello.py</code> в окно терминала. Ваш начальный код должен выглядеть следующим образом:</li>\r\n        <pre class=\"highlight\"><code># Ask the user for their name, remove whitespace from the str and capitalize the first letter of each word\r\nname = input(\"What's your name? \").strip().title()\r\n\r\n# Print the output\r\nprint(f\"hello, {name}\")</code></pre>\r\n        <span>Мы можем улучшить наш код, чтобы создать собственную специальную функцию, которая говорит нам \"hello!\"</span>\r\n        <li>Сотрите весь код в текстовом редакторе, и давайте начнем с нуля:</li>\r\n        <pre class=\"highlight\"><code>name = input(\"What's your name? \")\r\nhello()\r\nprint(name)</code></pre>\r\n        <span>При попытке запустить этот код ваш компилятор выдаст ошибку. В конце концов, не была создана функция <code class=\"code\">hello</code>.</span>\r\n        <li>Мы можем создать нашу собственную функцию с именем <code class=\"cd\">hello</code> следующим образом:</li>\r\n        <pre class=\"highlight\"><code>def hello():\r\n    print(\"hello\")\r\n\r\n\r\nname = input(\"What's your name? \")\r\nhello()\r\nprint(name)</code></pre>\r\n        <span>Обратите внимание, что все, что ниже <code class=\"code\">def hello()</code>, имеет отступ. Python — это язык с отступами. Он использует отступ, чтобы понять, что является частью вышеуказанной функции. Поэтому все в функции <code class=\"code\">hello</code> должно быть с отступом. Когда что-то не имеет отступа, оно обрабатывается так, как будто оно не находится внутри функции <code class=\"code\">hello</code>. Запустив <code class=\"code\">python hello.py</code> в окне терминала, вы увидите, что ваш вывод не совсем такой, как вам хотелось бы.</span>\r\n        <li>Мы можем еще улучшить наш код:</li>\r\n        <pre class=\"highlight\"><code># Create our own function\r\ndef hello(to):\r\n    print(\"hello,\", to)\r\n\r\n\r\n# Output using our own function\r\nname = input(\"What's your name? \")\r\nhello(name)</code></pre>\r\n        <span>Здесь, в первых строках, вы создаете свою функцию <code class=\"code\">hello</code>. Однако на этот раз вы сообщаете компилятору, что эта функция принимает единственный параметр: переменную с именем <code class=\"code\">to</code>. Поэтому при вызове <code class=\"code\">hello(name)</code> компьютер передает name в  функцию <code class=\"code\">hello</code> как <code class=\"code\">to</code>. Вот как мы передаем значения в функции. Очень полезно! Запустив <code class=\"code\">python hello.py</code> в окне терминала, вы увидите, что результат намного ближе к нашему идеалу, представленному ранее в этой лекции.</span>\r\n        <li>Мы можем изменить наш код, чтобы добавить значение по умолчанию для <code class=\"code\">hello</code>:</li>\r\n        <pre class=\"highlight\"><code># Create our own function\r\ndef hello(to=\"world\"):\r\n    print(\"hello,\", to)\r\n\r\n\r\n# Output using our own function\r\nname = input(\"What's your name? \")\r\nhello(name)\r\n\r\n# Output without passing the expected arguments\r\nhello()</code></pre>\r\n        <span>Проверьте свой код самостоятельно. Обратите внимание, как первое <code class=\"code\">hello</code> будет вести себя так, как вы ожидаете, а второе hello, которому не передано значение, по умолчанию будет выводить hello, world.</span>\r\n        <li>Нам не обязательно писать нашу функцию в начале нашей программы. Мы можем сдвинуть ее вниз, но нам нужно сообщить компилятору, что у нас есть функция <code class=\"code\">main</code> и отдельная функция <code class=\"code\">hello</code>.</li>\r\n        <pre class=\"highlight\"><code>def main():\r\n\r\n# Output using our own function\r\nname = input(\"What's your name? \")\r\nhello(name)\r\n\r\n# Output without passing the expected arguments\r\nhello()\r\n\r\n\r\n# Create our own function\r\ndef hello(to=\"world\"):\r\nprint(\"hello,\", to)</code></pre>\r\n        <span>Однако одно это создаст своего рода ошибку. Если мы запустим <code class=\"code\">python hello.py</code>, ничего не произойдет! Причина этого в том, что ничто в этом коде на самом деле не вызывает основную функцию и не оживляет нашу программу.</span>\r\n        <li>Следующая очень маленькая модификация вызовет функцию <code class=\"cide\">main</code> и наша программа начнет работать:</li>\r\n        <pre class=\"highlight\"><code>def main():\r\n\r\n# Output using our own function\r\nname = input(\"What's your name? \")\r\nhello(name)\r\n\r\n# Output without passing the expected arguments\r\nhello()\r\n\r\n\r\n# Create our own function\r\ndef hello(to=\"world\"):\r\nprint(\"hello,\", to)\r\n\r\n\r\nmain()</code></pre>\r\n        <h2 id=\"returning-values\">Возвращаемые значения</h2>\r\n        <li>Вы можете представить множество сценариев, в которых вы хотите, чтобы функция не только выполняла действие, но и возвращала значение обратно в основную функцию. Например, вместо того, чтобы просто печатать вычисление x + y, вы можете захотеть, чтобы функция возвращала значение этого вычисления обратно в другую часть вашей программы. Эту «возвращаемое значение» значения мы называем return.</li>\r\n        <li>Вернемся к нашему коду в <code class=\"code\">calculator.py</code>, набрав <code class=\"code\">code calculator.py</code>. Сотрите там весь код. Переработайте код следующим образом:</li>\r\n        <pre class=\"highlight\"><code>def main():\r\n    x = int(input(\"What's x? \"))\r\n    print(\"x squared is\", square(x))\r\n\r\n\r\ndef square(n):\r\n    return n * n\r\n\r\n\r\nmain()</code></pre>\r\n        <span><code class=\"code\">x</code> передается в <code class=\"code\">square</code>. Затем вычисление <code class=\"code\">x * x</code> возвращается обратно в функцию main.</span>\r\n        <h2 id=\"summing-up\">Подводя итог</h2>\r\n        <p>Благодаря работе на этой единственной лекции вы узнали способности, которые будете использовать бесчисленное количество раз в своих собственных программах. Вы узнали о…</p>\r\n        <ul>\r\n            <li>Написание кода на Python;</li>\r\n            <li>Функции;</li>\r\n            <li>Баги;</li>\r\n            <li>Переменные;</li>\r\n            <li>Комментарии;</li>\r\n            <li>Псевдокод;</li>\r\n            <li>Строки;</li>\r\n            <li>Параметры;</li>\r\n            <li>Форматирование строк;</li>\r\n            <li>Целые числа;</li>\r\n            <li>Принципы удобочитаемости;</li>\r\n            <li>float;</li>\r\n            <li>Создание собственных функций;</li>\r\n            <li>Возвращаемые значения.</li>\r\n        </ul>\r\n    </main>\r\n</template>\r\n\r\n\r\n","import { render } from \"./Notes0View.vue?vue&type=template&id=3349f213\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ммм\\\\Desktop\\\\cs50-python-ru\\\\cs50-python-ru\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n    <main>\r\n        <h1>Набор проблем 0</h1>\r\n        <h2>Что нужно делать</h2>\r\n        <ol>\r\n            <li>Отправьте <a href=\"https://forms.cs50.io/27a35e60-490a-4e42-8574-6b55154ae760\"> эту форму</a>.</li>\r\n            <li>Перейдите по <a href=\"https://submit.cs50.io/invites/579861a2825849178cd11315c055bc49\">этой ссылке</a>, войдите в свой GitHub аккаунт, и нажмите Authorize CS50.</li>\r\n            <li>Установите флажок, указывающий, что вы хотите предоставить сотрудникам курса доступ к вашей работе, и нажмите 'Присоединиться к курсу'(Join course).</li>\r\n            <li>Войдите в <a href=\"https://code.cs50.io/\"> code.cs50.io</a>, облачную версию Visual Studio Code (VS Code), которая предоставляет собственное  кодовое пространство(Codespace) со всем что нужно для прохождения курса . Не нужно скачивать и устанавливать VS Code или Python на свой Mac или ПК!</li>\r\n            <li>Как только кодовое пространство(Codespace) загрузится, закройте все вкладки приветствия, которые могли быть открыты по умолчанию.</li>\r\n            <li>В терминале Codespace выполните шаги в разделе SSH по адресу <a href=\"https://cs50.readthedocs.io/github/#ssh\"> cs50.readthedocs.io/github/#ssh</a>, чтобы настроить Codespace для некоторых инструментов командной строки CS50.</li>\r\n            <li>Выполните update50 в окне терминала вашего Codespace, чтобы убедиться, что ваше пространство кода обновлено, при появлении запроса нажмите <b>Rebuild now</b>.</li>\r\n            <li>\r\n                <span>Отправьте все проблемы приведенные ниже:</span>\r\n                <ul>\r\n                    <li><router-link to=\"/0/indoor/\">Indoor</router-link> </li>\r\n                    <li><router-link to=\"/0/playback/\">Playback Speed</router-link> </li>\r\n                    <li><router-link to=\"/0/making/\">Making face</router-link> </li>\r\n                    <li><router-link to=\"/0/einstein/\">Einstein</router-link> </li>\r\n                    <li><router-link to=\"/0/calculator/\">Tip Calculator</router-link> </li>\r\n                </ul>\r\n            </li>\r\n        </ol>\r\n    </main>\r\n</template>\r\n<style scoped>\r\nmain {\r\n    height: 100vh;\r\n}\r\n</style>","import { render } from \"./Psets0View.vue?vue&type=template&id=62ffa640&scoped=true\"\nconst script = {}\n\nimport \"./Psets0View.vue?vue&type=style&index=0&id=62ffa640&scoped=true&lang=css\"\n\nimport exportComponent from \"C:\\\\Users\\\\ммм\\\\Desktop\\\\cs50-python-ru\\\\cs50-python-ru\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-62ffa640\"]])\n\nexport default __exports__","<template>\r\n    <main>\r\n        <h1>Глубокий Разум (Deep Thought)</h1>\r\n        <blockquote>\r\n            <p>— Хорошо, — сказал компьютер и снова погрузился в тишину. Двое мужчин заерзали. Напряжение было невыносимым.<br>— Тебе это действительно не понравится, — заметил Глубокий Разум.\r\n                <br>\"Расскажи нам!\"<br>— Хорошо, — сказал Глубокий Разум. «Ответ на великий вопрос…»<br>«Да…!»<br>— О Жизни, Вселенной и обо всем… — сказал Глубокий Разум.<br>\"Да…!\"<br>— Это… — сказал Глубокий Разум <br> и сделал паузу.<br>\"Да…!\"<br>«Это…»<br>«Да…!!!…?»<br>— Сорок два, — сказал Глубокий Разум с бесконечным величием и спокойствием.</p>\r\n            <p>— Автостопом по Галактике , Дуглас Адамс</p>\r\n        </blockquote>\r\n        <p>В <code class=\"code\">deep.py</code>, реализуйте программу, которая запрашивает у пользователя ответ на Великий вопрос о жизни, Вселенной и всего остального, выводя, <code class=\"code\">Yes</code> если пользователь вводит <code class=\"code\">42</code> или <code class=\"code\">forty-two</code> или <code class=\"code\">forty two</code>(без учета регистра). В противном случае вывод <code class=\"code\">No</code>.</p>\r\n        <details>\r\n            <summary>Подсказки</summary>\r\n            <ul>\r\n                <li>Нет необходимости преобразовывать ввод пользователя в int, если вы проверяете равенство с помощью \"42\"(str), а не 42(int)!</li>\r\n                <li>Ничего страшного, если ваш вывод или вывод пользователя переносятся на несколько строк.</li>\r\n            </ul>\r\n        </details>\r\n        <h2>Демо</h2>\r\n        <img src=\"../../assets/week1/demo_deep.png\" alt=\"\">\r\n        <h2>Перед тем как приступить к заданию</h2>\r\n        <p>Перейдите по ссылке <a href=\"https://code.cs50.io/\">code.cs50.io</a> и зайдите в свой аккаунт. Выполните комманду <code class=\"code\">cd</code> в вашем терминальном окне. Ваше терминальное окно должно выглядить как представлено ниже:</p>\r\n        <pre class=\"highlight\"><code>$</code></pre>\r\n        <p>Следующая команда</p>\r\n        <pre class=\"highlight\"><code>mkdir deep</code></pre>\r\n        <p>создаст папку <code class=\"code\">deep</code> в вашем рабочем пространстве.</p>\r\n        <p>Затем выполните</p>\r\n        <pre class=\"highlight\"><code>cd deep</code></pre>\r\n        <p>чтобы изменить директорию в папке. Вы должны увидеть в терминале <code class=\"code\">deep/ $</code>. Вы можете сейчас выполнить</p>\r\n        <pre class=\"highlight\"><code>code deep.py</code> </pre>\r\n        <p>чтобы создать файл с именем , <code class=\"code\"> deep.py</code>в котором вы будете писать свою программу.</p>\r\n        <h2>Как проверить</h2>\r\n        <p>Вот как протестировать код вручную:</p>\r\n        <ul>\r\n            <li>Запустите вашу программу с помощью комманды <code class=\"code\">python deep.py</code>. Введите  <code class=\"code\">42</code> и нажмите Enter. Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code> Yes</code></pre>\r\n            <li>Запустите вашу программу с помощью комманды <code class=\"code\">python deep.py</code>. Введите  <code class=\"code\">Forty Two</code> и нажмите Enter.Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>Yes</code></pre>\r\n            <li>Запустите вашу программу с помощью комманды <code class=\"code\">python deep.py</code>. Введите  <code class=\"code\">forty-two</code> и нажмите Enter. Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>Yes</code></pre>\r\n            <li>Запустите вашу программу с помощью комманды <code class=\"code\">python deep.py</code>. Введите  <code class=\"code\">50</code> и нажмите Enter. Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>No</code></pre>\r\n        </ul>\r\n        <p>Вы можете выполнить приведенную ниже команду, чтобы проверить свой код с помощью <code>check50</code>,являющейся программой которой CS50 будет проверять ваш код при отправке. Но перед отправкой обязательно протестируйте свой код сами!</p>\r\n        <pre  class=\"highlight\"><code>check50 cs50/problems/2022/python/deep</code></pre>\r\n        <p>Зеленые смайлики означают, что ваша программа прошла проверку! Красные означают, что ваша программа выводит что-то неожиданное. Посетите URL-адрес, который выводит <code class=\"code\">check50</code>, чтобы увидеть ответ <code class=\"code\">check50</code>, переданный вашей программе, какой вывод она ожидала и какой вывод фактически выдала ваша программа.</p>\r\n        <h2>Как отправить</h2>\r\n        <p> В своем терминале выполните следующее, чтобы отправить свою работу.</p>\r\n        <pre class=\"highlight\"><code>submit50 cs50/problems/2022/python/deep</code></pre>\r\n    </main>\r\n</template>","import { render } from \"./DeepThought.vue?vue&type=template&id=b51b0544\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ммм\\\\Desktop\\\\cs50-python-ru\\\\cs50-python-ru\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n    <main>\r\n        <h1>Расширения файлов (File Extensions)</h1>\r\n        <p>Несмотря на то, что Windows и macOS иногда их скрывают, большинство файлов имеют <a href=\"https://en.wikipedia.org/wiki/Filename_extension\">расширения</a>, суффикс, начинающийся с точки (<code class=\"code\">.</code>) в конце имени. Например, имена <a href=\"https://en.wikipedia.org/wiki/GIF\">файлов для GIF</a> заканчиваются на <code class=\"code\">.gif</code>, а имена <a href=\"https://en.wikipedia.org/wiki/JPEG\">файлов для JPEG</a> заканчиваются на <code class=\"code\">jpg</code> или <code class=\"code\">jpeg</code>. Когда вы дважды щелкаете файл, чтобы открыть его, ваш компьютер использует расширение файла, чтобы определить, какую программу запускать.</p>\r\n        <p>Веб-браузеры, напротив, полагаются на <a href=\"https://en.wikipedia.org/wiki/Media_type\">типы мультимедиа</a>, ранее известные как типы MIME, чтобы определить, как отображать файлы, находящиеся в Интернете. Когда вы загружаете файл с веб-сервера, этот сервер отправляет <a href=\"https://en.wikipedia.org/wiki/List_of_HTTP_header_fields\">HTTP-заголовок</a> вместе с самим файлом, указывающим тип носителя файла. Например, тип мультимедиа для GIF — <code class=\"code\">image/gif</code>, а тип мультимедиа для JPEG — <code class=\"code\">image/jpeg</code>. Чтобы определить тип мультимедиа для файла, веб-сервер обычно просматривает расширение файла, сопоставляя одно с другим.</p>\r\n        <p>Общие типы см . на странице <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types\">developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types</a>.</p>\r\n        <p>В файле с именем <code class=\"code\">extensions.py</code> реализуйте программу, которая запрашивает у пользователя имя файла, а затем выводит тип носителя этого файла, если имя файла заканчивается без учета регистра любым из этих суффиксов:</p>\r\n        <ul>\r\n            <li><code class=\"code\">.gif</code></li>\r\n            <li><code class=\"code\">.jpg</code></li>\r\n            <li><code class=\"code\">.jpeg</code></li>\r\n            <li><code class=\"code\">.png</code></li>\r\n            <li><code class=\"code\">.pdf</code></li>\r\n            <li><code class=\"code\">.txt</code></li>\r\n            <li><code class=\"code\">.zip</code></li>\r\n        </ul>\r\n        <p>Если имя файла заканчивается каким-либо другим суффиксом или вообще не имеет суффикса, вместо этого выводится <code class=\"code\">application/octet-stream</code>, что является обычным значением по умолчанию.</p>\r\n        <details>\r\n            <summary>Подсказки</summary>\r\n            <ul>\r\n                <li>Не забывайте, что <code class=\"code\">str</code> имеет несколько методов, согласно <a href=\"https://docs.python.org/3/library/stdtypes.html#string-methods\">docs.python.org/3/library/stdtypes.html#string-methods</a></li>        \r\n            </ul>\r\n        </details>\r\n        <h2>Демо</h2>\r\n        <div id=\"asciicast-container-qUGyqlHIt0Za5lBMc0GB4CuLV\" class=\"asciicast\" style=\"display: block; float: none; overflow: hidden; padding: 0px; margin: 20px 0px;\"><iframe src=\"https://asciinema.org/a/qUGyqlHIt0Za5lBMc0GB4CuLV/iframe?autoplay=1&amp;loop=1&amp;cols=80&amp;rows=12\" id=\"asciicast-iframe-qUGyqlHIt0Za5lBMc0GB4CuLV\" name=\"asciicast-iframe-qUGyqlHIt0Za5lBMc0GB4CuLV\" scrolling=\"no\" allowfullscreen=\"true\" style=\"overflow: hidden; margin: 0px; border: 0px; display: inline-block; width: 100%; float: none; visibility: visible; height: 491px;\"></iframe></div>\r\n        <h2>Перед тем как приступить к заданию</h2>\r\n        <p>Перейдите по ссылке <a href=\"https://code.cs50.io/\">code.cs50.io</a> и зайдите в свой аккаунт. Выполните комманду <code class=\"code\">cd</code> в вашем терминальном окне. Ваше терминальное окно должно выглядить как представлено ниже:</p>\r\n        <pre class=\"highlight\"><code>$</code></pre>\r\n        <p>Следующая команда</p>\r\n        <pre class=\"highlight\"><code>mkdir extensions</code></pre>\r\n        <p>создаст папку <code class=\"code\">extensions</code> в вашем рабочем пространстве.</p>\r\n        <p>Затем выполните</p>\r\n        <pre class=\"highlight\"><code>cd extensions</code></pre>\r\n        <p>чтобы изменить директорию в папке. Вы должны увидеть в терминале <code class=\"code\">extensions/ $</code>. Вы можете сейчас выполнить</p>\r\n        <pre class=\"highlight\"><code>code extensions.py</code> </pre>\r\n        <p>чтобы создать файл с именем , <code class=\"code\"> extensions.py</code>в котором вы будете писать свою программу.</p>\r\n        <h2>Как проверить</h2>\r\n        <p>Вот как протестировать код вручную:</p>\r\n        <ul>\r\n            <li>Запустите вашу программу с помощью комманды <code class=\"code\">python extensions.py</code>. Введите  <code class=\"code\">happy.jpg</code> и нажмите Enter. Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code> image/jpeg </code></pre>\r\n            <li>Запустите вашу программу с помощью комманды <code class=\"code\">python extensions.py</code>. Введите  <code class=\"code\">document.pdf</code> и нажмите Enter.Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>application/pdf </code></pre>\r\n        </ul>\r\n        <p>Обязательно протестируйте каждый из других форматов файлов, измените регистр ввода и «случайно» добавьте пробелы с обеих сторон ввода перед нажатием клавиши ввода. Ваша программа должна вести себя так, как ожидается, без учета регистра и пробелов.</p>\r\n        <p>Вы можете выполнить приведенную ниже команду, чтобы проверить свой код с помощью <code>check50</code>,являющейся программой которой CS50 будет проверять ваш код при отправке. Но перед отправкой обязательно протестируйте свой код сами!</p>\r\n        <pre  class=\"highlight\"><code>check50 cs50/problems/2022/python/extensions</code></pre>\r\n        <p>Зеленые смайлики означают, что ваша программа прошла проверку! Красные означают, что ваша программа выводит что-то неожиданное. Посетите URL-адрес, который выводит <code class=\"code\">check50</code>, чтобы увидеть ответ <code class=\"code\">check50</code>, переданный вашей программе, какой вывод она ожидала и какой вывод фактически выдала ваша программа.</p>\r\n        <h2>Как отправить</h2>\r\n        <p> В своем терминале выполните следующее, чтобы отправить свою работу.</p>\r\n        <pre class=\"highlight\"><code>submit50 cs50/problems/2022/python/extensions</code></pre>\r\n    </main>\r\n</template>","import { render } from \"./FileExtensions.vue?vue&type=template&id=aa921b48\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ммм\\\\Desktop\\\\cs50-python-ru\\\\cs50-python-ru\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n    <main>\r\n        <h1>Главный Федеральный сберегательный банк (Home Federal Savings Bank)</h1>\r\n        <p>В <a href=\"https://en.wikipedia.org/wiki/The_Invitations\">24 эпизоде 7 сезона</a> <a href=\"https://en.wikipedia.org/wiki/Seinfeld\">« Сайнфелда »</a> <a href=\"https://en.wikipedia.org/wiki/Cosmo_Kramer\">Крамер</a> посещает банк, который обещает дать 100 долларов любому посетителю, который при приветствии не скажет \"hello\". Вместо этого Крамера говорит \"hey\", которое, как он настаивает, не является \"hello\", и поэтому он просит 100 долларов. Менеджер банка предлагает компромисс: «Ваше приветствие начинается на \"h\", как насчет 20 долларов?» Крамер соглашается.</p>\r\n        <p>В файле с именем <code class=\"code\">bank.py</code> реализуйте программу, которая запрашивает у пользователя приветствие. Если приветствие начинается с \"hello\", выведите $0. Если приветствие начинается с «h» (но не «hello»), выведите $20. В противном случае выведите $100. Игнорируйте любые начальные пробелы в приветствии пользователя и обрабатывайте приветствие пользователя без учета регистра.</p>\r\n        <details>\r\n            <summary>Подсказки</summary>\r\n            <ul>\r\n                <li>Не забывайте, что <code class=\"code\">str</code> имеет несколько методов, согласно <a href=\"https://docs.python.org/3/library/stdtypes.html#string-methods\">docs.python.org/3/library/stdtypes.html#string-methods</a></li>\r\n                <li>Обязательно дайте 0$ не только за \"hello\", но и за \"hello there\", “hello, Newman”, и тому подобное.</li>\r\n            </ul>\r\n        </details>\r\n        <h2>Демо</h2>\r\n        <div id=\"asciicast-container-Pes7djS4b1GmwpwqNu2vj6LgY\" class=\"asciicast\" style=\"display: block; float: none; overflow: hidden; padding: 0px; margin: 20px 0px;\"><iframe src=\"https://asciinema.org/a/Pes7djS4b1GmwpwqNu2vj6LgY/iframe?autoplay=1&amp;loop=1&amp;cols=80&amp;rows=12\" id=\"asciicast-iframe-Pes7djS4b1GmwpwqNu2vj6LgY\" name=\"asciicast-iframe-Pes7djS4b1GmwpwqNu2vj6LgY\" scrolling=\"no\" allowfullscreen=\"true\" style=\"overflow: hidden; margin: 0px; border: 0px; display: inline-block; width: 100%; float: none; visibility: visible; height: 491px;\"></iframe></div>\r\n        <h2>Перед тем как приступить к заданию</h2>\r\n        <p>Перейдите по ссылке <a href=\"https://code.cs50.io/\">code.cs50.io</a> и зайдите в свой аккаунт. Выполните комманду <code class=\"code\">cd</code> в вашем терминальном окне. Ваше терминальное окно должно выглядить как представлено ниже:</p>\r\n        <pre class=\"highlight\"><code>$</code></pre>\r\n        <p>Следующая команда</p>\r\n        <pre class=\"highlight\"><code>mkdir bank</code></pre>\r\n        <p>создаст папку <code class=\"code\">bank</code> в вашем рабочем пространстве.</p>\r\n        <p>Затем выполните</p>\r\n        <pre class=\"highlight\"><code>cd bank</code></pre>\r\n        <p>чтобы изменить директорию в папке. Вы должны увидеть в терминале <code class=\"code\">bank/ $</code>. Вы можете сейчас выполнить</p>\r\n        <pre class=\"highlight\"><code>code bank.py</code> </pre>\r\n        <p>чтобы создать файл с именем , <code class=\"code\"> bank.py</code>в котором вы будете писать свою программу.</p>\r\n        <h2>Как проверить</h2>\r\n        <p>Вот как протестировать код вручную:</p>\r\n        <ul>\r\n            <li>Запустите вашу программу с помощью комманды <code class=\"code\">python bank.py</code>. Введите  <code class=\"code\">Hello</code> и нажмите Enter. Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code> $0 </code></pre>\r\n            <li>Запустите вашу программу с помощью комманды <code class=\"code\">python bank.py</code>. Введите  <code class=\"code\">Hello, Newman</code> и нажмите Enter.Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>$0 </code></pre>\r\n            <li>Запустите вашу программу с помощью комманды <code class=\"code\">python bank.py</code>. Введите  <code class=\"code\">How you doing?</code> и нажмите Enter. Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>$20</code></pre>\r\n            <li>Запустите вашу программу с помощью комманды <code class=\"code\">python bank.py</code>. Введите  <code class=\"code\">What's happening?</code> и нажмите Enter. Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>$100</code></pre>\r\n        </ul>\r\n        <p>Вы можете выполнить приведенную ниже команду, чтобы проверить свой код с помощью <code>check50</code>,являющейся программой которой CS50 будет проверять ваш код при отправке. Но перед отправкой обязательно протестируйте свой код сами!</p>\r\n        <pre  class=\"highlight\"><code>check50 cs50/problems/2022/python/bank</code></pre>\r\n        <p>Зеленые смайлики означают, что ваша программа прошла проверку! Красные означают, что ваша программа выводит что-то неожиданное. Посетите URL-адрес, который выводит <code class=\"code\">check50</code>, чтобы увидеть ответ <code class=\"code\">check50</code>, переданный вашей программе, какой вывод она ожидала и какой вывод фактически выдала ваша программа.</p>\r\n        <h2>Как отправить</h2>\r\n        <p> В своем терминале выполните следующее, чтобы отправить свою работу.</p>\r\n        <pre class=\"highlight\"><code>submit50 cs50/problems/2022/python/bank</code></pre>\r\n    </main>\r\n</template>","import { render } from \"./HomeBank.vue?vue&type=template&id=c76a51ba\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ммм\\\\Desktop\\\\cs50-python-ru\\\\cs50-python-ru\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n    <main>\r\n        <h1>Math Interpreter</h1>\r\n        <p>Python уже поддерживает математику, благодаря чему вы можете писать код для сложения, вычитания, умножения или деления значений и даже переменных. Но давайте напишем программу, которая позволит пользователям заниматься математикой, даже не зная Python.</p>\r\n        <p>В файле с именем <code class=\"code\">interpreter.py</code> реализуйте программу, которая запрашивает у пользователя  арифметическое выражение, а затем вычисляет и выводит результат в виде значения с плавающей запятой(float), отформатированного до одного десятичного разряда. Допустим что пользователь вводит данные в формате <code class=\"code\">x y z</code> и с одним пробелом между <code class=\"code\">x</code> и <code class=\"code\">y</code> и одним пробелом между <code class=\"code\">y</code> и <code class=\"code\">z</code> в котором: </p>\r\n        <ul>\r\n            <li><code class=\"code\">x</code> это целое число(int)</li>\r\n            <li><code class=\"code\">y</code> это <code class=\"code\">+</code>,<code class=\"code\">-</code>,<code class=\"code\">*</code> или <code class=\"code\">/</code></li>\r\n            <li><code class=\"code\">z</code> это целое число(int)</li>\r\n        </ul>\r\n        <p>Обратите внимание, что <code class=\"code\">python</code> это интерпретатор Python, а ваша программа <code class=\"code\">interpreter.py</code> будет интерпретатором математики</p>\r\n        <details>\r\n            <summary>Подсказки</summary>\r\n            <ul>\r\n                <li>Не забывайте, что <code class=\"code\">str</code> имеет несколько методов, согласно <a href=\"https://docs.python.org/3/library/stdtypes.html#string-methods\">docs.python.org/3/library/stdtypes.html#string-methods</a>, включая метод <code class=\"code\">split</code>, который разделяет <code class=\"code\">str</code> в последовательность значений, все они могут быть назначены переменным одновременно. Например, если выражение это <code class=\"code\">str</code> - 1 + 1, то</li>\r\n                <pre class=\"highlight\"><code>x, y, z = expression.split(\" \")</code></pre>\r\n                <p>x будет 1, y будет + и z будет второй 1</p>\r\n            </ul>\r\n        </details>\r\n        <h2>Демо</h2>\r\n        <div id=\"asciicast-container-udHWr5HxtxP5poDso1aVRB7qC\" class=\"asciicast\" style=\"display: block; float: none; overflow: hidden; padding: 0px; margin: 20px 0px;\"><iframe src=\"https://asciinema.org/a/udHWr5HxtxP5poDso1aVRB7qC/iframe?autoplay=1&amp;loop=1&amp;cols=80&amp;rows=12\" id=\"asciicast-iframe-udHWr5HxtxP5poDso1aVRB7qC\" name=\"asciicast-iframe-udHWr5HxtxP5poDso1aVRB7qC\" scrolling=\"no\" allowfullscreen=\"true\" style=\"overflow: hidden; margin: 0px; border: 0px; display: inline-block; width: 100%; float: none; visibility: visible; height: 491px;\"></iframe></div>\r\n        <h2>Перед тем как приступить к заданию</h2>\r\n        <p>Перейдите по ссылке <a href=\"https://code.cs50.io/\">code.cs50.io</a> и зайдите в свой аккаунт. Выполните комманду <code class=\"code\">cd</code> в вашем терминальном окне. Ваше терминальное окно должно выглядить как представлено ниже:</p>\r\n        <pre class=\"highlight\"><code>$</code></pre>\r\n        <p>Следующая команда</p>\r\n        <pre class=\"highlight\"><code>mkdir interpreter</code></pre>\r\n        <p>создаст папку <code class=\"code\">interpreter</code> в вашем рабочем пространстве.</p>\r\n        <p>Затем выполните</p>\r\n        <pre class=\"highlight\"><code>cd interpreter</code></pre>\r\n        <p>чтобы изменить директорию в папке. Вы должны увидеть в терминале <code class=\"code\">interpreter/ $</code>. Вы можете сейчас выполнить</p>\r\n        <pre class=\"highlight\"><code>code interpreter.py</code> </pre>\r\n        <p>чтобы создать файл с именем , <code class=\"code\"> interpreter.py</code>в котором вы будете писать свою программу.</p>\r\n        <h2>Как проверить</h2>\r\n        <p>Вот как протестировать код вручную:</p>\r\n        <ul>\r\n            <li>Запустите вашу программу с помощью комманды <code class=\"code\">python interpreter.py</code>. Введите  <code class=\"code\">1 + 1</code> и нажмите Enter. Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>2.0 </code></pre>\r\n            <li>Запустите вашу программу с помощью комманды <code class=\"code\">python interpreter.py</code>. Введите  <code class=\"code\">2 - 3</code> и нажмите Enter.Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>-1.0 </code></pre>\r\n            <li>Запустите вашу программу с помощью комманды <code class=\"code\">python interpreter.py</code>. Введите  <code class=\"code\">2 * 2</code> и нажмите Enter. Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>4.0</code></pre>\r\n            <li>Запустите вашу программу с помощью комманды <code class=\"code\">python interpreter.py</code>. Введите  <code class=\"code\">50 / 5</code> и нажмите Enter. Ваша программа должна вывести:</li>\r\n            <pre class=\"highlight\"><code>10.0</code></pre>\r\n        </ul>\r\n        <p>Вы можете выполнить приведенную ниже команду, чтобы проверить свой код с помощью <code>check50</code>,являющейся программой которой CS50 будет проверять ваш код при отправке. Но перед отправкой обязательно протестируйте свой код сами!</p>\r\n        <pre  class=\"highlight\"><code>check50 cs50/problems/2022/python/interpreter</code></pre>\r\n        <p>Зеленые смайлики означают, что ваша программа прошла проверку! Красные означают, что ваша программа выводит что-то неожиданное. Посетите URL-адрес, который выводит <code class=\"code\">check50</code>, чтобы увидеть ответ <code class=\"code\">check50</code>, переданный вашей программе, какой вывод она ожидала и какой вывод фактически выдала ваша программа.</p>\r\n        <h2>Как отправить</h2>\r\n        <p> В своем терминале выполните следующее, чтобы отправить свою работу.</p>\r\n        <pre class=\"highlight\"><code>submit50 cs50/problems/2022/python/interpreter</code></pre>\r\n    </main>\r\n</template>","import { render } from \"./MathInterpreter.vue?vue&type=template&id=e182c3bc\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ммм\\\\Desktop\\\\cs50-python-ru\\\\cs50-python-ru\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n    <main></main>\r\n</template>","import { render } from \"./MealTime.vue?vue&type=template&id=069b9388\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ммм\\\\Desktop\\\\cs50-python-ru\\\\cs50-python-ru\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n    <main>\r\n        <h1>Лекция 1</h1>\r\n        <ul>\r\n            <li>Условные выражения</li>\r\n            <li>Оператор if</li>\r\n            <li>Управление потоком, elif, and else</li>\r\n            <li>or</li>\r\n            <li>and</li>\r\n            <li>Modulo</li>\r\n            <li>Создание функции для определении четности числа</li>\r\n            <li>Pythonic</li>\r\n            <li>match</li>\r\n            <li><a href=\"#summing-up\">Подводя итог</a></li>\r\n        </ul>\r\n        <h2>Условные выражения</h2>\r\n        <ul>\r\n            <li>Условные выражения позволяют вам, программисту, разрешить вашей программе принимать решения: как если бы у вашей программы был выбор между левым или правым путем в зависимости от определенных условий</li>\r\n            <li>В Python встроен набор «операторов», с помощью которых можно задавать математические вопросы.</li>\r\n            <li><code class=\"code\">></code> и <code class=\"code\">&lt;</code> символы, вероятно, вам хорошо знакомы.</li>\r\n            <li><code class=\"code\">>=</code> означает «больше или равно».</li>\r\n            <li><code class=\"code\">&lt;=</code> означает «меньше или равно».</li>\r\n            <li><code class=\"code\">==</code> означает «равно», обратите внимание на двойной знак равенства! Один знак равенства будет присваивать значение. Двойной знак равенства используются для сравнения переменных.</li>\r\n            <li><code class=\"code\">!= </code>означает «не равно».</li>\r\n            <li>Условные операторы сравнивают левое выражение с правым выражением.</li>\r\n        </ul>\r\n        <h2>Оператор if</h2>\r\n        <ul>\r\n            <li>В окне терминала введите <code class=\"code\">code compare.py</code>. Это создаст новый файл с именем «compare».</li>\r\n            <li>В окне текстового редактора начните со следующего:</li>\r\n            <pre class=\"highlight\"><code>x = int(input(\"What's x? \"))\r\ny = int(input(\"What's y? \"))\r\n\r\nif x &lt; y:\r\n    print(\"x is less than y\")</code></pre>\r\n            <span>Обратите внимание, как ваша программа принимает ввод пользователя как для x, так и для y, преобразуя их в целые числа и сохраняя их в соответствующие переменные x и y. Затем  оператор <code class=\"code\">if</code> сравнивает x и y. Если условие <code class=\"code\">x &lt; y</code> выполнено, выполняется функция <code class=\"code\">print</code>.</span>\r\n            <li>Операторы if используют <code class=\"code\">bool</code> или логические значения (true или false), чтобы решить, выполнять код или нет. Если утверждение <code class=\"code\">x > y</code> верно, компилятор зарегистрирует его как true и выполнит код.</li>\r\n        </ul>\r\n        <h2>Управление потоком, elif, and else</h2>\r\n        <ul>\r\n            <li>Далее измените свой код следующим образом:</li>\r\n            <pre class=\"highlight\"><code>x = int(input(\"What's x? \"))\r\ny = int(input(\"What's y? \"))\r\n\r\nif x &lt; y:\r\n    print(\"x is less than y\")\r\nif x > y:\r\n    print(\"x is greater than y\")\r\nif x == y:\r\n    print(\"x is equal to y\")</code></pre>\r\n            <span>Обратите внимание, как выглядит серия if утверждений. Сначала if оценивается первое утверждение. Затем второй if оператор выполняет свою проверку. Наконец, последний if оператор выполняет проверку. Этот поток решений называется «поток управления»(control flow).</span>\r\n            <li>Наш код можно представить следующим образом:</li>\r\n            <img src=\"../../assets/week1/note1_1.png\" alt=\"\">\r\n            <li>Эту программу можно улучшить, если не задавать три последовательных вопроса. Ведь все три вопроса могут не иметь верный ответ! Измените свою программу следующим образом:</li>\r\n            <pre class=\"highlight\"><code>x = int(input(\"What's x? \"))\r\ny = int(input(\"What's y? \"))\r\n\r\nif x &lt; y:\r\n    print(\"x is less than y\")\r\nelif x > y:\r\n    print(\"x is greater than y\")\r\nelif x == y:\r\n    print(\"x is equal to y\")</code></pre>\r\n            <span>Обратите внимание, что использование <code class=\"code\">elif</code> позволяет программе принимать меньше решений. Сначала проверяется <code class=\"code\">if</code>. Если это утверждение окажется верным, все <code class=\"code\">elif</code> утверждения вообще не будут выполняться. Однако, если <code class=\"code\">if</code> проверяется и оказывается ложным, будет проверяться первый <code class=\"code\">elif</code>. Если утверждение будет верным, последняя проверка выполняться не будет.</span>\r\n            <li>Наш код можно представить следующим образом:</li>\r\n            <img src=\"../../assets/week1/note1_2.png\" alt=\"\">\r\n            <li>Хотя ваш компьютер может не заметить разницы в скорости между нашей первой программой и этой исправленной программой, подумайте, об онлайн-сервере, выполняющий миллиарды или триллионы таких вычислений каждый день, определенно такое небольшое кодовое решение может повлиять на производительность.</li>\r\n            <li>И последнее улучшение, которое мы можем внести в нашу программу. Обратите внимание, насколько логически выполнение<code class=\"code\">elif x == y</code>проверки не является обязательным. В конце концов, если логически x не меньше y И x не больше y, x ДОЛЖЕН равняться y. Поэтому нам не нужно проверять <code class=\"code\">elif x == y</code>. Мы можем создать «универсальный» результат по умолчанию, используя else оператор. Мы можем переписать код следующим образом:</li>\r\n            <pre class=\"highlight\"><code>x = int(input(\"What's x? \"))\r\ny = int(input(\"What's y? \"))\r\n\r\nif x &lt; y:\r\n    print(\"x is less than y\")\r\nelif x > y:\r\n    print(\"x is greater than y\")\r\nelse:\r\n    print(\"x is equal to y\")</code></pre>\r\n            <span>Обратите внимание, как относительная сложность этой программы уменьшилась благодаря нашей редакции.</span>\r\n            <li>Наш код можно представить следующим образом:</li>\r\n            <img src=\"../../assets/week1/note1_3.png\" alt=\"\">\r\n            </ul>\r\n            <h2>or</h2>\r\n            <ul>\r\n                <li><code class=\"code\">or</code> позволяет вашей программе выбирать между одной или несколькими альтернативами. Например, мы могли бы дополнительно отредактировать нашу программу следующим образом:</li>\r\n                <pre class=\"highlight\"><code>x = int(input(\"What's x? \"))\r\ny = int(input(\"What's y? \"))\r\n\r\nif x &lt; y or x > y:\r\n    print(\"x is not equal to y\")\r\nelse:\r\n    print(\"x is equal to y\")</code></pre>\r\n                <span>Обратите внимание, что результат нашей программы тот же, но сложность уменьшилась, а эффективность нашего кода увеличилась.</span>\r\n                <li>На данный момент наш код довольно хорош. Однако можно ли еще улучшить конструкцию? Мы могли бы дополнительно отредактировать наш код следующим образом:</li>\r\n                <pre class=\"highlight\"><code>x = int(input(\"What's x? \"))\r\ny = int(input(\"What's y? \"))\r\n\r\nif x != y:\r\n    print(\"x is not equal to y\")\r\nelse:\r\n    print(\"x is equal to y\")</code></pre>\r\n                <span>Обратите внимание, что мы полностью удалили <code class=\"code\">or</code> и просто спросили: «Разве x не равно y?»(x is not equal to y) Мы задаем один и только один вопрос. Очень эффективно!</span>\r\n                <li>Для иллюстрации мы также можем изменить наш код следующим образом:</li>\r\n            <pre class=\"highlight\"><code>x = int(input(\"What's x? \"))\r\ny = int(input(\"What's y? \"))\r\n\r\nif x == y:\r\n    print(\"x is equal to y\")\r\nelse:\r\n    print(\"x is not equal to y\")</code></pre>\r\n                <span>Обратите внимание, что оператор <code class=\"code\">==</code> проверяет, равны ли друг другу то, что находится слева и справа. Использование двойного знака равенства очень важно. Если вы используете только один знак равенства, компилятор, скорее всего, выдаст ошибку.</span>\r\n                <li>Наш код можно проиллюстрировать следующим образом:</li>\r\n                <img src=\"../../assets/week1/note1_4.png\" alt=\"\">\r\n            </ul>\r\n            <h2>and</h2>\r\n            <ul>\r\n                <li>Подобно <code class=\"code\">or</code>, <code class=\"code\">and</code> можно использовать в условных операторах.</li>\r\n                <li>Выполнить в окне терминала <code class=\"code\">code grade.py</code>. Заполните новую программу следующим образом:</li>\r\n                <pre class=\"highlight\"><code>score = int(input(\"Score: \"))\r\n\r\nif score >= 90 and score &lt;= 100:\r\n    print(\"Grade: A\")\r\nelif score >=80 and score &lt; 90:\r\n    print(\"Grade: B\")\r\nelif score >=70 and score &lt; 80:\r\n    print(\"Grade: C\")\r\nelif score >=60 and score &lt; 70:\r\n    print(\"Grade: D\")\r\nelse:\r\n    print(\"Grade: F\")</code></pre>\r\n                <span>Обратите внимание, что при выполнении <code class=\"cod\">python grade.py</code> вы сможете ввести балл и получить оценку. Однако обратите внимание, на возможные ошибки.</span>\r\n                <li>Как правило, мы никогда не доверяем нашему пользователю вводить правильную информацию. Мы могли бы улучшить наш код следующим образом:</li>\r\n                <pre class=\"highlight\"><code>  score = int(input(\"Score: \"))\r\n\r\nif 90 &lt;= score &lt;= 100:\r\n    print(\"Grade: A\")\r\nelif 80 &lt;= score &lt; 90:\r\n    print(\"Grade: B\")\r\nelif 70 &lt;= score &lt; 80:\r\n    print(\"Grade: C\")\r\nelif 60 &lt;= score &lt; 70:\r\n    print(\"Grade: D\")\r\nelse:\r\n    print(\"Grade: F\")</code></pre>\r\n                <span>Обратите внимание на то, как Python позволяет вам связывать операторы и условия способом, совершенно необычным для других языков программирования.</span>\r\n                <li>Тем не менее, мы можем еще больше улучшить нашу программу:</li>\r\n                <pre class=\"highlight\"><code>score = int(input(\"Score: \"))\r\n\r\nif score >= 90:\r\n    print(\"Grade: A\")\r\nelif score >= 80:\r\n    print(\"Grade: B\")\r\nelif score >= 70:\r\n    print(\"Grade: C\")\r\nelif score >= 60:\r\n    print(\"Grade: D\")\r\nelse:\r\n    print(\"Grade: F\")</code></pre>\r\n                <span>Обратите внимание, как улучшилась программа за счет меньшего количества вопросов. Это делает нашу программу более легкой для чтения и гораздо более удобной в обслуживании в будущем.</span>\r\n                <li>Вы можете подробнее узнать о <a href=\"https://docs.python.org/3/tutorial/controlflow.html\">control flow</a> в документации Python </li>\r\n            </ul>\r\n            <h2>Modulo</h2>\r\n            <ul>\r\n                <li>В математике паритет означает, является ли число четным или нечетным.</li>\r\n                <li>Оператор по модулю <code class=\"code\">%</code> в программировании позволяет увидеть, делятся ли два числа нацело или делятся и имеют остаток.</li>\r\n                <li>Например, <code class=\"code\">4 % 2</code> даст ноль, потому что делится без остатка. Однако <code class=\"code\">3 % 2</code> не делится без остатка и даст число, отличное от нуля!</li>\r\n                <li>В окне терминала создайте новую программу, набрав <code class=\"code\">code parity.py</code>. В окне текстового редактора введите код следующим образом:</li>\r\n                <pre class=\"highlight\"><code>x = int(input(\"What's x? \"))\r\n\r\n    if x % 2 == 0:\r\n        print(\"Even\")\r\n    else:\r\n        print(\"Odd\")</code></pre>\r\n                <span>Обратите внимание, как наши пользователи могут ввести любое число, чтобы увидеть, четное оно или нечетное.</span>\r\n            </ul>\r\n            <h2>Создание функции для определении четности числа</h2>\r\n            <ul>\r\n                <li>Как обсуждалось в лекции 0, вам будет полезно создать собственную функцию!</li>\r\n                <li>Мы можем создать функцию для проверки того, является ли число четным или нечетным. Настройте свой код следующим образом:</li>\r\n                <pre class=\"highlight\"><code>def main():\r\n    x = int(input(\"What's x? \")\r\n    if is_even(x):\r\n        print(\"Even\")\r\n    else:\r\n        print(\"Odd\")\r\n\r\ndef is_even(n):\r\n    if n % 2 == 0:\r\n        return True\r\n    else:\r\n        return False\r\n\r\nmain()</code></pre>\r\n            <span>Обратите внимание, что одна из причин, по которой наше <code class=\"code\">if</code> утверждение <code class=\"code\">is_even(x)</code> работает, даже несмотря на то, что там нет оператора. Это потому, что наша функция возвращает bool(или логическое значение), true или false обратно в основную функцию. Оператор <code class=\"code\">if</code> просто проверяет, является ли x из функции <code class=\"code\">is_even</code> true  или false.</span>\r\n            </ul>\r\n            <h2>Pythonic</h2>\r\n            <ul>\r\n                <li>В мире программирования есть типы программирования, которые по своей природе называются «Pythonic». То есть существуют способы программирования, которые иногда встречаются только в программировании на Python. Рассмотрим следующую модификацию нашей программы:</li>\r\n                <pre class=\"highlight\"><code>def main():\r\n    x = int(input(\"What's x? \")\r\n    if is_even(x):\r\n        print(\"Even\")\r\n    else:\r\n        print(\"Odd\")\r\n\r\n\r\ndef is_even(n):\r\n    return True if n % 2 == 0 else False\r\n\r\n\r\nmain()</code></pre>\r\n                <span>Обратите внимание, что этот оператор возврата в нашем коде почти похож на предложение на английском языке. Это уникальный способ кодирования, встречающийся только в Python.</span>\r\n                <li>Мы можем дополнительно пересмотреть наш код и сделать его более читабельным:</li>\r\n                <pre class=\"highlight\"><code>def main():\r\n    x = int(input(\"What's x? \")\r\n    if is_even(x):\r\n        print(\"Even\")\r\n    else:\r\n        print(\"Odd\")\r\n\r\n\r\ndef is_even(n):\r\n    return n % 2 == 0\r\n\r\n\r\nmain()</code></pre>\r\n                <span>Обратите внимание, что программа провеярет <code class=\"code\">n % 2 == 0</code>как true или false и возвращает это функции main.</span>\r\n            </ul>\r\n            <h2>match</h2>\r\n            <ul>\r\n                <li>Подобно операторам <code class=\"code\">if</code>, <code class=\"code\">elif</code> и <code class=\"code\">else</code>, <code class=\"code\">match</code> оператор можно использовать для условного запуска кода, соответствующего определенным значениям.</li>\r\n                <li>Рассмотрим следующую программу:</li>\r\n                <pre class=\"highlight\"><code>  name = input(\"What's your name? \")\r\n\r\nif name == \"Harry\":\r\n    print(\"Gryffindor\")\r\nelif name == \"Hermione\":\r\n    print(\"Gryffindor\")\r\nelif name == \"Ron\": \r\n    print(\"Gryffindor\")\r\nelif name == \"Draco\":\r\n    print(\"Slytherin\")\r\nelse:\r\n    print(\"Who?\")</code></pre>\r\n                <span>Обратите внимание, что первые три условных оператора выводят один и тот же ответ.</span>\r\n                <li>Мы можем немного улучшить этот код, используя ключевое слово <code class=\"code\">or</code>:</li>\r\n                <pre class=\"highlight\"><code> name = input(\"What's your name? \")\r\n\r\nif name == \"Harry\" or name == \"Hermione\" or name == \"Ron\": \r\n    print(\"Gryffindor\")\r\nelif name == \"Draco\":\r\n    print(\"Slytherin\")\r\nelse:\r\n    print(\"Who?\")</code></pre>\r\n                <span>Обратите внимание, что количество  операторов <code class=\"code\">elif</code> уменьшилось, что улучшило читаемость нашего кода.</span>\r\n                <li>В качестве альтернативы мы можем использовать операторы <code class=\"code\">match</code> для сопоставления имен с домами. Рассмотрим следующий код:</li>\r\n                <pre class=\"highlight\"><code>name = input(\"What's your name? \")\r\n\r\nmatch name: \r\n    case \"Harry\":\r\n        print(\"Gryffindor\")\r\n    case \"Hermione\":\r\n        print(\"Gryffindor\")\r\n    case \"Ron\": \r\n        print(\"Gryffindor\")\r\n    case \"Draco\":\r\n        print(\"Slytherin\")\r\n    case _:\r\n        print(\"Who?\")</code></pre>\r\n                <span>Обратите внимание на использование <code class=\"code\">_</code> символа в последнем случае. Это будет соответствовать любому другому вводу, что приведет к поведению, аналогичному поведению  оператора <code class=\"code\">else</code>.</span>\r\n                <li>Оператор <code class=\"code\">match</code> сравнивает значение, следующее за  ключевым словом <code class=\"code\">match</code>, с каждым из значений, следующих за  ключевыми словами <code class=\"code\">case</code>. В случае обнаружения совпадения выполняется соответствующий участок кода с отступом, и программа останавливает сравнение.</li>\r\n                <li>Мы можем улучшить код:</li>\r\n                <pre class=\"highlight\"><code> name = input(\"What's your name? \")\r\n\r\nmatch name: \r\n    case \"Harry\" | \"Hermione\" | \"Ron\":\r\n        print(\"Gryffindor\")\r\n    case \"Draco\":\r\n        print(\"Slytherin\")\r\n    case _:\r\n        print(\"Who?\")</code></pre>\r\n                <span>Обратите внимание на использование одной вертикальной черты <code class=\"code\">|</code>. Подобно ключевому слову <code class=\"code\">or</code>, это позволяет нам проверять несколько значений в одном  выражении <code class=\"code\">case</code>.</span>\r\n            </ul>\r\n        <h2 id=\"summing-up\">Подводя итог</h2>\r\n        <p>Теперь у вас есть возможность в Python использовать условные операторы, чтобы задавать вопросы, и ваша программа выполняет соответствующие действия. В этой лекции мы обсудили…</p>\r\n        <ul>\r\n            <li>Условные выражения;</li>\r\n            <li>Оператор if;</li>\r\n            <li>Управление потоком, elif, and else;</li>\r\n            <li>or;</li>\r\n            <li>and;</li>\r\n            <li>modulo;</li>\r\n            <li>Создание функции;</li>\r\n            <li>Pythonic кодирование</li>\r\n            <li>и match</li>\r\n        </ul>\r\n    </main>\r\n</template>","import { render } from \"./Notes1View.vue?vue&type=template&id=84b972b0\"\nconst script = {}\n\nimport exportComponent from \"C:\\\\Users\\\\ммм\\\\Desktop\\\\cs50-python-ru\\\\cs50-python-ru\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n    <main>\r\n        <h1>Набор проблем 1</h1>\r\n        <h2>Что нужно делать</h2>\r\n        <ol>\r\n            <li>Войдите в <a href=\"https://code.cs50.io/\"> code.cs50.io</a>, облачную версию Visual Studio Code (VS Code), которая предоставляет собственное  кодовое пространство(Codespace) со всем что нужно для прохождения курса . Не нужно скачивать и устанавливать VS Code или Python на свой Mac или ПК!</li>\r\n            <li>Выполните update50 в окне терминала вашего Codespace, чтобы убедиться, что ваше пространство кода обновлено, при появлении запроса нажмите <b>Rebuild now</b>.</li>\r\n            <li>\r\n                <span>Отправьте все проблемы приведенные ниже:</span>\r\n                <ul>\r\n                    <li><router-link to=\"/1/deep/\">Deep Thought</router-link> </li>\r\n                    <li><router-link to=\"/1/bank/\">Home Federal Savings Bank</router-link> </li>\r\n                    <li><router-link to=\"/1/extensions/\">File Extensions</router-link> </li>\r\n                    <li><router-link to=\"/1/interpreter/\">Math Interpreter</router-link> </li>\r\n                    <li><router-link to=\"/1/meal/\">Meal Time</router-link> </li>\r\n                </ul>\r\n            </li>\r\n        </ol>\r\n    </main>\r\n</template>\r\n<style scoped>\r\nmain {\r\n    height: 100vh;\r\n}\r\n</style>","import { render } from \"./Psets1View.vue?vue&type=template&id=c08636b2&scoped=true\"\nconst script = {}\n\nimport \"./Psets1View.vue?vue&type=style&index=0&id=c08636b2&scoped=true&lang=css\"\n\nimport exportComponent from \"C:\\\\Users\\\\ммм\\\\Desktop\\\\cs50-python-ru\\\\cs50-python-ru\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-c08636b2\"]])\n\nexport default __exports__"],"names":["class","style","_createElementVNode","id","href","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_createVNode","_component_font","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","script","__exports__","render","width","height","src","title","frameborder","allow","allowfullscreen","_component_router_link","to","name","scrolling"],"sourceRoot":""}